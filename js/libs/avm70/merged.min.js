// READONLY

//const DEMO_MODE = true;
const DEMO_MODE = false;
//const DO_TRANSLATE = true;
const DO_TRANSLATE = false;
const BUILD_SH = true;

//for backwards compatibility with older hosts
//we check if the ':' is already present
function filter_socket_ip(ip) {
	var res = (ip + "").includes(":");
	if (res)
		return ip;
	else
		return ip + ":8080";
}
//const SOCKET_IP = filter_socket_ip(location.host);
const SOCKET_IP = '192.168.86.88:8080';
const LANGUAGE = Object.freeze({
	english: "en", chinese: "zh", german: "de",
	spanish: "es", french: "fr", italian: "it"
});
const language_codes = ["en", "zh", "de", "es", "fr", "it"];

var VOLUME_SCALE_IN_DB = true;

const MODEL = Object.freeze({
	MRXSLM: "MRX SLM",
	MRX540: "MRX 540",
	MRX740: "MRX 740",
	MRX1140: "MRX 1140",
	AVM70: "AVM 70",
	AVM90: "AVM 90"
});

const COMMAND = Object.freeze({

	NO_SEND: "",

	// info
	IDQ: "IDQ", // model and firmware version
	IDM: "IDM",	// model name
	GSN: "GSN", //serial number
	IDS: "IDS",	// mcu version
	DSPIDS: "DSPIDS", // dsp version
	LCDIDS: "LCDIDS", // lcdc version
	IDB: "IDB", // software build date
	IDH: "IDH", // hardware version
	IDR: "IDR", // region

	// network module
	NMSVER: "NMSVER",	// module version
	NMHVER: "NMHVER",	// module hardware version
	RVER: "RVER",		// release version
	RBD: "RBD",			// release build date
	NMR: "NMR",			// module region
	WMAC: "WMAC",		// wi-fi mac address
	EMAC: "EMAC",		// ethernet MAC address
	NMST: "NMST",		// network status

	// system status
	Z1VIR: "Z1VIR",   // Active Video Input
	Z1IRH: "Z1IRH",   // Active Horizontal Video Resolution
	Z1IRV: "Z1IRV",   // Active Vertical Video Resolution
	Z1AIC: "Z1AIC",   // Audio Input Channels
	Z1AIF: "Z1AIF",   // Audio Input Format
	Z1BRT: "Z1BRT",   // Audio Input Bit Rate
	Z1SRT: "Z1SRT",   // Audio Input Sampling Rate
	Z1BDP: "Z1BDP",   // Audio Input Bit Depth
	Z1AIN: "Z1AIN",   // Audio Input Name
	Z1AIR: "Z1AIR",   // Audio Input Rate Name

	CTRL0: "CTRL0", 	// exclusive control arc
	CTRL1: "CTRL1", 	// exclusive control scratchpad
	CTRL2: "CTRL2", 	// exclusive control firmware
	CPYS: "CPYS",		// copy settings
	LDFDS: "LDFDS",		// load factory default settings
	LOTFS: "LOTFS",		// load on-the-fly settings
	Z1EMSG: "Z1EMSG", 	// excluslive control message
	Z1EPRG: "Z1EPRG", 	// exclusive control progress
	BSC1: "BSC1",		// bulk settings changed

	Z1MSG: "Z1MSG",		// display custom messgae
	Z1SHC: "Z1SHC",		// show / hide custom message
	Z1SMD: "Z1SMD",		// setup menu state

	PRGS0: "PRGS0",

	// general
	GCDN: "GCDN", 		// device name
	GCL: "GCL", 			// language
	GCDU: "GCDU",			// distance unit (ft / m)
	GCMMV: "GCMMV",		// main max volume
	GCZ2MMV: "GCZ2MMV", 		// zone 2 max volume
	GCMPOV: "GCMPOV",		// main power on volume
	GCZ2POV: "GCZ2POV", 		// zone 2 power on volume
	GCMPOI: "GCMPOI",		// main power on input
	GCZ2POI: "GCZ2POI",		// zone 2 power on input
	GCMVS: "GCMVS",		// master volume scale
	GCSHDMIB: "GCSHDMIB",		// standby hdmi bypass
	GCTZ: "GCTZ",			// timezone
	GCAU: "GCAU",			// automatic updates
	GCBU: "GCBU",			// beta updates
	GCCSTBY: "GCCSTBY",		// connected standby
	GCNSPO: "GCNSPO", 		// no signal power off
	GCFPDI: "GCFPDI",		// front panel display info
	GCFPB: "GCFPB",		// front panel brightness
	GCWUB: "GCWUB",		// wake up brightness
	GCOSID: "GCOSID",		// on screen info display
	GCOSIZ: "GCOSIZ",		// which zone to display
	GCML: "GCML", 		// mute level
	GCMLOWS: "GCMLOWS",		// mute line out when selecting
	GCMDOWS: "GCMDOWS", 		// mute digital out when selecting
	GCHMMO: "GCHMMO",		// headphone mutes main outs
	GCDSZ: "GCDSZ",		// default streaming zone
	GCFCSI: "GCFCSI",		// favour current streaming input
	GCCECC: "GCCECC",		// CEC Control
	GCCPFC: "GCCPFC",		// CEC Power off
	GCCTVA: "GCCTVA", 		// HDMI Audio to TV

	SS3DHL: "SS3DHL", 	// height
	SS3DH1: "SS3DH1", 	// height 1
	SS3DH2: "SS3DH2", 	// height 2
	SS3DH3: "SS3DH3", 	// height 3

	// amp matrixing
	SSAMF: "SSAMF",
	SSAMS: "SSAMS",
	SSAMB: "SSAMB",
	SSAMH1: "SSAMH1",
	SSAMH2: "SSAMH2",

	// network
	GCTCP: "GCTCP",		// TCP Port
	GCTXS: "GCTXS",		// Tx Status
	GCRIR: "GCRIR",		// Rear IR
	GCFIR: "GCFIR",		// Front IR
	GCIR: "GCIR",		// Front or rear IR
	GCIPM: "GCIPM",		// IP mode
	GCIPS: "GCIPS",		// IP setter

	// IP status
	GCIPSTT: "GCIPSTT",	// Status
	GCIPSTM: "GCIPSTM",	// IP mode
	GCIPSTI: "GCIPSTI",	// IP address
	GCIPSTS: "GCIPSTS",	// Subnet
	GCIPSTG: "GCIPSTG",	// Gateway
	GCIPSDN: "GCIPSDN",	// DNS

	// IP configuration
	GCIPV_A: "GCIPV_A",	// Apply change
	GCIPV_M: "GCIPV_M",	// IP mode
	GCIPV_I: "GCIPV_I",	// IP address
	GCIPV_S: "GCIPV_S",	// Subnet
	GCIPV_G: "GCIPV_G",	// Gateway
	GCIPV_D: "GCIPV_D",	// DNS

	// trigger
	GCTD: "GCTD",
	GCT_C: "GCT_C",		// trigger control
	GCT_P: "GCT_P",		// trigger power
	GCT_I: "GCT_I", 	// trigger input

	// PROFILE commands

	SSSP_0: "SSSP_0",	// profile name
	SSSP_1: "SSSP_1",	// enable sub
	//SSSP_5: "SSSP_5",	// enable front, always on
	SSSP_6: "SSSP_6",	// enable front wide
	SSSP_7: "SSSP_7",	// enable center
	SSSP_8: "SSSP_8",	// enable surround
	SSSP_9: "SSSP_9",	// enable backs
	SSSP_A: "SSSP_A", 	// enable heights 1
	SSSP_B: "SSSP_B", 	// enable heights 2
	SSSP_C: "SSSP_C", 	// enable heights 3

	BMSP_0: "BMSP_0",  // sub lfe low pass filter
	BMSP_5: "BMSP_5",	// sub front cx
	BMSP_6: "BMSP_6",	// sub front wide cx
	BMSP_7: "BMSP_7",	// sub center cx
	BMSP_8: "BMSP_8", 	// sub surrond cx
	BMSP_9: "BMSP_9",	// sub back cx
	BMSP_A: "BMSP_A",	// sub height 1 cx
	BMSP_B: "BMSP_B",	// sub height 2 cx
	BMSP_C: "BMSP_C",	// sub height 3 cx
	BMSP_D: "BMSP_D",  // super sub fronts
	BMSP_10: "BMSP_10", // sub 1 phase frequency
	BMSP_11: "BMSP_11", // sub 1 phase
	BMSP_12: "BMSP_12", // sub 1 polarity
	BMSP_20: "BMSP_20", // sub 2 phase frequency
	BMSP_21: "BMSP_21", // sub 2 phase
	BMSP_22: "BMSP_22", // sub 2 polarity
	BMSP_30: "BMSP_30", // sub 3 phase frequency
	BMSP_31: "BMSP_31", // sub 3 phase
	BMSP_32: "BMSP_32", // sub 3 polarity
	BMSP_40: "BMSP_40", // sub 4 phase frequency
	BMSP_41: "BMSP_41", // sub 4 phase
	BMSP_42: "BMSP_42", // sub 4 polarity


	// listening position / distance
	LPSP_1: "LPSP_1",	// sub distance
	LPSP_2: "LPSP_2",	// sub 2 distance
	LPSP_3: "LPSP_3",	// sub 3 distance
	LPSP_4: "LPSP_4",	// sub 4 distance
	LPSP_5: "LPSP_5",	// front l
	LPSP_6: "LPSP_6",	// front r
	LPSP_7: "LPSP_7",	// front wide l
	LPSP_8: "LPSP_8",	// front wide r
	LPSP_9: "LPSP_9", 	// center
	LPSP_A: "LPSP_A",	// surrounds l
	LPSP_B: "LPSP_B",	// surrounds r
	LPSP_C: "LPSP_C",	// back l
	LPSP_D: "LPSP_D", 	// back r
	LPSP_E: "LPSP_E",	// ht1 l
	LPSP_F: "LPSP_F",	// ht1 r
	LPSP_G: "LPSP_G",	// ht2 l
	LPSP_H: "LPSP_H",	// ht2 r
	LPSP_I: "LPSP_I",	// ht3 l
	LPSP_J: "LPSP_J",	// ht3 r

	// level calibration
	LCSP_0: "LCSP_0", 	// dolby offset / cal
	LCSP_1: "LCSP_1",	// sub 1 level
	LCSP_2: "LCSP_2",	// sub 2 level
	LCSP_3: "LCSP_3",	// sub 3 level
	LCSP_4: "LCSP_4",	// sub 4 level
	LCSP_5: "LCSP_5",	// front l
	LCSP_6: "LCSP_6",	// front r
	LCSP_7: "LCSP_7",	// front wide l
	LCSP_8: "LCSP_8",	// front wide r
	LCSP_9: "LCSP_9",	// center
	LCSP_A: "LCSP_A",	// surrounds l
	LCSP_B: "LCSP_B",	// surrounds r
	LCSP_C: "LCSP_C", 	// back l
	LCSP_D: "LCSP_D", 	// back r
	LCSP_E: "LCSP_E",	// ht1 l
	LCSP_F: "LCSP_F",	// ht1 r
	LCSP_G: "LCSP_G",	// ht2 l
	LCSP_H: "LCSP_H",	// ht2 r
	LCSP_I: "LCSP_I",	// ht3 l
	LCSP_J: "LCSP_J",	// ht3 r
	LCSP_K: "LCSP_K",	// test noise

	// ZONE commands

	Z_POW: "Z_POW",		// power
	Z_INP: "Z_INP",		// input
	Z_VOL: "Z_VOL",		// volume in dB
	Z_PVOL: "Z_PVOL",		// % volume
	Z_MUT: "Z_MUT",		// mute
	Z_BAL: "Z_BAL",		// balance
	Z_TON1: "Z_TON1",		// tone treble
	Z_TON0: "Z_TON0",		// tone bass
	Z_LEV5: "Z_LEV5",		// levels front
	Z_LEV6: "Z_LEV6",		// levels front wide
	Z_LEV7: "Z_LEV7",		// levels center
	Z_LEV8: "Z_LEV8",		// levels surround
	Z_LEV9: "Z_LEV9",		// levels backs
	Z_LEV1: "Z_LEV1",		// levels sub
	Z_LEVD: "Z_LEVD",		// levels lfe
	Z_LEVA: "Z_LEVA",		// levels ht1
	Z_LEVB: "Z_LEVB",		// levels ht2
	Z_LEVC: "Z_LEVC",		// levels ht3
	Z_ALM: "Z_ALM",		// audio mode

	// INPUT commands

	ICN: "ICN",  // input count
	IIAI: "IIAI", // add input
	IDAI: "IDAI", // delete input

	IS_IN: "IS_IN",
	IS_VID: "IS_VID",
	IS_AIJ: "IS_AIJ",
	IS_SP: "IS_SP",
	IS_PM: "IS_PM",
	IS_PS: "IS_PS",
	IS_PC: "IS_PC",
	IS_CA: "IS_CA",
	IS_ARC: "IS_ARC",
	IS_DV: "IS_DV",
	IS_RF: "IS_RF",
	IS_LS: "IS_LS",
	IS_IT: "IS_IT",

	Z1ARCVAL: "Z1ARCVAL",
	Z1ARCUPL: "Z1ARCUPL",
	Z1ARCNAM: "Z1ARCNAM",

	// Store and Load
	CHFUPD: "CHFUPD",
	UPDUSB: "UPDUSB",
	UPDOTA: "UPDOTA",
	NMWPS: "NMWPS", // can only be sent from MRX to NM
	RWPS: "RWPS",
	RWIFIS: "RWIFIS", // can only be sent from MRX to NM
	RSTWFS: "RSTWFS",

	// FAULTS
	FCC: "FCC", // count
	FCN: "FCN", // name
	FCQ: "FCQ", // fault count
	FCR: "FCR",  // reset

	// Progress, commands cause error
	LOAD_STEP: "_LOADER_STEP_",
	STORED_I: "_STORE_DONE_INSTALLER_",
	STORED_U: "_STORE_DONE_USER_"
});

function get_input_command(command, index) {
	return command.replace('_', index);
}

function get_zone_command(command, index) {
	return command.replace('_', index);
}

function get_profile_command(command, index) {
	return command.replace('_', index);
}

var device = {
	friendly_name: "",
	model: "",
	mac: "",
	serial_number: "",
	firmware_version: "",
	brand: "",
	img_src: "",
	init_commands: [],
	any_trig_inputs: 0,
	use_zone2: true,
	always_back: true
}

function setDevice(model) {
	// Set values to be used anywhere
	device.model = model;

	var default_img = "../shared/img/devices/device_default.png";
	var image_path = "../shared/img/devices/";
	if (BUILD_SH) {
		default_img = "img/devices/device_default.png";
		image_path = "img/devices/";
	}

	if (model === MODEL.MRXSLM) {
		device.img_src = image_path + "device_mrx_slm.png";
		device.brand = "Anthem";
	} else if (model === MODEL.MRX540) {
		device.img_src = image_path + "device_mrx_540.png";
		device.brand = "Anthem";
	} else if (model === MODEL.MRX740) {
		device.img_src = image_path + "device_mrx_740.png";
		device.brand = "Anthem";
	} else if (model === MODEL.MRX1140) {
		device.img_src = image_path + "device_mrx_1140.png";
		device.brand = "Anthem";
	} else if (model === MODEL.AVM70) {
		device.img_src = image_path + "device_avm_70.png";
		device.brand = "Anthem";
	} else if (model === MODEL.AVM90) {
		device.img_src = image_path + "device_avm_90.png";
		device.brand = "Anthem";
	} else {
		device.img_src = default_img;
		device.brand = "Not Set";
		logE("Device brand not set for model: " + model);
	}
	device.use_zone2 = (device.model === MODEL.MRX740 || device.model === MODEL.MRX1140 ||
		device.model === MODEL.AVM70 || device.model === MODEL.AVM90);
	device.always_back = (device.model === MODEL.MRX740 || device.model === MODEL.MRX1140 ||
		device.model === MODEL.AVM70 || device.model === MODEL.AVM90);
	device.always_surround = (device.model === MODEL.MRX540 || device.model === MODEL.MRX740 ||
		device.model === MODEL.MRX1140 ||
		device.model === MODEL.AVM70 || device.model === MODEL.AVM90);
	device.is_mrxx40 = (device.model === MODEL.MRX540 ||
		device.model === MODEL.MRX740 ||
		device.model === MODEL.MRX1140);
	device.is_avm79 = (device.model === MODEL.AVM70 || device.model === MODEL.AVM90);
	device.is_mrxx40avm79 = device.is_mrxx40 || device.is_avm79;
	device.is_mrxslm = device.model === MODEL.MRXSLM;
	device.is_multi_subs = (device.model === MODEL.MRX1140) || device.is_avm79;

	device.init_commands = get_init_commands(model);

	function get_init_commands(model) {
		var result = [];

		function get_info_commands(model) {
			var cmds = [COMMAND.GSN, COMMAND.IDS, COMMAND.IDB, COMMAND.IDR, COMMAND.IDH,
			COMMAND.Z1ARCVAL, COMMAND.Z1ARCUPL, COMMAND.Z1ARCNAM,
			COMMAND.WMAC, COMMAND.EMAC, COMMAND.NMST];
			if (model == MODEL.MRX540 || model == MODEL.MRX740 || model == MODEL.MRX1140 ||
				model == MODEL.AVM70 || model == MODEL.AVM90) {
				cmds.push(COMMAND.NMSVER, COMMAND.DSPIDS, COMMAND.LCDIDS,
					COMMAND.NMHVER, COMMAND.RVER, COMMAND.RBD, COMMAND.NMR);
			}
			return cmds;
		}

		function get_general_commands(model) {
			var cmds = [COMMAND.GCDN, COMMAND.GCL, COMMAND.GCDU, COMMAND.GCMVS,
			COMMAND.GCSHDMIB, COMMAND.GCBU, COMMAND.GCCSTBY,
			COMMAND.GCNSPO, COMMAND.GCCECC, COMMAND.GCCPFC, COMMAND.GCCTVA];
			if (model == MODEL.MRX540 || model == MODEL.MRX740 || model == MODEL.MRX1140 ||
				model == MODEL.AVM70 || model == MODEL.AVM90) {
				cmds.push(COMMAND.GCFPDI, COMMAND.GCWUB, COMMAND.GCFPB, COMMAND.GCOSID,
					COMMAND.GCAU, COMMAND.GCOSIZ, COMMAND.GCML, COMMAND.GCMLOWS,
					COMMAND.GCMDOWS, COMMAND.GCHMMO);
			}
			return cmds;
		}

		function get_global_commands(model) {
			var device_commands = [];

			if (model === MODEL.MRXSLM) {
				device_commands.push(COMMAND.SSAMS);
			} else if (model === MODEL.MRX540) {
				device_commands.push(COMMAND.SS3DH1, COMMAND.SS3DHL);
			} else if (model === MODEL.MRX740) {
				device_commands.push(COMMAND.SS3DH1, COMMAND.SSAMF,
					COMMAND.SSAMS, COMMAND.SSAMB, COMMAND.SS3DH2);
			} else if (model === MODEL.MRX1140) {
				device_commands.push(COMMAND.SS3DH1, COMMAND.SSAMF,
					COMMAND.SSAMS, COMMAND.SSAMB, COMMAND.SSAMH1,
					COMMAND.SSAMH2, COMMAND.SS3DH2, COMMAND.SS3DH3);
			} else if (model === MODEL.AVM70) {
				device_commands.push(COMMAND.SS3DH1, COMMAND.SS3DH2, COMMAND.SS3DH3);
			} else if (model === MODEL.AVM90) {
				device_commands.push(COMMAND.SS3DH1, COMMAND.SS3DH2, COMMAND.SS3DH3);
			}
			return device_commands;
		}

		function get_main_zone_commands(model) {
			var zone_number = 1;
			var result = [];
			var commands_commands = [get_zone_command(COMMAND.Z_POW, zone_number),
			get_zone_command(COMMAND.Z_VOL, zone_number),
			get_zone_command(COMMAND.Z_PVOL, zone_number), COMMAND.GCMPOV,
			COMMAND.GCMMV, get_zone_command(COMMAND.Z_INP, zone_number),
			COMMAND.GCMPOI, get_zone_command(COMMAND.Z_ALM, zone_number),
			get_zone_command(COMMAND.Z_MUT, zone_number),
			//levels
			get_zone_command(COMMAND.Z_BAL, zone_number),
			get_zone_command(COMMAND.Z_TON1, zone_number), get_zone_command(COMMAND.Z_TON0, zone_number),
			get_zone_command(COMMAND.Z_LEV5, zone_number), get_zone_command(COMMAND.Z_LEV7, zone_number),
			get_zone_command(COMMAND.Z_LEV8, zone_number),
			get_zone_command(COMMAND.Z_LEV1, zone_number), get_zone_command(COMMAND.Z_LEVD, zone_number)];
			result = result.concat(commands_commands);

			if (model === MODEL.MRX540 || model === MODEL.MRX740 ||
				model === MODEL.MRX1140 || model === MODEL.AVM70 ||
				model === MODEL.AVM90) {
				var back_height_commands = [get_zone_command(COMMAND.Z_LEV9, zone_number),
				get_zone_command(COMMAND.Z_LEVA, zone_number)];
				result = result.concat(back_height_commands);
			}
			if (model === MODEL.MRX1140 || model === MODEL.AVM70 || model === MODEL.AVM90) {
				var front_wide_commands = [get_zone_command(COMMAND.Z_LEV6, zone_number)];
				result = result.concat(front_wide_commands);

				var heights_3_commands = [get_zone_command(COMMAND.Z_LEVC, zone_number)];
				result = result.concat(heights_3_commands);
			}
			if (model === MODEL.MRX740 || model === MODEL.MRX1140 || model === MODEL.AVM70 || model === MODEL.AVM90) {
				var heights_2_commands = [get_zone_command(COMMAND.Z_LEVB, zone_number)];
				result = result.concat(heights_2_commands);
			}
			return result;
		}

		function get_zone_2_commands(model) {
			if (model === MODEL.MRXSLM || model === MODEL.MRX540) {
				return [];
			} else {
				var zone_number = 2;
				return [get_zone_command(COMMAND.Z_POW, zone_number),
				get_zone_command(COMMAND.Z_VOL, zone_number),
				get_zone_command(COMMAND.Z_PVOL, zone_number),
				COMMAND.GCZ2POV, COMMAND.GCZ2MMV,
				get_zone_command(COMMAND.Z_INP, zone_number),
				COMMAND.GCZ2POI, get_zone_command(COMMAND.Z_MUT, zone_number),
				COMMAND.GCDSZ, COMMAND.GCFCSI];
			}
		}

		function get_network_commands(model) {
			var result = [COMMAND.GCTCP];
			if (model === MODEL.MRXSLM) {
				result.push(COMMAND.GCIR);
			}
			if (model === MODEL.MRX540 || model === MODEL.MRX740 || model === MODEL.MRX1140 ||
				model === MODEL.AVM70 || model === MODEL.AVM90) {
				result.push(COMMAND.GCIPSTT, COMMAND.GCIPSTM, COMMAND.GCIPSTI,
					COMMAND.GCIPSTS, COMMAND.GCIPSTG, COMMAND.GCIPSDN);
				result.push(COMMAND.GCFIR, COMMAND.GCRIR, COMMAND.GCTXS, COMMAND.GCTD);
			}
			if (model === MODEL.MRX540 || model === MODEL.MRX740 || model === MODEL.MRX1140 ||
				model === MODEL.AVM70 || model === MODEL.AVM90) {
				var trigger_number;
				for (trigger_number = 1; trigger_number <= 3; trigger_number++) {
					result.push(COMMAND.GCT_C.replace('_', trigger_number));
					result.push(COMMAND.GCT_P.replace('_', trigger_number));

					var i;
					for (i = 0; i < inputs_page.added_inputs_indices.length; i++) {
						var index = inputs_page.added_inputs_indices[i];
						result.push(COMMAND.GCT_I.replace('_', trigger_number) + index);
					}
				}
			}
			return result;
		}

		function get_profile_commands(model) {

			var result = [];
			var index;
			for (index = 1; index <= 4; index++) {
				var common_profile_commands = [

					// name, calibration level, subwoofers, lfe lpf
					get_profile_command(COMMAND.SSSP_0, index), get_profile_command(COMMAND.LCSP_0, index),
					get_profile_command(COMMAND.SSSP_1, index), get_profile_command(COMMAND.BMSP_0, index),

					// sub 1
					get_profile_command(COMMAND.BMSP_10, index),
					get_profile_command(COMMAND.BMSP_11, index), get_profile_command(COMMAND.BMSP_12, index),
					get_profile_command(COMMAND.LPSP_1, index), get_profile_command(COMMAND.LCSP_1, index),

					// fronts
					get_profile_command(COMMAND.LPSP_5, index), get_profile_command(COMMAND.LCSP_5, index),
					get_profile_command(COMMAND.LPSP_6, index), get_profile_command(COMMAND.LCSP_6, index),
					get_profile_command(COMMAND.BMSP_5, index),

					// center
					get_profile_command(COMMAND.SSSP_7, index),
					get_profile_command(COMMAND.BMSP_7, index),
					get_profile_command(COMMAND.LPSP_9, index), get_profile_command(COMMAND.LCSP_9, index),

					// surrounds
					get_profile_command(COMMAND.SSSP_8, index),
					get_profile_command(COMMAND.BMSP_8, index),
					get_profile_command(COMMAND.LPSP_A, index), get_profile_command(COMMAND.LCSP_A, index),
					get_profile_command(COMMAND.LPSP_B, index), get_profile_command(COMMAND.LCSP_B, index),

					// heights 1
					get_profile_command(COMMAND.SSSP_A, index),
					get_profile_command(COMMAND.BMSP_A, index),
					get_profile_command(COMMAND.LPSP_E, index), get_profile_command(COMMAND.LCSP_E, index),
					get_profile_command(COMMAND.LPSP_F, index), get_profile_command(COMMAND.LCSP_F, index)
				];
				result = result.concat(common_profile_commands);

				if (model === MODEL.MRX540 || model === MODEL.MRX740 ||
					model === MODEL.MRX1140 || model === MODEL.AVM70 ||
					model === MODEL.AVM90) {
					var more_profile_commands = [
						get_profile_command(COMMAND.BMSP_D, index), get_profile_command(COMMAND.LCSP_K, index),
						// backs
						get_profile_command(COMMAND.SSSP_9, index),
						get_profile_command(COMMAND.BMSP_9, index),
						get_profile_command(COMMAND.LPSP_C, index), get_profile_command(COMMAND.LCSP_C, index),
						get_profile_command(COMMAND.LPSP_D, index), get_profile_command(COMMAND.LCSP_D, index)
					];
					result = result.concat(more_profile_commands);
				}
				if (model === MODEL.MRX1140 || model === MODEL.AVM70 || model === MODEL.AVM90) {

					// front wide
					var front_wide_profile_commands = [
						get_profile_command(COMMAND.SSSP_6, index),
						get_profile_command(COMMAND.LPSP_7, index), get_profile_command(COMMAND.LCSP_7, index),
						get_profile_command(COMMAND.LPSP_8, index), get_profile_command(COMMAND.LCSP_8, index),
						get_profile_command(COMMAND.BMSP_6, index)
					];
					result = result.concat(front_wide_profile_commands);

					// heights 3
					var heights_3_profile_commands = [
						get_profile_command(COMMAND.SSSP_C, index),
						get_profile_command(COMMAND.BMSP_C, index),
						get_profile_command(COMMAND.LPSP_I, index), get_profile_command(COMMAND.LCSP_I, index),
						get_profile_command(COMMAND.LPSP_J, index), get_profile_command(COMMAND.LCSP_J, index)
					];
					result = result.concat(heights_3_profile_commands);

					// sub 2
					var sub_2_profile_commands = [
						get_profile_command(COMMAND.BMSP_20, index),
						get_profile_command(COMMAND.BMSP_21, index), get_profile_command(COMMAND.BMSP_22, index),
						get_profile_command(COMMAND.LPSP_2, index), get_profile_command(COMMAND.LCSP_2, index)
					];
					result = result.concat(sub_2_profile_commands);
				}

				// heights 2
				if (model === MODEL.MRX740 || model === MODEL.MRX1140 || model === MODEL.AVM70 || model === MODEL.AVM90) {
					var heights_2_profile_commands = [
						get_profile_command(COMMAND.SSSP_B, index),
						get_profile_command(COMMAND.BMSP_B, index),
						get_profile_command(COMMAND.LPSP_G, index), get_profile_command(COMMAND.LCSP_G, index),
						get_profile_command(COMMAND.LPSP_H, index), get_profile_command(COMMAND.LCSP_H, index)
					];
					result = result.concat(heights_2_profile_commands);
				}

				if (model === MODEL.AVM90) {
					// sub 3
					var sub_3_profile_commands = [
						get_profile_command(COMMAND.BMSP_30, index),
						get_profile_command(COMMAND.BMSP_31, index), get_profile_command(COMMAND.BMSP_32, index),
						get_profile_command(COMMAND.LPSP_3, index), get_profile_command(COMMAND.LCSP_3, index)
					];
					result = result.concat(sub_3_profile_commands);
					// sub 4
					var sub_4_profile_commands = [
						get_profile_command(COMMAND.BMSP_40, index),
						get_profile_command(COMMAND.BMSP_41, index), get_profile_command(COMMAND.BMSP_42, index),
						get_profile_command(COMMAND.LPSP_4, index), get_profile_command(COMMAND.LCSP_4, index)
					];
					result = result.concat(sub_4_profile_commands);
				}
			}
			return result;
		}

		var save_page_commands = [COMMAND.IDS];

		function progress_command(step, so_far, total) {
			var percent = parseInt(so_far * 100 / total);
			return COMMAND.LOAD_STEP + step + "_" + percent;
		}

		// Get variable amounts
		var info_cmds = get_info_commands(model);
		var gen_cmds = get_general_commands(model);
		var global_cmds = get_global_commands(model);
		var mainz_cmds = get_main_zone_commands(model);
		var zone2_cmds = get_zone_2_commands(model);
		var net_cmds = get_network_commands(model);
		var prof_cmds = get_profile_commands(model);

		// Get counts
		var total = info_cmds.length + 1;
		total += gen_cmds.length + 1;
		total += global_cmds.length + 1;
		total += mainz_cmds.length + 1;
		total += zone2_cmds.length + 1;

		device.any_trig_inputs = inputs_page.added_inputs_indices.length > 0;
		total += net_cmds.length + 1;
		total += prof_cmds.length + 1;
		total += save_page_commands.length + 1;

		// Prepare transmission
		var step_count = 0;
		result = result.concat(info_cmds);
		result = result.concat(progress_command(step_count++, result.length, total));
		result = result.concat(gen_cmds);
		result = result.concat(progress_command(step_count++, result.length, total));
		result = result.concat(global_cmds);
		result = result.concat(progress_command(step_count++, result.length, total));
		result = result.concat(mainz_cmds);
		result = result.concat(progress_command(step_count++, result.length, total));
		result = result.concat(zone2_cmds);
		result = result.concat(progress_command(step_count++, result.length, total));
		result = result.concat(net_cmds);
		result = result.concat(progress_command(step_count++, result.length, total));
		result = result.concat(prof_cmds);
		result = result.concat(progress_command(step_count++, result.length, total));
		result = result.concat(save_page_commands);
		result = result.concat(progress_command(step_count++, result.length, total));

		return result.remove_duplicates();
	}
}

const ui_version = ".";

String.prototype.hexEncode = function () {
	var hex, i;
	var result = "";
	for (i = 0; i < this.length; i++) {
		hex = this.charCodeAt(i).toString(16);
		result += ("000" + hex).slice(-4);
	}
	return result;
};

String.prototype.hexDecode = function () {
	var j;
	var hexes = this.match(/.{1,4}/g) || [];
	var back = "";
	for (j = 0; j < hexes.length; j++) {
		back += String.fromCharCode(parseInt(hexes[j], 16));
	}
	return back;
};

String.prototype.is_number = function () {
	return !isNaN(parseFloat(this)) && !isNaN(this - 0);
};

if (!String.prototype.startsWith) {
	String.prototype.startsWith = function (searchString, position) {
		position = position || 0;
		return this.substr(position, searchString.length) === searchString;
	};
}

String.prototype.pad_with_spaces = function (spaces) {
	if (this.length < spaces) {
		return this + ' '.repeat(spaces - this.length);
	}
	return this;
}

String.prototype.stuffus = function (value) {
	var index = this.indexOf("_");
	if (index >= 0) {
		return this.substr(0, index) + value + this.substr(index + 1, this.length);
	}
	return this;
}

function only_or_first(str) {
	if (str != undefined) {
		if (Array.isArray(str)) {
			if (str.length > 0) {
				return str[0];
			} else {
				return {};
			}
		} else {
			return str;
		}
	} else {
		return "";
	}
}

Array.prototype.chunk = function (n) {
	if (!this.length) {
		return [];
	}
	return [this.slice(0, n)].concat(this.slice(n).chunk(n));
};

Array.prototype.last = function () {
	return this[this.length - 1];
}

Array.prototype.remove_duplicates = function () {
	var temp = {};
	for (var i = 0; i < this.length; i++)
		temp[this[i]] = true;
	return Object.keys(temp);
};

if (!Array.prototype.includes) {
	Object.defineProperty(Array.prototype, "includes", {
		enumerable: false,
		value: function (obj) {
			var newArr = this.filter(function (el) {
				return el == obj;
			});
			return newArr.length > 0;
		}
	});
}

Number.prototype.to_percent = function (min, max) {
	return 100.0 * (this - min) / (max - min);
};

// Change a volume scale from dB to per cent
Number.prototype.dB_to_percent = function () {
	var base_pc = 30;
	var base_db = -25.0;
	var increment = 0.5;
	if (this <= -74) {
		base_db = -90.0;
		increment = 4.0;
		base_pc = 0;
	} else if (this <= -53) {
		base_db = -74.0;
		increment = 3.0;
		base_pc = 4;
	} else if (this <= -35) {
		base_db = -53.0;
		increment = 2.0;
		base_pc = 11;
	} else if (this <= -25) {
		base_db = -35.0;
		increment = 1.0
		base_pc = 20;
	}
	return (this - base_db) / increment + base_pc;
}

// Change a volume scale from per cent to dB
Number.prototype.percent_to_dB = function () {
	var base_pc = 30;
	var base_db = -25.0;
	var increment = 0.5;
	if (this <= 4) {
		base_pc = 0;
		increment = 4;
		base_db = -90.0;
	} else if (this <= 11) {
		base_pc = 4;
		increment = 3;
		base_db = -74.0;
	} else if (this <= 20) {
		base_pc = 11;
		increment = 2;
		base_db = -53.0;
	} else if (this <= 30) {
		base_pc = 20;
		increment = 1;
		base_db = -35.0;
	}
	return (this - base_pc) * increment + base_db;
}

// From seconds
Number.prototype.tohmMSS = function () {
	var seconds = Math.floor(this), hours = Math.floor(seconds / 3600);
	seconds -= hours * 3600;
	var minutes = Math.floor(seconds / 60);
	seconds -= minutes * 60;
	if (hours > 0) {
		if (minutes < 10) { minutes = "0" + minutes; }
		if (seconds < 10) { seconds = "0" + seconds; }
		return hours + ":" + minutes + ":" + seconds;
	} else {
		if (seconds < 10) { seconds = "0" + seconds; }
		return minutes + ":" + seconds;
	}
}

var cookies = {};

if (DEMO_MODE) {
	var local_cookie = "";
}

cookies.LANGUAGE_KEY = "language";
cookies.get_language = function () {
	var language = cookies.getCookie(cookies.LANGUAGE_KEY);
	if (language == "") {
		language = LANGUAGE.english; // default value
		cookies.set_language(language);
	}
	return language;
};
cookies.set_language = function (value) {
	if (value === LANGUAGE.english) {
		cookies.setCookie(cookies.LANGUAGE_KEY, value, 365);
		return true;
	} else {
		logE("Error set_language");
		return false;
	}
};

cookies.PROFILE_SELECTION_KEY = "profile_selection";
cookies.get_profile_selection = function () {
	var profile_selection = cookies.getCookie(cookies.PROFILE_SELECTION_KEY);
	if (profile_selection == "") {
		profile_selection = "profile_1"; // default value
		cookies.set_profile_selection(profile_selection);
	}
	return profile_selection;
};
cookies.set_profile_selection = function (value) {
	if (value === "global" || value === "profile_1" || value === "profile_2" || value === "profile_3" || value === "profile_4")
		cookies.setCookie(cookies.PROFILE_SELECTION_KEY, value, 365);
	else
		logE("Error set_profile_selection");
};


cookies.FRESH_UPDATE_KEY = "fresh_update";
cookies.get_firmware_fresh_update = function () {
	return parseInt(cookies.getCookie(cookies.FRESH_UPDATE_KEY));
};
cookies.set_firmware_fresh_update = function () {
	document.cookie = cookies.FRESH_UPDATE_KEY + "=" + 1;
};
cookies.delete_firmware_fresh_update = function () {
	cookies.deleteCookie(cookies.FRESH_UPDATE_KEY);
};

cookies.FIRMWARE_CURRENT_VERSION_KEY = "current_firmware";
cookies.get_firmware_current_version = function () {
	return cookies.getCookie(cookies.FIRMWARE_CURRENT_VERSION_KEY);
};
cookies.set_firmware_current_version = function (version) {
	document.cookie = cookies.FIRMWARE_CURRENT_VERSION_KEY + "=" + version;
};
cookies.delete_firmware_current_version = function () {
	cookies.deleteCookie(cookies.FIRMWARE_CURRENT_VERSION_KEY);
};

cookies.FIRMWARE_OLD_VERSION_KEY = "old_firmware";
cookies.get_firmware_old_version = function () {
	return cookies.getCookie(cookies.FIRMWARE_OLD_VERSION_KEY);
};
cookies.set_firmware_old_version = function (version) {
	document.cookie = cookies.FIRMWARE_OLD_VERSION_KEY + "=" + version;
};
cookies.delete_firmware_old_version = function () {
	cookies.deleteCookie(cookies.FIRMWARE_OLD_VERSION_KEY);
};

cookies.SONG_SORT_KEY = "song_sort_order";
cookies.get_sort_order = function () {
	var sso_enums = cookies.getCookie(cookies.SONG_SORT_KEY);
	if (sso_enums == "") {
		sso_enums = "sso_artist,sso_album,sso_number,sso_title,sso_duration,sso_path"; // default value
		cookies.set_sort_order(sso_enums);
	}
	return sso_enums;
};

cookies.set_sort_order = function (value) {
	if (Array.isArray(value)) {
		var clump = value[0];
		for (var cnt = 1; cnt < value.length; cnt++) {
			clump = clump + "," + value[cnt];
		}
		cookies.setCookie(cookies.SONG_SORT_KEY, clump, 365);
	} else {
		// Assuming a string
		cookies.setCookie(cookies.SONG_SORT_KEY, value, 365);
	}
}

cookies.setCookie = function (cname, cvalue, exdays) {
	var d = new Date();
	d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
	var expires = "expires=" + d.toUTCString();
	var one_cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=Lax";
	document.cookie = one_cookie;
	if (DEMO_MODE) {
		local_cookie = one_cookie;
	}
};
cookies.getCookie = function (cname) {
	var name = cname + "=";
	var all_cookies = document.cookie;
	if (DEMO_MODE) {
		all_cookies = local_cookie;
	}
	var ca = all_cookies.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') {
			c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
};
cookies.deleteCookie = function (cname) {
	var d = new Date(); //Create an date object
	d.setTime(d.getTime() - (1000 * 60 * 60 * 24)); //Set the time to the past. 1000 milliseonds = 1 second
	var expires = "expires=" + d.toGMTString(); //Compose the expirartion date
	window.document.cookie = cname + "=" + "; " + expires;//Set the cookie with name and the expiration date
};

const en_untranslated = [
	// should never be seen
	"... crossover",
	"dynamic kHz",
	// just numbers
	"16:9",
	"2.4:1",
	// most languages are the same
	"40 Hz",
	"50 Hz",
	"60 Hz",
	"70 Hz",
	"80 Hz",
	"90 Hz",
	"100 Hz",
	"110 Hz",
	"120 Hz",
	"130 Hz",
	"140 Hz",
	"150 Hz",
	"160 Hz",
	"170 Hz",
	"180 Hz",
	"190 Hz",
	"200 Hz",
	//
	"DNS",
	"DTS Virtual:X",
	"HDMI",
	"HDMI 1",
	"HDMI 2",
	"HDMI 3",
	"HDMI 4",
	"HDMI 5",
	"HDMI 6",
	"HDMI 7",
	"LFE",
	"RS-232/IP",
	//
	"%1 cm",
	"%1 dB",
	"0.0 dB",
	"-35.0 dB",
	"96 kHz",
	"192 kHz",
	"250 ms",
	"dB",
	"Hz",
	"ms",
	"0 ms",
	//
	"<>"
];

const en_lookup = {
	"audio_2ch": "2-channel",
	"audio_5ch1": "5.1 Surround Sound",
	"audio_7ch1": "7.1 Surround Sound",
	"ex_ctrl_arc": "Activates exclusive control for Anthem Room Correction.",
	"ex_ctrl_firmware": "Activates exclusive control for the firmware.",
	"ex_ctrl_scratch": "Activates exclusive control for the scratchpad memory.",
	"front_or_rear_ir": "Activates front or rear IR or deactivates both.",
	"log_to_console": "Activates logging diagnostics to the console.",
	"anthem_room_correction": "Activates/deactivates Anthem Room Correction (ARC).",
	"hdmi_audio_to_tv": "Activates/deactivates HDMI Audio output to TV when CEC is disabled.",
	"general_con_standby": "Activates/deactivates connected standby. When activated, the unit will consume more power to keep the networking awake and ready to receive commands. This setting is required if controlling from a standby via IP or RS-232.",
	"favor_current_streamer": "Activates/deactivates favouring of the current streaming input.",
	"front_ir": "Activates/deactivates front IR.",
	"mainz_power": "Activates/deactivates main zone power.",
	"mute_mainz_out": "Activates/deactivates muting the main outputs when using headphones.",
	"mainz_mute": "Activates/deactivates muting the main zone power.",
	"zone2_mute": "Activates/deactivates second zone muting.",
	"zone2_power": "Activates/deactivates second zone power.",
	"rear_ir": "Activates/deactivates rear IR.",
	"auto_updates_help": "Activates/deactivates automatic updates. Normally activated, you will automatically receive official updates that include new features and bug fixes.",
	"beta_updates": "Activates/deactivates beta updates. If activated, you will receive beta updates that include new features and bug fixes.",
	"pro_enable_back": "Activates/deactivates the back speakers.",
	"pro_enable_ctr": "Activates/deactivates the center speaker.",
	"pro_enable_frontwide": "Activates/deactivates the Front Wide speakers.",
	"pro_enable_ht1": "Activates/deactivates the Height 1 speakers.",
	"pro_enable_ht2": "Activates/deactivates the Height 2 speakers.",
	"pro_enable_ht3": "Activates/deactivates the Height 3 speakers.",
	"convert_analog": "Activates/deactivates the input's convert analog.",
	"mainz_default_streamer": "Activates/deactivates the main zone as the default streaming zone.",
	"pro_test_noise": "Activates/deactivates the noise generator. The subwoofer output will not function unless it has been indicated that a subwoofer is present. One profile will permit calibration noise to be generated.",
	"pro_enable_subs": "Activates/deactivates the subwoofer. The subwoofer output will not function unless it has been indicated that a subwoofer is present. If using a subwoofer this should be enabled prior to running Anthem Room Correction.",
	"pro_enable_surround": "Activates/deactivates the surround speakers.",
	"zone2_default_streamer": "Activates/deactivates the second zone as the default streaming zone.",
	"calibration_level": "Adjust Dolby Offset / Calibration Level.",
	"main_zone_lfe": "Adjusts the LFE channel level.",
	"main_zone_backs": "Adjusts the surround back channels level.",
	"main_zone_balance": "Adjusts the balance between left and right channels.",
	"main_zone_bass": "Adjusts the bass levels of the system.",
	"main_zone_center": "Adjusts the center channel level.",
	"subwoofer_dist": "Adjust the distance from the primary listener position to the subwoofer(s).",
	"main_zone_front": "Adjusts the front channels level.",
	"main_zone_front_wide": "Adjusts the front wide channels level.",
	"main_zone_height_1": "Adjusts the height 1 channels level.",
	"main_zone_height_2": "Adjusts the height 2 channels level.",
	"main_zone_height_3": "Adjusts the height 3 channels level.",
	"back_left_level": "Adjusts the level of the back left speaker.",
	"back_right_level": "Adjusts the level of the back right speaker.",
	"center_level": "Adjusts the level of the center speaker.",
	"front_left_level": "Adjusts the level of the front left speaker.",
	"front_right_level": "Adjusts the level of the front right speaker.",
	"front_wide_left_level": "Adjusts the level of the front wide left speaker.",
	"front_wide_right_level": "Adjusts the level of the front wide right speaker.",
	"input_trim": "Adjusts the level of the input trim.",
	"heights_1_left_level": "Adjusts the level of the height 1 left speaker.",
	"heights_2_left_level": "Adjusts the level of the height 2 left speaker.",
	"heights_3_left_level": "Adjusts the level of the height 3 left speaker.",
	"surround_left_level": "Adjusts the level of the left surround speaker.",
	"heights_1_right_level": "Adjusts the level of the height 1 right speaker.",
	"heights_2_right_level": "Adjusts the level of the height 2 right speaker.",
	"heights_3_right_level": "Adjusts the level of the height 3 right speaker.",
	"surround_right_level": "Adjusts the level of the right surround speaker.",
	"subwoofer_level": "Adjusts the level of the subwoofer relative to the mains. This value will be set by Anthem Room Correction. Unlike the crossover setting this value can be freely adjusted after running ARC without negative impact on the integration with the left and right channels.",
	"main_zone_max_volume": "Adjusts the maximum volume level for the main zone.",
	"zone_2_max_volume": "Adjusts the maximum volume level for the second zone.",
	"mainz_power_on_volume": "Adjusts the power-on volume level for the main zone. Set to the minimum to power on at the Last Used volume.",
	"zone2_power_on_volume": "Adjusts the power-on volume level for second zone. Set to the minimum to power on at the Last Used volume.",
	"rumble_filter": "Adjusts the rumble filter.",
	"mainz_subwoofer": "Adjusts the subwoofer level.",
	"subwoofer_phase": "Adjusts the subwoofer phase.",
	"subwoofer_phase_freqy": "Adjusts the subwoofer phase frequency.",
	"subwoofer_polarity": "Adjusts the subwoofer polarity.",
	"mainz_surround": "Adjusts the surround channels level.",
	"lip_sync": "Adjusts the timing of the lip sync.",
	"mainz_treble": "Adjusts the treble levels of the system.",
	"mainz_volume": "Adjusts the volume for the main zone.",
	"zone2_volume": "Adjusts the second zone volume.",
	"tcp_port": "Allows you to change the TCP Port number. Only values between 1025 and 49150 are accepted.",
	"input_name": "Allows you to change the name of the input.",
	"profile_name": "Allows you to change the name of the speaker profile.",
	"device_name_input": "Allows you to change the name of the unit. This will allow you to identify units in ARC.",
	"amp_matrix_back": "Amp matrixing is where the user assigns amplifier channels to their desired preamplifier outputs. Selects amp matrixing for back speakers.",
	"amp_matrix_front": "Amp matrixing is where the user assigns amplifier channels to their desired preamplifier outputs. Selects amp matrixing for front speakers.",
	"amp_matrix_ht1": "Amp matrixing is where the user assigns amplifier channels to their desired preamplifier outputs. Selects amp matrixing for height 1 speakers.",
	"amp_matrix_ht2": "Amp matrixing is where the user assigns amplifier channels to their desired preamplifier outputs. Selects amp matrixing for height 2 speakers.",
	"amp_matrix_surround": "Amp matrixing is where the user assigns amplifier channels to their desired preamplifier outputs. Selects amp matrixing for surround speakers.",
	"check_fw_updated": "Check for updated firmware via the connected network.",
	"load_installer_sets": "Click OK to replace current settings with settings previously saved for the installer.",
	"load_user_sets": "Click OK to replace current settings with settings previously saved for the user.",
	"reset_on_the_flys": "Click OK to reset all of the On-the-Fly adjustments to their default setting. This includes Main Zone levels, brightness preference and Network settings.",
	"reset_all_settings": "Click OK to reset all settings to the original state. This will not revert the firmware to the factory version. If you want to revert the unit back to a full factory image you will need to use the Factory Image Reset button located on the rear panel of the unit.",
	"disp_info_page": "Click to display the Information page - hardware and software versions, communication addresses and input settings.",
	"ip_dns": "Configure the DNS address if Manual is selected. Changing this will not take effect until the 'Apply' button is clicked.",
	"ip_gateway": "Configure the Gateway address if Manual is selected. Changing this will not take effect until the 'Apply' button is clicked.",
	"ip_address": "Configure the IP address if Manual is selected. Changing this will not take effect until the 'Apply' button is clicked.",
	"ip_subnet": "Configure the Subnet mask if Manual is selected. Changing this will not take effect until the 'Apply' button is clicked.",
	"ip_manual": "Select whether to scan for public Wi-Fi networks or enter a hidden one.",
	"ip_finds_networks": "Scan for public Wi-Fi networks.",
	"ip_ssid": "Select the SSID (Service Set Identifier) that is the name of your wireless network.",
	"ip_hidden": "Enter the SSID that is the name of your wireless network.",
	"ip_encrypt": "Select the type of encryption to use. None and WEP have been deprecated.",
	"ip_password": "Enter the password: empty for None, 10 or 26 hex characters for WEP, 8 to 63 characters for WPA (default).",
	"cec_turn_off": "Consumer Electronic Control allows connected devices to turn power Off.",
	"cec_turn_on": "Consumer Electronic Control allows connected devices to turn power On.",
	"disp_custom_msg": "Display one row of a custom message on the LCD.",
	"disp_wifi_mac": "Displays the Wi-Fi MAC address of the module.",
	"disp_activ_audio": "Displays the active audio input format.",
	"disp_activ_video": "Displays the active video input format.",
	"disp_bit_depth": "Displays the bit depth of the active audio input.",
	"disp_bit_rate": "Displays the bit rate of the active audio input.",
	"disp_dev_name": "Displays the configured name of the unit.",
	"disp_serial_num": "Displays the serial number of the unit.",
	"disp_dsp_ver": "Displays the current DSP version.",
	"disp_lcd_ver": "Displays the current LCDC version.",
	"disp_mcu_ver": "Displays the current MCU version.",
	"disp_webui_ver": "Displays the version of the user interface software.",
	"disp_firmware_ver": "Displays the current firmware version.",
	"disp_hardware_ver": "Displays the current hardware version.",
	"disp_arc_date": "Displays the date of the last ARC upload.",
	"disp_ethernet_mac": "Displays the Ethernet MAC address of the module.",
	"disp_module_hw_ver": "Displays the hardware version of the module.",
	"disp_activ_horiz_res": "Displays the horizontal resolution of the active video input.",
	"disp_model": "Displays the model of the unit.",
	"disp_arc_name": "Displays the name associated with ARC.",
	"disp_activ_audio_format": "Displays the name of the active audio input format.",
	"disp_activ_audio_rate": "Displays the name of the active audio input rate.",
	"disp_net_status": "Displays the network status of the module.",
	"disp_num_audios": "Displays the number of audio input channels.",
	"disp_region": "Displays the region.",
	"disp_module_rver": "Displays the release version of the module software.",
	"disp_sample_rate": "Displays the sampling rate of the active audio input.",
	"disp_sw_build_date": "Displays the software build date.",
	"disp_activ_vert_res": "Displays the vertical resolution of the active video input.",
	"exports_sets_backup": "Export settings to a file will create a backup that you can save on your PC allowing you to copy settings across machines for faster install, or in the event of service.",
	"reset_factory_sets": "Click Load to reset all settings to the original state. This will not revert the firmware to the factory version. To reset Network Settings, please use the Front Panel Display Menu System to navigate to the Reset Network Settings in the Store / Load / Update section.",
	"super_sub_front_help": "Full frequency range stereo is fed to the front left and right channels and bass is sent to the subwoofer. In this case the low frequency information is effectively doubled which may result in unpredictable and colored low frequency reproduction. This setting is not recommended for accurate sonic reproduction.",
	"import_settings": "Import allows you to upload the settings that have previously been saved using the export function.",
	"install_sets_help": "Installer settings is a second available save configuration. You can store/load these locally on the unit and do not require an external file.",
	"lost_conn": "Dave Lost connection with the unit. This is expected during a firmware update. Please wait for the screen to refresh.",
	"lost_conn2": "Otherwise, make sure the unit is ON or, if the unit is in standby, ensure that 'Connected Standby' is enabled under General.",
	"mute_digital_out": "Mute the digital input that is connected to a recording device to prevent feedback from its output to its input.",
	"mute_line_out": "Mute the line input that is connected to a recording device to prevent feedback from its output to its input.",
	"note_lose_conn": "Note that you will temporarily lose connection with the unit while the new IP address is assigned. The web server will then attempt to connect to the new IP address after a delay. If the IP address, gateway, or subnet is entered incorrectly you can go back to DHCP mode (the address will be assigned by your router) by pressing and holding for 5 seconds the DHCP RESET button located at the back of the unit.",
	"import_settings_go": "Press OK to load settings from the file.",
	"rcv_firmware_done": "Receive updated firmware - complete",
	"rcv_firmware_start": "Receive updated firmware - starting",
	"reset_adjustments_help": "Reset all of the On-the-Fly adjustments to their default setting. This includes Main Zone levels, brightness preference and Network settings.",
	"back_left_distance": "Adjust the distance from the primary listener to the back left speaker.",
	"back_right_distance": "Adjust the distance from the primary listener to the back right speaker.",
	"center_distance": "Adjust the distance from the primary listener to the center speaker.",
	"front_left_distance": "Adjust the distance from the primary listener position to the front left speaker.",
	"front_right_distance": "Adjust the distance from the primary listener position to the front right speaker.",
	"frontwide_left_dist": "Adjust the distance from the primary listener to the front wide left speaker.",
	"frontwide_right_dist": "Adjust the distance from the primary listener to the front wide right speaker.",
	"ht1_left_distance": "Adjust the distance from the primary listener to the height 1 left speaker.",
	"ht2_left_distance": "Adjust the distance from the primary listener to the height 2 left speaker.",
	"ht3_left_distance": "Adjust the distance from the primary listener to the height 3 left speaker.",
	"surround_left_dist": "Adjust the distance from the primary listener to the left surround speaker.",
	"ht1_right_distance": "Adjust the distance from the primary listener to the height 1 right speaker.",
	"ht2_right_distance": "Adjust the distance from the primary listener to the height 2 right speaker.",
	"ht3_right_distance": "Adjust the distance from the primary listener to the height 3 right speaker.",
	"surround_right_dist": "Adjust the distance from the primary listener to the right surround speaker.",
	"download_fw_h": "Press OK to download the updated firmware.",
	"download_done_h": "Transfer complete. Press OK to install the new firmware.",
	"audio_input": "Select the input used for audio.",
	"video_input": "Select the input used for video.",
	"onscreen_info_disp": "Select the on-screen information display format.",
	"onscreen_info_zone": "Select the on-screen zone to display.",
	"height_posn": "Select the type and position of the speakers attached to the Height pre-out.",
	"height1_posn": "Select the type and position of the speakers attached to the Height 1 pre-out.",
	"height2_posn": "Select the type and position of the speakers attached to the Height 2 pre-out.",
	"height3_posn": "Select the type and position of the speakers attached to the Height 3 pre-out.",
	"dolby_audio_post": "Select the type of Dolby Audio post-processing.",
	"mute_level": "Selects mute volume level from complete silence to a slight reduction in volume.",
	"no_signal_off_help": "Selects the amount of time that a zone will wait after not receiving an audio signal or command to enter standby mode.",
	"tx_status": "All commands, status changes and control information are reported through the selected connection.",
	"audio_proc_mode": "Selects the audio processing mode.",
	"front_panel_brightness": "Selects the front panel brightness.",
	"mainz_curr_input": "Selects the current input for the main zone.",
	"zone2_curr_input": "Selects the current input for the second zone.",
	"frontp_disp_info": "Selects the amount of information displayed on the front panel.",
	"dist_units": "Selects the distance unit to use for measurements of speaker distances.",
	"preset_for_mono_src": "Selects the input's mode preset for mono source.",
	"preset_for_multich_src": "Selects the input's mode preset for multi-channel source.",
	"preset_for_stereo_src": "Selects the input's mode preset for stereo source.",
	"use_profile": "Selects the input's speaker profile.",
	"gen_language": "Selects the language the menu appears in.",
	"master_vol_scale": "Selects the scale the volume is displayed in.",
	"subwoofer_num_sel": "Select the number of subwoofers in the system.",
	"mainz_power_on_input": "Selects the power-on input for the main zone.",
	"zone2_power_on_input": "Selects the power-on input for the second zone.",
	"standby_hdmi_bypass": "Selects the input that will pass through the unit while it is off directly to the display.",
	"trigger_control": "Selects the trigger control.",
	"trigger_delay": "Selects the trigger delay duration.",
	"trigger_input": "Selects the trigger for the input.",
	"trigger_power": "Selects the trigger power.",
	"wake_up_brightness": "Selects the brightness of the front panel after a button has been pressed, remote used or command via IP or RS-232.",
	"send_cmd": "Send a custom-entered command to the device.",
	"send_ir_cmd": "Send a simulated IR commmand to the device.",
	"cross_help_back": "Sets the crossover point between the subwoofer channel and the back speakers. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"cross_help_center": "Sets the crossover point between the subwoofer channel and the center speaker. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"cross_help_front": "Sets the crossover point between the subwoofer channel and the front speakers. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"cross_help_frwide": "Sets the crossover point between the subwoofer channel and the front wide speakers. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"cross_help_ht1": "Sets the crossover point between the subwoofer channel and the height 1 speakers. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"cross_help_ht2": "Sets the crossover point between the subwoofer channel and the height 2 speakers. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"cross_help_ht3": "Sets the crossover point between the subwoofer channel and the height 3 speakers. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"cross_help_surround": "Sets the crossover point between the subwoofer channel and the surround speakers. Once Anthem Room Correction is run it will select this value automatically. If a different crossover than the default selected by ARC you must modify the crossover setting in ARC and then upload it. This crossover should only be adjusted if ARC has not or will not be run.",
	"subwoofer_lpf_for_lfe": "Sets the Low Pass Filter (LPF) frequency for Low Frequency Extension (LFE).",
	"model_mismatch": "Settings file model type does not match target.",
	"sets_saved_installer": "Settings have been saved for the Installer.",
	"sets_saved_user": "Settings have been saved for the User.",
	"show_custom_msg": "Show or hide the custom message on the display.",
	"no_websockets": "The browser does not support WebSockets.",
	"avail_fw_ver": "This version of the firmware is available for updating.",
	"toggle_auto_manual": "Toggle the unit between Auto (DHCP) and Manual network assignments. Changed settings will not take effect until the ‘Apply' button is clicked.",
	"undef_file_format": "Undefined settings file format.",
	"update_rcvd_fw": "Update to the received version of the firmware.",
	"user_settings_help": "User settings is the first available save configuration. You can store/load these locally on the unit and do not require an external file.",
	"warn_no_devname": "The device name cannot be empty.",
	"warn_no_iname": "The input name cannot be empty.",
	"warn_bad_port": "The TCP port must be between %1 and %2.",
	"warn_bad_addr": "Invalid address entry or entries.",
	"warn_bad_wifi": "Missing SSID selection or bad password.",
	"warn_no_profname": "The profile name cannot be empty.",
	"fw_install_cnt": "Firmware install %1 of %2 expected seconds.",
	"collapse_palt_h": "collapse panel for %1",
	"delete_palt_h": "delete panel for %1",
	"expand_palt_h": "expand panel for %1",
	/*
	*/
	"end": "end"
}

function is_untranslated(textstr) {
	var ix = 0;
	var arlen = en_untranslated.length;
	while (ix < arlen) {
		if (textstr === en_untranslated[ix]) {
			return true;
		}
		ix++;
	}
	return false;
}

















var LOG_NON_ERROR_MESSAGES = false;
if (DEMO_MODE) {
	LOG_NON_ERROR_MESSAGES = true;
}

function log(msg) {
	if (LOG_NON_ERROR_MESSAGES)
		console.log(msg);
}
function logE(msg) {
	console.log("%c ERROR: " + msg, "background: red; color: white; display: block;");
}
function logFatal(error_msg, caption, emsg2) {
	logE(error_msg);
	if (caption == undefined) {
		caption = TR("Error");
	}
	if (emsg2 == undefined) {
		show_modal(caption, error_msg);
	} else {
		show_modal(caption, error_msg, emsg2);
	}
}

var changes_in_progress = false;

function notification_error(msg) {
	changes_in_progress = false;
	notification(msg, "alert-danger");
}
function notification_changes_complete(msg) {
	if (changes_in_progress) {
		notification(msg);
		changes_in_progress = false;
	}
}
function notification_changes_start(msg) {
	if (!changes_in_progress) {
		msg = typeof msg !== 'undefined' ? msg : TR("Sending changes");
		changes_in_progress = true;
		notification(msg, "alert-info", -1);
	}
}

var notification_timeout;
function notification(message, alert_class, NOTIFICATION_TIMEOUT_MS) {

	alert_class = typeof alert_class !== 'undefined' ? alert_class : "alert-info";
	NOTIFICATION_TIMEOUT_MS = typeof NOTIFICATION_TIMEOUT_MS !== 'undefined' ? NOTIFICATION_TIMEOUT_MS : 2500;

	clearTimeout(notification_timeout);
	$get("#notification-msg").text("");
	$get("#notification").fadeIn();
	$get("#notification").removeClass("alert-info alert-danger");

	if (parseInt(socket.readyState) !== 1) {
		message = TR("Error: Unit is not responding.");
		alert_class = "alert-danger";
	}
	$get("#notification").addClass(alert_class);
	$get("#notification-msg").text(message);


	if (NOTIFICATION_TIMEOUT_MS !== -1) {
		notification_timeout = setTimeout(close_notification, NOTIFICATION_TIMEOUT_MS);
		$get("#notification-loader").hide();
		$get("#notification-msg").css("padding-left", "10px");
	} else {
		$get("#notification-loader").show();
		$get("#notification-msg").css("padding-left", "50px");
	}
	function close_notification() {
		$get("#notification").fadeOut();
	}
}


$get("#notification").on("click", function () {
	$get("#notification").fadeOut();
});





var translator = {}

var current_language = LANGUAGE.english;

translator.init = function () {
	current_language = cookies.get_language();

	if (current_language === LANGUAGE.english) {
		translator.load_data_content();
		return;
	}

	translator.load_language(false);
}

translator.load_data_content = function () {
	if (DEMO_MODE) {
		var acount = 0;
		var dcount = 0;
		var lcount = 0;
		var tcount = 0;
		$get("a, label").each(function () {
			acount++;
			var popover_text = $get(this).attr("data-content");
			if (popover_text !== undefined) {
				dcount++;
				var translation = TL(popover_text);
				if (translation[0] == "[") {
					translation = TR(popover_text);
					if (translation[0] == "[") {
						tcount++;
					}
				} else {
					lcount++;
				}
				$get(this).attr("data-content", translation);
			}
		});
		log("load_data_content a:" + acount + ", data-content:" + dcount +
			", lookup:" + lcount + ", not:" + tcount);
	} else {
		$get("a, label").each(function () {
			var popover_text = $get(this).attr("data-content");
			if (popover_text !== undefined) {
				var translation = TL(popover_text);
				if (translation[0] == "[") {
					translation = TR(popover_text);
				}
				$get(this).attr("data-content", translation);
			}
		});
	}
}

translator.load_language = function (gen_js) {
	var generate_json = gen_js;
	let translationMap = new Map();

	$get("h5, h6, p, label, small, button, a[data-toggle=popover], .btn-group div").each(function () {
		var text = $get(this).text().trim();
		if (text !== "" && $get(this).children().length === 0) {
			var translation = TR(text);
			$get(this).text(translation);
			if (generate_json) {
				translationMap.set(text, translation);
			}
		}
	});

	translator.load_data_content();
	if (generate_json) {
		// Looking for raw strings
		$get("a").each(function () {
			var popover_text = $get(this).attr("data-content");
			if (popover_text !== undefined) {
				var translation = TL(popover_text);
				if (translation[0] == "[") {
					translation = TR(popover_text);
					translationMap.set(popover_text, translation);
				}
			}
		});
	}

	$get(".range_value").each(function () {
		var text = $get(this).text().trim();
		var translation = TR(text);
		if (translation[0] == "[") {
			translation = translate_text_with_number(text);
		}
		if (generate_json) {
			translationMap.set(text, translation);
		}
		$get(this).text(translation);
	});

	$get("input[type=text]").each(function () {
		var placeholder = $get(this).attr("placeholder");
		if (placeholder !== undefined) {
			var translation = TR(placeholder);
			$get(this).attr("placeholder", translation);
			if (generate_json) {
				translationMap.set(placeholder, translation);
			}
		}
	});

	$get("option").each(function () {
		var text = $get(this).text().trim();
		if (text !== "") {
			var translation
			translation = TR(text);
			if (translation[0] == "[") {
				if (contains_digit(text)) {
					translation = translate_text_with_number(text);
				}
			} else if (generate_json) {
				translationMap.set(text, translation);
			}
			/**/
			$get(this).text(translation);
		}
		function contains_digit(text) {
			var tokens = text.split(" ");
			var i;
			for (i = 0; i < tokens.length; i++) {
				if (tokens[i].is_number())
					return true;
			}
			return false;
		}
	});

	function translate_text_with_number(text) {
		var result = ""
		var tokens = text.split(" ");
		var i;
		for (i = 0; i < tokens.length; i++) {
			var tok = tokens[i];
			if (tok.is_number()) {
				result = result + tok + " ";
			} else {
				var translation = TR(tok);
				result = result + translation + " ";
				if (generate_json) {
					translationMap.set(tok, translation);
				}
			}
		}
		return result;
	}

	if (generate_json) {

		// Save html strings to file in Downloads
		// https://www.quora.com/How-do-I-make-a-JSON-file-with-JavaScript
		var saveData = (function () {
			var a = document.createElement("a");
			document.body.appendChild(a);
			a.style = "display: none";
			return function (data, fileName) {
				var blob = new Blob([data], { type: "text/plain", endings: "native" }),
					url = window.URL.createObjectURL(blob);
				a.href = url;
				a.download = fileName;
				a.click();
				window.URL.revokeObjectURL(url);
			};
		}());

		// For keys, we don't need an equals case, because identical keys overwrite
		const sortStringKeys = (a, b) => a[0] > b[0] ? 1 : -1;

		let sortedMap = new Map([...translationMap].sort(sortStringKeys));
		var jason = "{\n";
		sortedMap.forEach(append_to_json);
		jason = jason + '"":""\n}\n';
		var fileName = "web_html_en.json";
		saveData(jason, fileName);

		var json = "{";
		var mapSize = sortedMap.size;
		var counter = 0;
		sortedMap.forEach(append_key_value_json);

		json += "}";
		log(json);
	}

	function append_to_json(value, key) {
		jason = jason + '"' + key + '":"' + value + '",\n';
	}
	function append_key_value_json(value, key) {
		counter++;
		json = json + '"' + key + '":"' + value + '"';
		if (mapSize !== counter)
			json = json + ",";
	}
}

// format
// ex TR("text text")
// ex TR("text text %1", [<arg1>])
// ex TR("text text %1 text %2", [<arg1>, <arg2>])

function TR(key, args) {
	const no_translation = { "...": "..." };
	args = typeof args !== 'undefined' ? args : [];

	if (current_language === LANGUAGE.english) {
		return args.length === 0 ? key : inject_arguments(args, key);
	}
	else {
		var dictionary = no_translation;
		var lang = "[en]";
		if (current_language === LANGUAGE.chinese) {
			dictionary = zh_translation;
			lang = "[zh]";
		} else if (current_language === LANGUAGE.german) {
			dictionary = de_translation;
			lang = "[de]";
		} else if (current_language === LANGUAGE.spanish) {
			dictionary = es_translation;
			lang = "[es]";
		} else if (current_language === LANGUAGE.french) {
			dictionary = fr_translation;
			lang = "[fr]";
		} else if (current_language === LANGUAGE.italian) {
			dictionary = it_translation;
			lang = "[it]";
		} else {
			logE("Language not supported");
			return;
		}

		if (key.is_number()) {
			return key;
		}
		var translated_text = dictionary[key];
		if (translated_text === undefined) {
			if (is_untranslated(key)) {
				if (args.length === 0) {
					return key;
				} else {
					return inject_arguments(args, key);
				}
			} else {
				logE("could not find translation for key: " + key);
				return lang + key;
			}
		} else if (args.length === 0) {
			return translated_text;
		} else {
			return inject_arguments(args, translated_text);
		}
	}

	function inject_arguments(args, translated_text) {
		var i;
		for (i = 0; i < args.length; i++) {
			var arg = args[i];
			translated_text = translated_text.replace("%" + (i + 1), arg);
		}
		return translated_text;
	}
}

//Translate language string
function TL(key, args) {
	args = typeof args !== 'undefined' ? args : [];

	var dictionary;
	var lang;
	if (current_language === LANGUAGE.chinese) {
		dictionary = zh_lookup;
		lang = "[zh]";
	} else if (current_language === LANGUAGE.german) {
		dictionary = de_lookup;
		lang = "[de]";
	} else if (current_language === LANGUAGE.spanish) {
		dictionary = es_lookup;
		lang = "[es]";
	} else if (current_language === LANGUAGE.french) {
		dictionary = fr_lookup;
		lang = "[fr]";
	} else if (current_language === LANGUAGE.italian) {
		dictionary = it_lookup;
		lang = "[it]";
	} else {
		// Assuming English
		dictionary = en_lookup;
		lang = "[en]";
	}

	var translated_text = dictionary[key];
	if (translated_text === undefined) {
		translated_text = en_lookup[key];
		if (translated_text === undefined) {
			logE("could not find lookup for key: " + key);
			if (args.length > 0) {
				return lang + "[" + key + "]" + args[0];
			} else {
				return lang + "[" + key + "]";
			}
		}
	}
	if (args.length === 0) {
		return translated_text;
	} else {
		return inject_arguments(args, translated_text);
	}

	function inject_arguments(args, formatext) {
		var i;
		for (i = 0; i < args.length; i++) {
			var arg = args[i];
			formatext = formatext.replace("%" + (i + 1), arg);
		}
		return formatext;
	}
}


var info_page = {};

info_page.data = {
	arc_upload_date: "NA",
	arc_name: "NA"
}

info_page.video_input_options = function () {
	var items = [TR("No Signal"), TR("Other"), "1080p60", "1080p50",
		"1080p24", "1080i60", "1080i50", "720p60", "720p50", "576p50",
		"576i50", "480p60", "480i60", "3D", "4k60", "4k50", "4k24",
	TR("Unexpected Value")];
	return items;
}

info_page.audio_channels_options = function () {
	var items = [TR("No Signal"), TR("Other"), TR("Mono"),
	TL("audio_2ch"), TL("audio_5ch1"), TL("audio_7ch1"), "Atmos", "DTS:X",
	TR("Unexpected Value")];
	return items;
}

info_page.audio_format_options = function () {
	var items = [TR("No Signal"), TR("Analog"), "PCM", "Dolby",
		"DSD", "DTS", "Atmos", "DTS:X", TR("Unexpected Value")];
	return items;
}

info_page.bit_depth_options = function () {
	var items = ["16-bit", "24-bit", "32-bit", TR("Unexpected Value")];
	return items;
}

info_page.load_page = function () {
	$get("#info_page").fadeIn();

	if (typeof ui_version != 'undefined') {
		$get("#ui_version_value").val(ui_version);
	}

	if (DEMO_MODE) {
		command_handler.handle_incoming_command("Z1VIR2");
		command_handler.handle_incoming_command("Z1IRH1920");
		command_handler.handle_incoming_command("Z1IRV1080");
		command_handler.handle_incoming_command("Z1AIC4");
		command_handler.handle_incoming_command("Z1AIF3");
		command_handler.handle_incoming_command("Z1BRT320");
		command_handler.handle_incoming_command("Z1SRT44");
		command_handler.handle_incoming_command("Z1BDP0");
		command_handler.handle_incoming_command("Z1AINMonstrous Audio");
		command_handler.handle_incoming_command("Z1AIR44/16");
		command_handler.handle_incoming_command("Z1ARCNAM"); // not done
		command_handler.handle_incoming_command("Z1ARCUPL"); // not done
	} else {
		send_query_commands([COMMAND.Z1VIR, COMMAND.Z1IRH, COMMAND.Z1IRV,
		COMMAND.Z1AIC, COMMAND.Z1AIF, COMMAND.Z1BRT, COMMAND.Z1SRT,
		COMMAND.Z1BDP, COMMAND.Z1AIN, COMMAND.Z1AIR, COMMAND.GCDN,
		COMMAND.Z1ARCNAM, COMMAND.Z1ARCUPL]);
	}
}

info_page.unload_page = function () {
	$get("#info_page").hide();
}

// Update UI - System Information
info_page.update_UI_model_name = function (name) {
	$get("#model_name_value").val(name);
	$get("#device_img").attr("src", device.img_src);
}
info_page.update_UI_serial_number = function (serial) {
	$get("#serial_number_value").val(serial);
}
info_page.update_UI_module_version = function (value) {
	$get("#mrx_module_version_value").val(value);
}
info_page.update_UI_firmware_version = function (firmware) {
	$get("#firmware_value").val(firmware);
}

info_page.update_UI_dsp_version = function (value) {
	$get("#dsp_version_value").val(value);
}
info_page.update_UI_lcdc_version = function (value) {
	$get("#lcdc_version_value").val(value);
}
info_page.update_UI_software_build_date = function (value) {
	// Expecting data like Nov 6 2020 16H05M05
	var timindex = value.search(/\d\dH\d\dM\d\d/i);
	if (timindex >= 0) {
		var curlang = cookies.getCookie(cookies.LANGUAGE_KEY);
		var timesep = ":";
		if (curlang == "it") {
			timesep = ".";
		}
		value = value.substring(0, timindex + 2) + timesep +
			value.substring(timindex + 3, timindex + 5) + timesep +
			value.substring(timindex + 6);
	}
	$get("#software_build_date_value").val(value);
}
info_page.update_UI_hardware_version = function (value) {
	$get("#hardware_version_value").val(value);
}
info_page.update_UI_region = function (value) {
	$get("#region_value").val(value);
}
info_page.update_UI_device_name = function (name) {
	$get("#info_device_name").val(name);
}

info_page.update_UI_arc_upload_date = function (value) {
	info_page.data.arc_upload_date = value;
	var text = value;
	if (text == "") {
		text = "NA";
	}
	$get("#arc_uploaded_date_value").val(text);
}
info_page.update_UI_arc_name = function (value) {
	info_page.data.arc_name = value;
	var text = value;
	if (text == "") {
		text = "NA";
	}
	$get("#arc_named_value").val(text);
}

// Update UI - Networking Module
info_page.update_UI_module_hardware_version = function (value) {
	$get("#module_hardware_version_value").val(value);
}
info_page.update_UI_wifi_mac_address = function (value) {
	$get("#wifi_mac_address_value").val(value);
}
info_page.update_UI_ethernet_mac_address = function (value) {
	$get("#ethernet_mac_address_value").val(value);
}
info_page.update_UI_network_status = function (value) {
	$get("#network_status_value").val(value);
}

// Update UI - System Status
info_page.update_UI_active_video_input = function (value) {
	if (value >= info_page.video_input_options().length) {
		value = info_page.video_input_options().length - 1
	}
	$get("#video_format_value").val(info_page.video_input_options()[value]);
}
info_page.update_UI_active_horizontal_video_resolution = function (value) {
	$get("#horizontal_resolution_value").val(value);
}
info_page.update_UI_active_vertical_video_resolution = function (value) {
	$get("#vertical_resolution_value").val(value);
}
info_page.update_UI_audio_input_channels = function (value) {
	if (value >= info_page.audio_channels_options().length) {
		value = info_page.audio_channels_options().length - 1
	}
	$get("#audio_channels_value").val(info_page.audio_channels_options()[value]);
}
info_page.update_UI_audio_input_format = function (value) {
	if (value >= info_page.audio_format_options().length) {
		value = info_page.audio_format_options().length - 1
	}
	$get("#audio_format_value").val(info_page.audio_format_options()[value]);
}
info_page.update_UI_audio_input_bit_rate = function (value) {
	$get("#audio_bit_rate_value").val(value + " kbps");
}
info_page.update_UI_audio_input_sampling_rate = function (value) {
	$get("#audio_sampling_rate_value").val(value + " kHz");
}
info_page.update_UI_audio_input_bit_depth = function (value) {
	if (value >= info_page.bit_depth_options().length) {
		value = info_page.bit_depth_options().length - 1
	}
	$get("#audio_bit_depth_value").val(info_page.bit_depth_options()[value]);
}
info_page.update_UI_audio_input_name = function (value) {
	$get("#audio_input_name_value").val(value);
}
info_page.update_UI_audio_input_rate_name = function (value) {
	$get("#audio_rate_value").val(value);
}

var main_zone_page = {}

main_zone_page.data = {
	loaded: false,
	power: 0,
	volume_db: -35.0,
	volume_pc: 20,
	current_input: 0,
	current_profile: 0,
	last_volume_scale: VOLUME_SCALE_IN_DB,
	height_choice: 0,
	height_1_off: 0,
	height_2_off: 0,
	height_3_off: 0,
	subwoofer_selected: [false, false, false, false],
	front_wide_enabled: [false, false, false, false],
	center_enabled: [false, false, false, false],
	surrounds_enabled: [false, false, false, false],
	backs_enabled: [false, false, false, false],
	heights_1_enabled: [false, false, false, false],
	heights_2_enabled: [false, false, false, false],
	heights_3_enabled: [false, false, false, false]
}

main_zone_page.input_model = function (v) {
	var im = {
		value: v,
		text: TR("Input %1", [v])
	};
	return im;
};

main_zone_page.load_page = function () {
	main_zone_page.data.loaded = true;
	$get("#main_zone_page").fadeIn();

	turn_on_listeners();
	if (inputs_page.is_audio_streaming(main_zone_page.data.current_input)) {
		streaming_plate.load_plate();
		$get("#main_zone_last_container").addClass("mb-snnp");
	}

	function turn_on_listeners() {
		var zone_number = 1;
		$get("#main_zone_power_sw").on("click", function () {
			var aattr = $get("#main_zone_power_sw").attr("aria-checked");
			log("main_zone_power_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(get_zone_command(COMMAND.Z_POW, zone_number), value);
			if (aattr != "true") {
				$get("#main_zone_power_sw").attr("disabled", true);
				setTimeout(reenable_power, 5000);
			}
		});
		$get("#main_zone_mute_sw").on("click", function () {
			var aattr = $get("#main_zone_mute_sw").attr("aria-checked");
			log("main_zone_mute_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(get_zone_command(COMMAND.Z_MUT, zone_number), value);
		});
		$get("#main_zone_volume_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on main_zone_volume_range: " + value);
			if (VOLUME_SCALE_IN_DB) {
				send_and_query_command(get_zone_command(COMMAND.Z_VOL, zone_number), value);
			} else {
				send_and_query_command(get_zone_command(COMMAND.Z_PVOL, zone_number), value);
			}
		});
		$get("#main_current_input_select").on("change", function () {
			var value = this.value;
			log("on main_current_input_select: " + value);
			send_and_query_command(get_zone_command(COMMAND.Z_INP, zone_number), value);
		});
		$get("#main_audio_processing_select").on("change", function () {
			var value = this.value;
			log("on main_audio_processing_select: " + value);
			send_and_query_command(get_zone_command(COMMAND.Z_ALM, zone_number), value);
		});

		$get("#balance_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on balance_range: " + value);
			main_zone_page.update_UI_balance(value);
			send_and_query_command(get_zone_command(COMMAND.Z_BAL, zone_number), value);
		});
		$get("#treble_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on treble_range: " + value);
			main_zone_page.update_UI_treble(value);
			send_and_query_command(get_zone_command(COMMAND.Z_TON1, zone_number), value);
		});
		$get("#bass_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on bass_range: " + value);
			main_zone_page.update_UI_bass(value);
			send_and_query_command(get_zone_command(COMMAND.Z_TON0, zone_number), value);
		});
		$get("#front_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on front_range: " + value);
			main_zone_page.update_UI_front(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEV5, zone_number), value);
		});
		$get("#front_wide_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on front_wide_range: " + value);
			main_zone_page.update_UI_front_wide(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEV6, zone_number), value);
		});
		$get("#center_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on center_range: " + value);
			main_zone_page.update_UI_center(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEV7, zone_number), value);
		});
		$get("#surround_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on surround_range: " + value);
			main_zone_page.update_UI_surrounds(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEV8, zone_number), value);
		});
		$get("#back_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on back_range: " + value);
			main_zone_page.update_UI_backs(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEV9, zone_number), value);
		});
		$get("#subwoofer_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on subwoofer_range: " + value);
			main_zone_page.update_UI_subwoofer(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEV1, zone_number), value);
		});
		$get("#lfe_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on lfe_range: " + value);
			main_zone_page.update_UI_lfe(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEVD, zone_number), value);
		});
		$get("#height_1_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on height_1_range: " + value);
			main_zone_page.update_UI_height_1(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEVA, zone_number), value);
		});
		$get("#height_2_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on height_2_range: " + value);
			main_zone_page.update_UI_height_2(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEVB, zone_number), value);
		});
		$get("#height_3_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on height_3_range: " + value);
			main_zone_page.update_UI_height_3(value);
			send_and_query_command(get_zone_command(COMMAND.Z_LEVC, zone_number), value);
		});

		$get("#main_zone_page .switch_track").on("keydown", function (e) {
			return handle_switch_keydown($get(this), e.which);
		});
		$get("#main_zone_page .minus").on("click", function () {
			handle_range_minus_button_click($get(this));
		});
		$get("#main_zone_page .plus").on("click", function () {
			handle_range_plus_button_click($get(this));
		});
	}

	function reenable_power() {
		$get("#main_zone_power_sw").attr("disabled", false);
	}
}

main_zone_page.unload_page = function () {
	$get("#main_zone_page").hide();

	turn_off_listeners();
	if (inputs_page.is_audio_streaming(main_zone_page.data.current_input)) {
		streaming_plate.unload_plate();
		$get("#main_zone_last_container").removeClass("mb-snnp");
	}
	main_zone_page.data.loaded = false;

	function turn_off_listeners() {

		$get("#main_zone_power_sw").off("click");
		$get("#main_zone_mute_sw").off("click");
		$get("#main_zone_volume_range").off("change");
		$get("#main_current_input_select").off("change");
		$get("#main_audio_processing_select").off("change");

		$get("#balance_range").off("change");
		$get("#treble_range").off("change");
		$get("#bass_range").off("change");
		$get("#front_range").off("change");
		$get("#front_wide_range").off("change");
		$get("#center_range").off("change");
		$get("#surround_range").off("change");
		$get("#back_range").off("change");
		$get("#subwoofer_range").off("change");
		$get("#lfe_range").off("change");
		$get("#height_1_range").off("change");
		$get("#height_2_range").off("change");
		$get("#height_3_range").off("change");

		$get("#main_zone_page .switch_track").off("keydown");
		$get("#main_zone_page .minus").off("click");
		$get("#main_zone_page .plus").off("click");
	}
}

main_zone_page.enable_controls = function () {
	var mzdata = main_zone_page.data;
	const all_xable_ids = [
		"#main_zone_mute_sw", "#main_zone_volume_range",
		"#main_current_input_select",
		"#main_audio_processing_select",
		"#balance_range",
		"#treble_range", "#bass_range",
		"#front_range",
		"#lfe_range",
		"#main_zone_page .switch_track"
	];
	for (var idix = 0; idix < all_xable_ids.length; idix++) {
		$get(all_xable_ids[idix]).attr("disabled", !mzdata.power);
	}

	var classm = "#main_zone_page .minus";
	enable_class(classm, mzdata.power);
	var classp = "#main_zone_page .plus";
	enable_class(classp, mzdata.power);
	var classv = "#main_zone_page .range_value";
	enable_class(classv, mzdata.power);

	if (mzdata.current_profile != 0) {
		main_zone_page.xable_front_wide();
		main_zone_page.xable_center();
		main_zone_page.xable_surrounds();
		main_zone_page.xable_backs();
		main_zone_page.xable_heights_1();
		main_zone_page.xable_heights_2();
		main_zone_page.xable_heights_3();
		main_zone_page.xable_subwoofer();
	}
}

main_zone_page.enable_range = function (selector, which) {
	enable_class(selector + " .minus", which);
	$get(selector + " input").prop("disabled", !which);
	enable_class(selector + " .plus", which);
	enable_class(selector + " .range_value", which);
}

// Update UI
main_zone_page.update_UI_model_name = function (devmodel) {
	if (devmodel === MODEL.MRXSLM || devmodel === MODEL.MRX540 ||
		devmodel === MODEL.MRX740) {
		$get("#mzsub_label").text(TR("Subwoofer"));
	}
}

main_zone_page.update_UI_volume_scale = function () {
	var max_range = $get("#main_max_volume_range");
	var volume_range = $get("#main_zone_volume_range");
	var max_vol = Number(max_range.val());
	var mzdata = main_zone_page.data;
	if (VOLUME_SCALE_IN_DB) {
		volume_range.attr("min", -90);
		volume_range.attr("max", max_vol);
		volume_range.attr("step", 0.5);
		mzdata.volume_db = mzdata.volume_pc.percent_to_dB();
		main_zone_page.update_UI_db_volume(mzdata.volume_db);
	} else {
		volume_range.attr("min", 0);
		volume_range.attr("max", max_vol.dB_to_percent());
		volume_range.attr("step", 1);
		mzdata.volume_pc = mzdata.volume_db.dB_to_percent();
		main_zone_page.update_UI_pc_volume(mzdata.volume_pc);
	}
}
main_zone_page.update_UI_power = function (bvalue) {
	main_zone_page.data.power = bvalue;
	$get("#main_zone_power_sw").attr("aria-checked", bvalue);
	main_zone_page.enable_controls();
}
main_zone_page.update_UI_mute = function (bvalue) {
	$get("#main_zone_mute_sw").attr("aria-checked", bvalue);
}

main_zone_page.update_UI_db_volume = function (value) {
	var range = $get("#main_zone_volume_range");
	range.val(value);
	if (VOLUME_SCALE_IN_DB) {
		main_zone_page.data.volume_db = value;
		update_UI_range_text(range, value, "dB");
	}
}
main_zone_page.update_UI_pc_volume = function (value) {
	var range = $get("#main_zone_volume_range");
	range.val(value);
	if (!VOLUME_SCALE_IN_DB) {
		main_zone_page.data.volume_pc = value;
		update_UI_range_text(range, Number(value), "%", 0);
	}
}

main_zone_page.update_UI_max_volume = function (value) {
	var volume_range = $get("#main_zone_volume_range");
	var volume_range_value = parseFloat(volume_range.val());
	if (VOLUME_SCALE_IN_DB) {
		volume_range.attr("max", value);
		if (value < volume_range_value) {
			volume_range.val(value).change();
			main_zone_page.update_UI_db_volume(value);
		} else {
			main_zone_page.update_UI_db_volume(volume_range_value);
		}
	} else {
		volume_range.attr("max", value.dB_to_percent());
		var percent_value = value.dB_to_percent();
		if (percent_value < volume_range_value) {
			volume_range.val(percent_value).change();
			main_zone_page.update_UI_pc_volume(percent_value);
		} else {
			main_zone_page.update_UI_pc_volume(volume_range_value);
		}
	}
}
main_zone_page.update_UI_current_input = function (value) {
	var wass = inputs_page.is_audio_streaming(main_zone_page.data.current_input);
	main_zone_page.data.current_input = value;
	$get("#main_current_input_select").val(value);
	main_zone_page.get_speaker_profile();
	var iss = inputs_page.is_audio_streaming(main_zone_page.data.current_input);
	if (main_zone_page.data.loaded) {
		if (!wass && iss) {
			streaming_plate.load_plate();
			$get("#main_zone_last_container").addClass("mb-snnp");
		} else if (wass && !iss) {
			streaming_plate.unload_plate();
			$get("#main_zone_last_container").removeClass("mb-snnp");
		}
	}
	if (wass && !iss) {
		streamer.turnMonitorOff();
		streamer.unsubscribeFrom(streaming_page.data.pollsub_id, streamer.fixed.playscribed);
	}
}
main_zone_page.update_UI_audio_processing = function (value) {
	$get("#main_audio_processing_select").val(value);
}

main_zone_page.update_UI_balance = function (value) {
	var range = $get("#balance_range");
	range.val(value);
	var display_text = TR("Center"); // else == 0
	if (value < 0) {
		display_text = TR("%1 dB Left", [-value]);
	} else if (value > 0) {
		display_text = TR("%1 dB Right", [value]);
	}
	update_UI_range_formatted(range, display_text);
}
main_zone_page.update_UI_treble = function (value) {
	var range = $get("#treble_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_bass = function (value) {
	var range = $get("#bass_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_front = function (value) {
	var range = $get("#front_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_front_wide = function (value) {
	var range = $get("#front_wide_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_center = function (value) {
	var range = $get("#center_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_surrounds = function (value) {
	var range = $get("#surround_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_backs = function (value) {
	var range = $get("#back_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_subwoofer = function (value) {
	var range = $get("#subwoofer_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_lfe = function (value) {
	var range = $get("#lfe_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_height_1 = function (value) {
	var range = $get("#height_1_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_height_2 = function (value) {
	var range = $get("#height_2_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}
main_zone_page.update_UI_height_3 = function (value) {
	var range = $get("#height_3_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");
}

// Modify controls because an input was added or inserted
main_zone_page.add_input = function (input_num) {
	if (input_num < 1 || input_num > inputs_page.maximum_number_of_inputs) {
		logE("cannot add input: " + input_num);
		return;
	}

	var comparecur = "#main_current_input_select option[value='" + input_num + "']";
	if ($get(comparecur).val() != input_num) {
		$get('#main_current_input_select').append($get('<option>', main_zone_page.input_model(input_num)));
	} else {
		var imscan;
		var cioptions = $get("#main_current_input_select option");
		var index = cioptions.length - 1;
		while ((index >= 0) &&
			((imscan = cioptions.eq(index)).val() >= input_num)) {
			imscan.val(parseInt(imscan.val()) + 1);
			index--;
		}

		// Insert one option
		var nextcur = "#main_current_input_select option[value='" + (input_num + 1) + "']";
		$get(option_fragment(input_num)).insertBefore($get(nextcur));
		main_zone_page.data.current_input = $get("#main_current_input_select").val();
		main_zone_page.get_speaker_profile();
	}

	function option_fragment(v) {
		var frag = "<option value='" + v + "'>" + TR("Input %1", [v]) + "</option>";
		return frag;
	}
}

main_zone_page.update_inputs = function (num_items) {
	var input_value;

	// value should be 1..num_items
	var selectEl = $get('#main_current_input_select');
	var curlength = $get('#main_current_input_select option').length;
	if (curlength > num_items) {
		// Remove items
		while (curlength > num_items) {
			selectEl.find("option[value=" + curlength + "]").remove();
			curlength--;
		}
	} else if (curlength < num_items) {
		// Add items
		for (input_value = curlength + 1; input_value <= num_items; input_value++) {
			selectEl.append($get('<option>', {
				value: input_value,
				text: TR("Input %1", [input_value])
			}));
		}
	}
}

main_zone_page.remove_input = function (index) {
	var input_value;
	var optv;

	$get("#main_current_input_select  option[value='" + index + "']").remove();

	// value should be 1..highest
	var selectEl = $get('#main_current_input_select');
	var curlength = $get('#main_current_input_select option').length;
	for (input_value = index; input_value <= curlength; input_value++) {
		optv = selectEl.find("option[value=" + (input_value + 1) + "]");
		if (optv.length > 0) {
			optv.attr("value", input_value);
		}
	}
	main_zone_page.data.current_input = $get("#main_current_input_select").val();
	main_zone_page.get_speaker_profile();
}

main_zone_page.update_UI_input_name = function (index, name) {
	var trimmed_name = name.trim();
	$get("#main_current_input_select   option[value='" + index + "']").text(trimmed_name);
}

main_zone_page.get_speaker_profile = function () {
	var mzdata = main_zone_page.data;
	if ((mzdata.current_input >= 1) &&
		(mzdata.current_input <= inputs_page.number_of_inputs)) {
		mzdata.current_profile = inputs_page.get_speaker_profile(mzdata.current_input);
	} else {
		mzdata.current_profile = 0;
	}
}

main_zone_page.update_speaker_profile = function (input_num, value) {
	if (main_zone_page.data.current_input == input_num) {
		main_zone_page.data.current_profile = value + 1;
	}
}

main_zone_page.update_UI_subwoofers_enabled = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.subwoofer_selected[prof_num - 1] = value > 0;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_subwoofer();
		}
	}
}
main_zone_page.xable_subwoofer = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.subwoofer_selected[mzdata.current_profile - 1];
	main_zone_page.enable_range("#mzl_subwoofer", which);
}
main_zone_page.update_UI_front_wide_enable = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.front_wide_enabled[prof_num - 1] = value;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_front_wide();
		}
	}
}
main_zone_page.xable_front_wide = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.front_wide_enabled[mzdata.current_profile - 1];
	main_zone_page.enable_range("#mzl_front_wide", which);
}
main_zone_page.update_UI_center_enable = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.center_enabled[prof_num - 1] = value;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_center();
		}
	}
}
main_zone_page.xable_center = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.center_enabled[mzdata.current_profile - 1];
	main_zone_page.enable_range("#mzl_center", which);
}
main_zone_page.update_UI_surrounds_enable = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.surrounds_enabled[prof_num - 1] = value;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_surrounds();
		}
	}
}
main_zone_page.update_UI_amp_matrixing_surrounds = function (value) {
	if (device.model == MODEL.MRXSLM) {
		if (value == 0) {
			// Set to surround speakers
			$get("#mzl_surrounds").show();
			$get("#z1_ht1_row").hide();
		} else if (value == 1) {
			// Set to front bi-amp
			$get("#mzl_surrounds").hide();
			$get("#z1_ht1_row").hide();
		} else {
			// Set to other speakers
			$get("#mzl_surrounds").hide();
			$get("#z1_ht1_row").show();
			var height_1_name = $get("#amp_matrixing_surrounds_select option[value='" + value + "']").text();
			$get("#levels_height_1_label").text(height_1_name);
		}
	}
}
main_zone_page.xable_surrounds = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.surrounds_enabled[mzdata.current_profile - 1];
	main_zone_page.enable_range("#mzl_surrounds", which);
}
main_zone_page.update_UI_height = function (value) {
	main_zone_page.data.height_choice = value;
	if (value == 1) {
		$get("#mzl_backs").show();
	} else {
		$get("#mzl_backs").hide();
	}
}
main_zone_page.update_UI_backs_enable = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.backs_enabled[prof_num - 1] = value;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_backs();
		}
	}
}
main_zone_page.xable_backs = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.backs_enabled[mzdata.current_profile - 1];
	main_zone_page.enable_range("#mzl_backs", which);
}
main_zone_page.update_UI_heights_1_enable = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.heights_1_enabled[prof_num - 1] = value;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_heights_1();
		}
	}
}
main_zone_page.xable_heights_1 = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.heights_1_enabled[mzdata.current_profile - 1];
	main_zone_page.enable_range("#z1_ht1_row", which);
}
main_zone_page.update_UI_heights_2_enable = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.heights_2_enabled[prof_num - 1] = value;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_heights_2();
		}
	}
}
main_zone_page.xable_heights_2 = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.heights_2_enabled[mzdata.current_profile - 1];
	main_zone_page.enable_range("#z1_ht2_row", which);
}
main_zone_page.update_UI_heights_3_enable = function (prof_num, value) {
	if ((prof_num >= 1) && (prof_num <= 4)) {
		var mzdata = main_zone_page.data;
		mzdata.heights_3_enabled[prof_num - 1] = value;
		if (mzdata.current_profile == prof_num) {
			main_zone_page.xable_heights_3();
		}
	}
}
main_zone_page.xable_heights_3 = function () {
	var mzdata = main_zone_page.data;
	var which = mzdata.power && mzdata.heights_3_enabled[mzdata.current_profile - 1];
	main_zone_page.enable_range("#z1_ht3_row", which);
}

main_zone_page.update_UI_height_1_text = function (name, is_off) {
	main_zone_page.data.height_1_off = is_off;
	if (is_off) {
		$get("#z1_ht1_row").hide();
	} else {
		$get("#z1_ht1_row").show();
		$get("#levels_height_1_label").text(name);
	}
}
main_zone_page.update_UI_height_2_text = function (name, is_off) {
	main_zone_page.data.height_2_off = is_off;
	if (is_off) {
		$get("#z1_ht2_row").hide();
	} else {
		$get("#z1_ht2_row").show();
		$get("#levels_height_2_label").text(name);
	}
}
main_zone_page.update_UI_height_3_text = function (name, is_off) {
	main_zone_page.data.height_3_off = is_off;
	if (is_off) {
		$get("#z1_ht3_row").hide();
	} else {
		$get("#z1_ht3_row").show();
		$get("#levels_height_3_label").text(name);
	}
}

main_zone_page.update_UI_audio_input = function (input_num, audiotype) {
	if (main_zone_page.data.loaded) {
		if (main_zone_page.data.current_input == input_num) {
			var wass = streaming_plate.data.loaded;
			if (!wass && main_zone_page.is_audio_streaming()) {
				streaming_plate.load_plate();
			} else if (wass && !main_zone_page.is_audio_streaming) {
				streaming_plate.unload_plate();
			}
		}
	}
}

main_zone_page.current_input = function () {
	return main_zone_page.data.current_input;
}

main_zone_page.is_audio_streaming = function () {
	return inputs_page.is_audio_streaming(main_zone_page.data.current_input);
}

var zone_2_page = {}

zone_2_page.data = {
	loaded: false,
	power: 0,
	current_input: 0,
	volume_db: -35.0,
	volume_pc: 20
};

zone_2_page.input_model = function (v) {
	var im = {
		value: v,
		text: TR("Input %1", [v])
	};
	return im;
};

zone_2_page.load_page = function () {
	zone_2_page.data.loaded = true;
	$get("#zone_2_page").fadeIn();

	turn_on_listeners();
	if (inputs_page.is_audio_streaming(zone_2_page.data.current_input)) {
		streaming_plate.load_plate();
		$get("#zone_2_last_container").addClass("mb-snnp");
	}

	function turn_on_listeners() {
		var zone_number = 2;

		$get("#zone_2_power_sw").on("click", function () {
			var aattr = $get("#zone_2_power_sw").attr("aria-checked");
			log("zone_2_power_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(get_zone_command(COMMAND.Z_POW, zone_number), value);
			if (aattr != "true") {
				$get("#zone_2_power_sw").attr("disabled", true);
				setTimeout(reenable_power, 5000);
			}
		});
		$get("#zone_2_mute_sw").on("click", function () {
			var aattr = $get("#zone_2_mute_sw").attr("aria-checked");
			log("zone_2_mute_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(get_zone_command(COMMAND.Z_MUT, zone_number), value);
		});
		$get("#zone_2_volume_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on zone_2_volume_range: " + value);
			if (VOLUME_SCALE_IN_DB) {
				send_and_query_command(get_zone_command(COMMAND.Z_VOL, zone_number), value);
			} else {
				send_and_query_command(get_zone_command(COMMAND.Z_PVOL, zone_number), value);
			}
		});
		$get("#zone_2_current_input_select").on("change", function () {
			var value = this.value;
			log("on zone_2_current_input_select: " + value);
			send_and_query_command(get_zone_command(COMMAND.Z_INP, zone_number), value);
		});

		$get("#zone_2_page .switch_track").on("keydown", function (e) {
			return handle_switch_keydown($get(this), e.which);
		});
		$get("#zone_2_page .minus").on("click", function () {
			handle_range_minus_button_click($get(this));
		});
		$get("#zone_2_page .plus").on("click", function () {
			handle_range_plus_button_click($get(this));
		});
	}

	function reenable_power() {
		$get("#zone_2_power_sw").attr("disabled", false);
	}
}

zone_2_page.unload_page = function () {
	$get("#zone_2_page").hide();

	turn_off_listeners();
	if (inputs_page.is_audio_streaming(zone_2_page.data.current_input)) {
		streaming_plate.unload_plate();
		$get("#zone_2_last_container").removeClass("mb-snnp");
	}
	zone_2_page.data.loaded = false;

	function turn_off_listeners() {
		$get("#zone_2_power_sw").off("click");
		$get("#zone_2_mute_sw").off("click");
		$get("#zone_2_volume_range").off("change");
		$get("#zone_2_current_input_select").off("change");

		$get("#zone_2_page .switch_track").off("keydown");
		$get("#zone_2_page .minus").off("click");
		$get("#zone_2_page .plus").off("click");
	}
}

zone_2_page.enable_controls = function (which) {
	log("zone_2_page.enable_controls " + which);
	const all_xable_ids = [
		"#zone_2_mute_sw", "#zone_2_volume_range",
		"#zone_2_current_input_select",
		"#zone_2_page .switch_track"
	];
	for (var idix = 0; idix < all_xable_ids.length; idix++) {
		$get(all_xable_ids[idix]).attr("disabled", !which);
	}

	var classm = "#zone_2_page .minus";
	enable_class(classm, which);
	var classp = "#zone_2_page .plus";
	enable_class(classp, which);
	var classv = "#zone_2_page .range_value";
	enable_class(classv, which);
	log("zone_2_page.enable_controls end");
}

// Update UI

zone_2_page.update_UI_volume_scale = function () {
	var max_range = $get("#zone_2_max_volume_range");
	var volume_range = $get("#zone_2_volume_range");
	var max_vol = Number(max_range.val());
	var z2data = zone_2_page.data;
	if (VOLUME_SCALE_IN_DB) {
		volume_range.attr("min", -90);
		volume_range.attr("max", max_vol);
		volume_range.attr("step", 0.5);
		z2data.volume_db = z2data.volume_pc.percent_to_dB()
		zone_2_page.update_UI_db_volume(z2data.volume_db);
	} else {
		volume_range.attr("min", 0);
		volume_range.attr("max", max_vol.dB_to_percent());
		volume_range.attr("step", 1);
		z2data.volume_pc = z2data.volume_db.dB_to_percent();
		zone_2_page.update_UI_pc_volume(z2data.volume_pc);
	}
}

zone_2_page.update_UI_power = function (bvalue) {
	zone_2_page.data.power = bvalue;
	$get("#zone_2_power_sw").attr("aria-checked", bvalue ? true : false);
	zone_2_page.enable_controls(bvalue);
}

zone_2_page.update_UI_mute = function (bvalue) {
	$get("#zone_2_mute_sw").attr("aria-checked", bvalue ? true : false);
}

zone_2_page.update_UI_db_volume = function (value) {
	var range = $get("#zone_2_volume_range");
	range.val(value);
	if (VOLUME_SCALE_IN_DB) {
		zone_2_page.data.volume_db = value;
		update_UI_range_text(range, value, "dB");
	}
}
zone_2_page.update_UI_pc_volume = function (value) {
	var range = $get("#zone_2_volume_range");
	range.val(value);
	if (!VOLUME_SCALE_IN_DB) {
		zone_2_page.data.volume_pc = value;
		update_UI_range_text(range, Number(value), "%", 0);
	}
}

zone_2_page.update_UI_max_volume = function (value) {
	var volume_range = $get("#zone_2_volume_range");
	var volume_range_value = parseFloat(volume_range.val());
	if (VOLUME_SCALE_IN_DB) {
		volume_range.attr("max", value);
		if (value < volume_range_value) {
			volume_range.val(value).change();
			zone_2_page.update_UI_db_volume(value);
		} else {
			zone_2_page.update_UI_db_volume(volume_range_value);
		}
	} else {
		volume_range.attr("max", value.dB_to_percent());
		var percent_value = value.dB_to_percent();
		if (percent_value < volume_range_value) {
			volume_range.val(percent_value).change();
			zone_2_page.update_UI_pc_volume(percent_value);
		} else {
			zone_2_page.update_UI_pc_volume(volume_range_value);
		}
	}
}
zone_2_page.update_UI_current_input = function (value) {
	var wass = inputs_page.is_audio_streaming(zone_2_page.data.current_input);
	zone_2_page.data.current_input = value;
	$get("#zone_2_current_input_select").val(value);
	if (zone_2_page.data.loaded) {
		var iss = inputs_page.is_audio_streaming(zone_2_page.data.current_input);
		if (!wass && iss) {
			streaming_plate.load_plate();
			$get("#zone_2_last_container").addClass("mb-snnp");
		} else if (wass && !iss) {
			streaming_plate.unload_plate();
			$get("#zone_2_last_container").removeClass("mb-snnp");
		}
	}
}

// Modify controls because an input was added or inserted
zone_2_page.add_input = function (input_num) {
	if (!device.use_zone2) {
		return;
	}
	if (input_num < 1 || input_num > inputs_page.maximum_number_of_inputs) {
		logE("cannot add input: " + input_num);
		return;
	}

	var comparecur = "#zone_2_current_input_select option[value='" + input_num + "']";
	if ($get(comparecur).val() != input_num) {
		$get('#zone_2_current_input_select').append($get('<option>', zone_2_page.input_model(input_num)));
	} else {
		var imscan;
		var cioptions = $get("#zone_2_current_input_select option");
		var index = cioptions.length - 1;
		while ((index >= 0) &&
			((imscan = cioptions.eq(index)).val() >= input_num)) {
			imscan.val(parseInt(imscan.val()) + 1);
			index--;
		}

		// Insert one option
		var nextcur = "#zone_2_current_input_select option[value='" + (input_num + 1) + "']";
		$get(option_fragment(input_num)).insertBefore($get(nextcur));
		zone_2_page.data.current_input = $get("#zone_2_current_input_select").val();
	}

	function option_fragment(v) {
		var frag = "<option value='" + v + "'>" + TR("Input %1", [v]) + "</option>";
		return frag;
	}
}

zone_2_page.update_inputs = function (num_items) {
	if (!device.use_zone2) {
		return;
	}

	var input_value;
	var selectEl = $get('#zone_2_current_input_select');
	var curlength = $get('#zone_2_current_input_select option').length;
	if (curlength > num_items) {
		// Remove items
		while (curlength > num_items) {
			curlength--;
			selectEl.find("option[value=" + curlength + "]").remove();
		}
	} else if (curlength < num_items) {
		// Add items
		for (input_value = curlength + 1; input_value <= num_items; input_value++) {
			selectEl.append($get('<option>', {
				value: input_value,
				text: TR("Input %1", [input_value])
			}));
		}
	}
}

zone_2_page.remove_input = function (index) {
	if (!device.use_zone2) {
		return;
	}

	var input_value;
	var optv;

	$get("#zone_2_current_input_select  option[value='" + index + "']").remove();

	// value should be 1..highest
	var selectEl = $get('#zone_2_current_input_select');
	var curlength = $get('#zone_2_current_input_select option').length;
	for (input_value = index; input_value <= curlength; input_value++) {
		optv = selectEl.find("option[value=" + (input_value + 1) + "]");
		if (optv.length > 0) {
			optv.attr("value", input_value);
		}
	}
	zone_2_page.data.current_input = $get("#zone_2_current_input_select").val();
}

zone_2_page.update_UI_input_name = function (index, name) {
	var trimmed_name = name.trim();
	$get("#zone_2_current_input_select  option[value='" + index + "']").text(trimmed_name);
}

zone_2_page.update_UI_audio_input = function (input_num, audiotype) {
	if (zone_2_page.data.loaded) {
		if (zone_2_page.data.current_input == input_num) {
			var wass = streaming_plate.data.loaded;
			if (!wass && (audiotype == 13)) {
				streaming_plate.load_plate();
			} else if (wass && (audiotype != 13)) {
				streaming_plate.unload_plate();
			}
		}
	}
}

zone_2_page.current_input = function () {
	return zone_2_page.data.current_input;
}

zone_2_page.is_audio_streaming = function () {
	return inputs_page.is_audio_streaming(zone_2_page.data.current_input);
}

var player_page = {}

const sizeObserver = new ResizeObserver(entries => {
	for (let entry of entries) {
		if (entry.contentBoxSize) {
			player_page.trySizing();
		}
	}
});

player_page.data = {
	zonem: {
		power: 0
	},
	zone2: {
		power: 0
	},
	loaded: false,
	first_load: true,
	any_usb: false,
	usb_service: "",
	pollsub_id: "",
	usb_connected: {},
	usb_scribed: "",
	query_counts: 0,
	query_errors: [],
	list_playing: 0,
	tree_playing: "",
	songs_list: []
};

// Control the height of the tree and table
player_page.trySizing = function () {
	if (player_page.data.loaded) {
		var winht = $get(window).height();
		var maxtreeht = Math.ceil(winht * 0.25);
		if (maxtreeht < 200) {
			maxtreeht = 200;
		}
		log("window height " + winht + " max tree height " + maxtreeht);
		$get("#tree_one").css("max-height", maxtreeht);
		$get("#recent_played_sel").css("max-height", maxtreeht);
		$get(".song_space").css("max-height", maxtreeht);
	}
}

player_page.load_page = function () {
	$get("#player_page").fadeIn();
	var ppdata = player_page.data;
	if (!ppdata.any_usb) {
		$get(".no_usb").show();
	}
	sizeObserver.observe(document.getElementById("tree_one"));
	ppdata.loaded = true;
	if (ppdata.first_load) {
		ppdata.first_load = false;

		player_page.seekingSongs(true);
		player_page.get_all_services();
		$get(".new_usb").hide();
	} else if (ppdata.pollsub_id.length > 0) {
		streamer.subscribeTo(ppdata.pollsub_id, ppdata.usb_scribed);
	}
	if (player_page.data.query_errors.length > 0) {
		$get(".usb_errors").show();
	} else {
		$get(".usb_errors").hide();
	}

	turnOnTreeListener();
	turnOnTableListener();
	turnOnRecentListener();

	function turnOnTreeListener() {
		$get("#refill_tree_b").on("click", function (e) {
			player_page.deactivateTree();
			$get("#tree_one").empty();
			$get("#allsongs_t > tbody").empty();
			player_page.data.songs_list = [];
			player_page.seekingSongs(true);
			player_page.get_all_services();
			$get(".new_usb").hide();
		});
		$get("#tree_one").on("click", ".song", function (e) {
			log(".song clicked " + $get(this).attr("value"));
			streaming_page.querySong($get(this).attr("value"));
		});
		$get("#tree_one").on("click", ".songs", function (e) {
			log("PlayAll songs clicked " + $get(this).attr("value"));
			streaming_page.querySongs($get(this).attr("value"));
		});
	}

	function turnOnTableListener() {
		var sso_cookies = cookies.get_sort_order();
		var acookies = sso_cookies.split(",");
		$get("#sort_order_select").empty();
		for (var ccnt = 0; ccnt < acookies.length; ccnt++) {
			var cookee = acookies[ccnt];
			var visiblet = "undefined option";
			// "sso_artist, sso_album, sso_number, sso_title, sso_duration, sso_path";
			if (cookee == "sso_artist") {
				visiblet = "Artist";
			} else if (cookee == "sso_album") {
				visiblet = "Album";
			} else if (cookee == "sso_number") {
				visiblet = "Number";
			} else if (cookee == "sso_title") {
				visiblet = "Title";
			} else if (cookee == "sso_duration") {
				visiblet = "Duration";
			} else if (cookee == "sso_path") {
				visiblet = "Path";
			}
			$get("#sort_order_select").append
			var html = '<option value="' + cookee + '">' + visiblet + '</option>';
			$get("#sort_order_select").append(html);
		}

		$get("#sort_order_select").on("change", function (e) {
			var value = this.value;
			// process sort order change
			var opt = $get('#sort_order_select option[value=' + value + ']').remove();
			$get("#sort_order_select").prepend(opt);
			$get('#sort_order_select option:eq(0)').prop('selected', true);
			var sso_cookies = cookies.get_sort_order();
			var acookies = sso_cookies.split(",");
			// Shift values to end, always do at least once, move selected to front
			var ccnt = 0;
			while (ccnt < acookies.length) {
				if (acookies[ccnt] == value) {
					while (ccnt > 0) {
						acookies[ccnt] = acookies[ccnt - 1];
						ccnt--;
					}
					acookies[0] = value;
					cookies.set_sort_order(acookies);
					break;
				}
				ccnt++;
			}
		});
		$get("#sort_list_b").on("click", function (e) {
			var spath = "";
			if (player_page.data.list_playing > 0) {
				// A song was playing
				spath = player_page.data.songs_list[player_page.data.list_playing - 1].songpath;
				player_page.highlightRow(0);
			}

			$get("#allsongs_t > tbody").empty();
			player_page.sortSongList();
			player_page.fillSongTable();

			if (spath.length > 0) {
				// Restore hightlight
				var scnt = 0;
				while (scnt < player_page.data.songs_list.length) {
					if (player_page.data.songs_list[scnt].songpath == spath) {
						player_page.highlightRow(scnt + 1);
						break;
					}
					scnt++;
				}
			}
		});
		$get("#allsongs_t").on("click", "tr.song_row", function (e) {
			log(".song_row clicked rowIndex " + this.rowIndex);
			player_page.highlightRow(this.rowIndex);
			var spath = player_page.data.songs_list[this.rowIndex - 1].songpath;
			player_page.highlightLeaf(spath);
			streaming_page.querySong(spath);
		});
	}

	function turnOnRecentListener() {
		// Get the recently played
		player_page.getRecentList();

		// Process the selection
		var ENTER_KEY = 13;
		var TAB_KEY = 9;
		$get("#recent_played_sel").on("keydown", function (e) {
			if (e.which === ENTER_KEY)
				$get("#recent_played_sel").click();
			if (e.which >= 35 && e.which <= 40) {
				// home, end, arrow keys
				return true;
			}
			return e.which === TAB_KEY;
		});
		$get("#recent_played_sel").on("click", function (e) {
			var recentval = this.value;
			log("recent_played_sel click " + recentval);
			if (recentval != null) {
				streaming_page.querySong(recentval);
			}
		});
	}
}

player_page.unload_page = function () {
	if (player_page.data.loaded) {
		player_page.data.loaded = false;
		player_page.deactivateTree();
		sizeObserver.unobserve(document.getElementById("tree_one"));
		turnOffTreeListener();
		turnOffTableListener();
		turnOffRecentListener();
		streamer.unsubscribeFrom(player_page.data.pollsub_id, player_page.data.usb_scribed);
		player_page.seekingSongs(false);
	}

	$get("#player_page").hide();

	function turnOffTreeListener() {
		$get("#refill_tree_b").off("click");
		$get("#tree_one").off("click", ".song");
		$get("#tree_one").off("click", ".songs");
	}

	function turnOffTableListener() {
		$get("#sort_order_select").off("change");
		$get("#sort_list_b").off("click");
		$get("#allsongs_t").off("click", "tr.song_row");
	}

	function turnOffRecentListener() {
		$get("#recent_played_sel").off("keydown");
		$get("#recent_played_sel").off("click");
	}
}

player_page.seekingSongs = function (seek) {
	// Note: adding cursor: wait did not work
	if (seek) {
		$get(".seeking_songs").show();
	} else {
		$get(".seeking_songs").hide();
	}
}

player_page.activateAll = function () {
	player_page.activateTree();
	$get("#allsongs_t > tbody").empty();
	player_page.sortSongList();
	player_page.fillSongTable();
	player_page.seekingSongs(false);
}

player_page.toggleOnClick = function () {
	this.parentElement.querySelector(".nested").classList.toggle("active");
	this.classList.toggle("caret-down");
};

player_page.activateTree = function () {
	log("activateTree " + diag_time_ms());
	var togglers = $get(".caret");
	var i;

	for (i = 0; i < togglers.length; i++) {
		togglers[i].onclick = player_page.toggleOnClick;
	}

	var fetchers = $get(".carrot");
	for (i = 0; i < fetchers.length; i++) {
		fetchers[i].onclick = function () {
			// Replace the placeholder with a directory toggler
			var id = $get(this).attr("id");
			var svc_path = $get(this).attr("path");
			$get(this).removeClass("carrot");
			$get(this).addClass("caret caret-down");
			$get(this).removeAttr("path");
			var html = '<ul id="' + id + '_UL" class="nested active"></ul>';
			$get(html).insertAfter("#" + id);
			$get("#" + id).removeAttr("id");
			$get("#" + id + "_UL").attr("id", id);
			this.onclick = player_page.toggleOnClick;

			// Search for songs
			var drv_name = "";
			var usix = id.indexOf("_");
			if (usix > 0) {
				usix = id.indexOf("_", usix + 1);
				if (usix > 0) {
					var rootid = id.substr(0, usix) + "_root";
					drv_name = $get("#" + rootid).prev().text();
				}
			}
			var grandparent = "";
			usix = id.lastIndexOf("_");
			if (usix > 0) {
				var gpid = id.substr(0, usix);
				grandparent = $get("#" + gpid).prev().text();
			}
			player_page.queryTree(drv_name, svc_path, id, id, grandparent, 0, 0);
		};
	}

	$get(".usb_errors").empty();
	if (player_page.data.query_errors.length > 0) {
		var html_li = "";
		for (var errcnt = 0; errcnt < player_page.data.query_errors.length; errcnt++) {
			html_li += '<li>' + player_page.data.query_errors[errcnt] + '<li>';
		}
		var html = '<ul>' + html_li + '</ul>';
		$get(".usb_errors").append(html);
		$get(".usb_errors").show();
	} else {
		$get(".usb_errors").hide();
	}
}

player_page.deactivateTree = function () {
	$get(".caret").off("click");
}

player_page.get_all_services = function () {
	var url = location.origin + "/api/getRows?path=ui:&roles=type,title,path&from=0&to=100";
	log("URL " + url);
	var srvc_request = new XMLHttpRequest();
	srvc_request.onload = function () {
		var obj = JSON.parse(this.responseText);
		if (obj.rows != undefined) {
			log("get_all_services text=" + this.responseText);
			var rowcnt = 0;
			while (rowcnt < obj.rowsCount) {
				var onerow = obj.rows[rowcnt];
				if ((onerow[0] == "container") && (onerow[1] == "USB&SD")) {
					// Initialize polling string
					var sarray = [];
					var usbobj = {};
					usbobj.path = onerow[2];
					usbobj.type = "rows";
					sarray.push(usbobj);
					player_page.data.usb_scribed = JSON.stringify(sarray);

					player_page.get_one_service(onerow[2]);
					streamer.createQueue(player_page.data.usb_scribed, function (id) {
						player_page.data.pollsub_id = id;
					});
				}
				rowcnt++;
			}
		}
	}
	srvc_request.onerror = function (evt) {
		log("get_all_services error responseText=", this.responseText);
	};
	srvc_request.open('GET', url, true);
	srvc_request.send();
}

player_page.get_one_service = function (svc_path) {
	var url = location.origin + "/api/getRows?path=" + svc_path +
		"&roles=type,title,path&from=0&to=100";
	log("URL " + url);
	var srvc_request = new XMLHttpRequest();
	srvc_request.onload = function () {
		var obj = JSON.parse(this.responseText);
		if (obj.rows != undefined) {
			log("get_one_service text=" + this.responseText);
			player_page.data.usb_service = svc_path;
			if (obj.rowsCount > 0) {
				player_page.data.usb_connected = obj.rows;
				player_page.data.any_usb = true;
				$get(".no_usb").hide();
			}
			player_page.data.query_counts = 0;
			var rowcnt = 0;
			while (rowcnt < obj.rowsCount) {
				var onerow = obj.rows[rowcnt];
				if (onerow[0] == "container") {
					player_page.get_usb_service(rowcnt, onerow[1], onerow[2]);
				}
				rowcnt++;
			}
		}
	}
	srvc_request.onerror = function () {
		log("get_one_service error responseText=", this.responseText);
	};
	srvc_request.open('GET', url, true);
	srvc_request.send();
}

player_page.new_usb_notice = function () {
	$get(".new_usb").show();
}

player_page.get_usb_service = function (svc_row, svc_name, svc_path) {
	var rootid = "tree_" + (svc_row + 1) + "_root";
	var branchid = "tree_" + (svc_row + 1);
	player_page.addRootName(rootid, svc_name);
	player_page.data.query_errors = [];
	player_page.queryTree(svc_name, svc_path, rootid, branchid, "", 0, 0);
}

player_page.addRootName = function (rootid, branch_text) {
	var html = '<li><span class="caret">' + branch_text + '</span>' +
		'<ul id="' + rootid + '" class="nested">' +
		'</ul></li>';
	$get("#tree_one").append(html);
}

player_page.remove_usb_service = function (svc_row) {
	// Remove from list and table
	// Note: insert events may arrive as [ add index:3, remove index:2 ]
	// which caused an access error
	if (svc_row < player_page.data.usb_connected.length) {
		var olddrive = player_page.data.usb_connected[svc_row][1];
		var all_songs = player_page.data.songs_list;
		for (var rowix = all_songs.length - 1; rowix >= 0; rowix--) {
			if (all_songs[rowix].drive == olddrive) {
				all_songs.splice(rowix, 1);
				$get("#allsongs_t tbody tr:eq(" + rowix + ")").remove();
			}
		}
	}

	// Remove data
	player_page.data.usb_connected.splice(svc_row, 1);

	// Remove branch from tree
	$get("#tree_one > li:eq(" + svc_row + ")").remove();
	if (player_page.data.usb_connected.length == 0) {
		$get(".no_usb").show();
	}
}

player_page.queryTree = function (svc_name, svc_path, parent_id, order_id, grandparent, depth, from) {
	player_page.data.query_counts++;
	//log("queryTree " + svc_path + ", " + player_page.data.query_counts + ", " +
	//		parent_id + ", " + order_id + ", " + depth);
	var to = from + 99;
	var url = location.origin + "/api/getRows?path=" + encodeURIComponent(svc_path) +
		"&roles=type,title,path&from=" + from + "&to=" + to;
	//log("URL " + url);
	log("queryTree " + player_page.data.query_counts + ", " + parent_id);
	var srvc_request = new XMLHttpRequest();
	srvc_request.onload = function () {
		var obj = JSON.parse(this.responseText);
		if (obj.rows != undefined) {
			log("queryTree " + diag_time_ms() + " rowsCount=" + obj.rowsCount + " text=" + this.responseText);
			var rows_data = obj.rows;
			// Add to tree
			var anybr = player_page.addBranches(parent_id, order_id, depth < 3, from, rows_data);
			player_page.addPlayAllLeaf(parent_id, rows_data);
			var anyal = player_page.addAudioLeaves(parent_id, rows_data);
			// Add to list
			var sublen = svc_path.lastIndexOf("/");
			var parent_dir = sublen >= 0 ? svc_path.substring(sublen + 1) : "";
			player_page.addSongsInFolder(svc_name, grandparent, parent_dir, rows_data, depth);
			// Scan for containers
			if (depth < 3) {
				for (var row_cnt = 0; row_cnt < rows_data.length; row_cnt++) {
					var row_data = rows_data[row_cnt];
					if (row_data[0] == "container") {
						// Recursive call
						var next_id = order_id + "_" + (from + row_cnt + 1);
						player_page.queryTree(svc_name, row_data[2], next_id, next_id, parent_dir, depth + 1, 0);
					}
				}
			}
			if (obj.rowsCount != undefined) {
				if ((to + 1) < obj.rowsCount) {
					// Iterative call for more data
					player_page.queryTree(svc_name, svc_path, parent_id, order_id, grandparent, depth, to + 1);
				} else if (from == 0) {
					// only one check of folder
					if (!anybr && !anyal) {
						// no folders or files
						log("empty " + parent_id + ", " + order_id + ", " + grandparent);
						$get("#" + parent_id).parent().remove();
					}
				}
			}
			if (player_page.data.query_counts > 0) {
				// use query counter
				player_page.data.query_counts--;
				if (player_page.data.query_counts <= 0) {
					// All USB queries have received replies
					do {
						var emptyul = 0;
						$get("#tree_one ul").each(function () {
							if ($get(this).has("li").length < 1) {
								emptyul++;
								$get(this).parent().remove();
							}
						});
						log("queryTree empty ul " + emptyul);
					} while (emptyul > 0);
					setTimeout(player_page.activateAll, 200);
				}
			}
		} else if (obj.error != undefined) {
			var error_msg = "Error " + srvc_request.status + ": " +
				obj.error.message + " for " + svc_path;
			player_page.data.query_errors.push(error_msg);
			player_page.data.query_counts--;
		}
	}
	srvc_request.onerror = function () {
		log("queryTree onerror responseText=", this.responseText);
		player_page.data.query_counts--;
	};
	srvc_request.open('GET', url, true);
	srvc_request.send();
}

player_page.getRecentList = function () {
	var url = location.origin + "/api/getRows?path=ui:/playHistory" +
		"&roles=type,title,path&from=0&to=200";
	log("URL " + url);
	var srvc_request = new XMLHttpRequest();
	srvc_request.onload = function () {
		log("getRecentList onload responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if (obj.rows != undefined) {
			$get("#recent_played_sel").children().remove();
			for (var row_cnt = 0; row_cnt < obj.rows.length; row_cnt++) {
				var row_data = obj.rows[row_cnt];
				if (row_data[0] == "audio") {
					var frag = '<option value="' + row_data[2] + '">' + row_data[1] + '</option>';
					$get("#recent_played_sel").append(frag);
				}
			}
		}
	}
	srvc_request.onerror = function () {
		log("getRecentList onerror responseText=", this.responseText);
	};
	srvc_request.open('GET', url, true);
	srvc_request.send();
}

player_page.addBranches = function (parent_id, order_id, deeper, first_row, rows_data) {
	var bcontainers = false;
	for (var row_cnt = 0; row_cnt < rows_data.length; row_cnt++) {
		var row_data = rows_data[row_cnt];
		if (row_data[0] == "container") {
			if (deeper) {
				var html = '<li><span class="caret">' + row_data[1] + '</span>' +
					'<ul id="' + order_id + '_' + (first_row + row_cnt + 1) + '" class="nested">' +
					'</ul></li>';
			} else {
				html = '<li>' +
					'<span class="carrot" id="' + order_id + '_' + (first_row + row_cnt + 1) +
					'" path="' + row_data[2] + '">' +
					row_data[1] + '</span>' +
					'</li>';
			}
			$get("#" + parent_id).append(html);
			bcontainers = true;
		}
	}
	return bcontainers;
}

player_page.addPlayAllLeaf = function (parent_id, rows_data) {
	var audiocount = 0;
	var row_cnt = 0;
	while (row_cnt < rows_data.length) {
		if (rows_data[row_cnt][0] == "audio") {
			audiocount++;
			if (audiocount > 1) {
				break;
			}
		}
		row_cnt++;
	}
	if (audiocount > 1) {
		var sublen = rows_data[row_cnt][2].lastIndexOf("/");
		var folder = rows_data[row_cnt][2].substring(0, sublen);
		var html = '<li class="songs" value="' + folder + '">Play All</li>';
		$get("#" + parent_id).append(html);
	}
}

player_page.addAudioLeaves = function (parent_id, rows_data) {
	var baudiofiles = false;
	for (var row_cnt = 0; row_cnt < rows_data.length; row_cnt++) {
		var row_data = rows_data[row_cnt];
		if (row_data[0] == "audio") {
			var html = '<li class="song" value="' + row_data[2] + '">' + row_data[1] + '</li>';
			$get("#" + parent_id).append(html);
			baudiofiles = true;
		}
	}
	return baudiofiles;
}

player_page.addSongsInFolder = function (svc_name, grandparent, parent_dir, rows_data, level) {
	var artistname = grandparent;
	var albumtitle = parent_dir;
	for (var row_cnt = 0; row_cnt < rows_data.length; row_cnt++) {
		var row_data = rows_data[row_cnt];
		if (row_data[0] == "audio") {
			var dotindex = row_data[1].lastIndexOf(".");
			var songtitle = dotindex > 0 ?
				row_data[1].substring(0, dotindex) : row_data[1];
			var onesong = {
				"artist": artistname, "album": albumtitle,
				"songnumber": 0, "songtitle": songtitle, "duration": 0,
				"songpath": row_data[2], "drive": svc_name
			};
			player_page.data.songs_list.push(onesong);
		}
	}
}

player_page.sortSongList = function () {
	var sso_cookies = cookies.get_sort_order();
	var acookies = sso_cookies.split(",");
	player_page.data.songs_list.sort(function (a, b) {
		var ecnt = 0;
		while (ecnt < acookies.length) {
			var comparer = acookies[ecnt];
			if (comparer == "sso_artist") {
				var aart = a.artist.toLowerCase();
				var bart = b.artist.toLowerCase();
				if (aart < bart) {
					return -1;
				}
				if (aart > bart) {
					return 1;
				}
			} else if (comparer == "sso_album") {
				var aalb = a.album.toLowerCase();
				var balb = b.album.toLowerCase();
				if (aalb < balb) {
					return -1;
				}
				if (aalb > balb) {
					return 1;
				}
			} else if (comparer == "sso_number") {
				if (a.songnumber != b.songnumber) {
					return a.songnumber - b.songnumber;
				}
			} else if (comparer == "sso_title") {
				var asongt = a.songtitle.toLowerCase();
				var bsongt = b.songtitle.toLowerCase();
				if (asongt < bsongt) {
					return -1;
				}
				if (asongt > bsongt) {
					return 1;
				}
			} else if (comparer == "sso_duration") {
				if (a.duration != b.duration) {
					return a.duration - b.duration;
				}
			} else if (comparer == "sso_path") {
				// Use the drive name first (typical: USB2)
				// and the full path second (typical: storagefile:sdb1-394E-3F9D)
				var adrive = a.drive.toUpperCase();
				var bdrive = b.drive.toUpperCase();
				if (adrive < bdrive) {
					return -1;
				}
				if (adrive > bdrive) {
					return 1;
				}
				var apath = a.songpath.toLowerCase();
				var bpath = b.songpath.toLowerCase();
				if (apath < bpath) {
					return -1;
				}
				if (apath > bpath) {
					return 1;
				}
			}
			ecnt++;
		}
		return 0; // should never occur
	});
}

player_page.fillSongTable = function () {
	for (var rcnt = 0; rcnt < player_page.data.songs_list.length; rcnt++) {
		var songscan = player_page.data.songs_list[rcnt];
		var songshow = songscan.songpath;
		var slashix = songscan.songpath.indexOf("/");
		if (slashix >= 0) {
			songshow = songscan.drive + ":" + songscan.songpath.substring(slashix + 1);
		}
		var html = '<tr class="song_row">' +
			'<td class="song_artist">' + songscan.artist + '</td>' +
			'<td class="song_album">' + songscan.album + '</td>' +
			'<td class="song_num">' + songscan.songnumber + '</td>' +
			'<td>' + songscan.songtitle + '</td>' +
			'<td class="song_time">' + (songscan.duration / 1000).tohmMSS() + '</td>' +
			'<td>' + songshow + '</td></tr>';
		$get("#allsongs_t").append(html);
	}
}

player_page.updateSongList = function (valueobj) {
	if (true) {
		// assuming valueobj.trackRoles.type == "audio" or similar
		var spath = valueobj.trackRoles.path;
		if (spath != undefined) {
			var scnt = 0;
			while (scnt < player_page.data.songs_list.length) {
				var songscan = player_page.data.songs_list[scnt];
				if (songscan.songpath == spath) {
					// Found the song. Copy data.
					var sundef = TR("undefined");
					songscan.artist = sundef;
					songscan.album = sundef;
					songscan.songnumber = 0;
					songscan.duration = 0;
					var songmetad = valueobj.trackRoles.mediaData.metaData;
					if (songmetad != undefined) {
						if (songmetad.artist != undefined) {
							songscan.artist = songmetad.artist;
						}
						if (songmetad.album != undefined) {
							songscan.album = songmetad.album;
						}
						if (songmetad.track != undefined) {
							songscan.songnumber = songmetad.track;
						}
					}
					var ttitle = valueobj.trackRoles.title;
					songscan.songtitle = (ttitle != undefined) ? ttitle : sundef;
					if ((valueobj.status != undefined) && (valueobj.status.duration != undefined)) {
						if (valueobj.status.duration > 0) {
							songscan.duration = valueobj.status.duration;
						}
					}
					player_page.highlightRow(scnt + 1);
					player_page.updateLiveRow(scnt + 1, songscan);
					break;
				}
				scnt++;
			}
		}
	}
}

player_page.updateSongTree = function (valueobj) {
	if (true) {
		// assuming valueobj.trackRoles.type == "audio" or similar
		var spath = valueobj.trackRoles.path;
		if (spath != undefined) {
			player_page.highlightLeaf(spath);
		}
	}
}

player_page.highlightLeaf = function (path_value) {
	var allitems = $get("#tree_one li");
	if (player_page.data.tree_playing.length > 0) {
		// Remove previous highlighting
		allitems.each(function () {
			if ($get(this).attr("value") == player_page.data.tree_playing) {
				$get(this).removeClass("current_play");
				player_page.data.tree_playing = "";
			}
		});
	}
	if (path_value.length > 0) {
		allitems.each(function () {
			if ($get(this).attr("value") == path_value) {
				$get(this).addClass("current_play");
				var li = $get(this);
				var li_off_top = li.offset().top;
				var li_ht = li.height(); // song, folder line
				var cnt = 0;
				while (li[0].tagName == "LI") {
					var ul = li.parent();
					if (li[0].scrollHeight == 0) {
						// Extend the branch
						ul.prev().addClass("caret-down");
						ul.addClass("active");
					}
					if (ul[0].tagName == "UL") {
						li = ul.parent();
					}
					cnt++;
				}
				if ((li[0].tagName == "DIV") && (ul != undefined)) {
					// Scroll using the song location and the outer ul position
					var soff = 3 * li_ht; // artist, album, play all
					ul.scrollTop(ul.scrollTop() + li_off_top - li.offset().top - soff);
				}
				player_page.data.tree_playing = path_value;
			}
		});
	}
}

player_page.highlightRow = function (rownum) {
	var allrows = $get("#allsongs_t tbody tr");
	if (player_page.data.list_playing > 0) {
		// Remove previous highlighting
		allrows.eq(player_page.data.list_playing - 1).removeClass("current_play");
		player_page.data.list_playing = 0;
	}
	if (rownum > 0) {
		allrows.eq(rownum - 1).addClass("current_play");
		allrows.eq(rownum - 1)[0].scrollIntoView();
		player_page.data.list_playing = rownum;
	}
}

player_page.updateLiveRow = function (rownum, song_details) {
	if (rownum > 0) {
		var onerow = "#allsongs_t tbody tr:eq(ROW) td:eq(COL)".replace("ROW", rownum - 1);
		$get(onerow.replace("COL", "0")).text(song_details.artist);
		$get(onerow.replace("COL", "1")).text(song_details.album);
		$get(onerow.replace("COL", "2")).text(song_details.songnumber);
		$get(onerow.replace("COL", "3")).text(song_details.songtitle);
		$get(onerow.replace("COL", "4")).text((song_details.duration / 1000).tohmMSS());
	}
}

player_page.update_power = function (zone, value) {
	var ppdata = player_page.data;
	if (zone == 1) {
		ppdata.zonem.power = value;
		if (value == 0) {
			// Main Zone turns off
			if (main_zone_page.is_audio_streaming()) {
				if (ppdata.pollsub_id.length > 0) {
					streamer.unsubscribeFrom(ppdata.pollsub_id, ppdata.usb_scribed);
				}
			}
		} else if (value == 1) {
			// Main Zone turns on
			if (main_zone_page.is_audio_streaming()) {
				if (ppdata.loaded && (ppdata.pollsub_id.length > 0)) {
					streamer.subscribeTo(ppdata.pollsub_id, ppdata.usb_scribed);
				}
			}
		}
	} else if (zone == 2) {
		ppdata.zone2.power = value;
		if (value == 0) {
			// Zone 2 turns off
			if (zone_2_page.is_audio_streaming()) {
				if (ppdata.pollsub_id.length > 0) {
					streamer.unsubscribeFrom(ppdata.pollsub_id, ppdata.usb_scribed);
				}
			}
		} else if ((zone == 2) && (value == 1)) {
			// Zone 2 turns on
			if (zone_2_page.is_audio_streaming()) {
				if (ppdata.loaded && (ppdata.pollsub_id.length > 0)) {
					streamer.subscribeTo(ppdata.pollsub_id, ppdata.usb_scribed);
				}
			}
		}
	}
}

var streaming_page = {}

streaming_page.data = {
	loaded: false,
	first_load: true,
	def_streaming_zone: 0, // 0: main zone, 1: zone 2
	duration_ms: 0,
	song_details: null,
	play_mode: "normal",
	zonem: {
		power: 0,
		mute_state: false
	},
	zone2: {
		power: 0,
		mute_state: false
	}
};

streaming_page.load_page = function () {
	$get("#streaming_page").fadeIn();
	streaming_page.data.loaded = true;

	streamer.starter();

	streaming_page.update_UI_mute();
	streaming_page.update_UI_play_mode();
	turnOnNowPlaying();
	setTimeout(streamer.questionSong, 200);

	function turnOnNowPlaying() {
		// Adjust button labels to fit
		streaming_page.fitButtonText("#playing_previous");
		streaming_page.fitButtonText("#playing_stop");
		streaming_page.fitButtonText("#playing_pause");
		streaming_page.fitButtonText("#playing_next");
		// Control buttons
		$get("#playing_stop").on("click", function () {
			streamer.turnMonitorOff();
			streamer.playControl(streamer.fixed.cstop);
		});
		$get("#playing_pause").on("click", function () {
			// Keep monitor running while paused
			streamer.playControl(streamer.fixed.cpause);
		});
		$get("#playing_previous").on("click", function () {
			streamer.turnMonitorOff();
			streamer.playControl(streamer.fixed.cprevious);
			setTimeout(streamer.questionSong, 700);
		});
		$get("#playing_next").on("click", function () {
			streamer.turnMonitorOff();
			streamer.playControl(streamer.fixed.cnext);
			setTimeout(streamer.questionSong, 700);
		});
		// Control mute and repeat/shuffle
		$get("#playmode_mute_cb").on("change", function () {
			var value = this.checked ? 1 : 0;
			var zone_number = 1 + streaming_page.data.def_streaming_zone;
			send_and_query_command(get_zone_command(COMMAND.Z_MUT, zone_number), value);
		});
		$get("#playmode_s").on("change", function () {
			var pmcommand = '{"type":"playerPlayMode","playerPlayMode":"_"}'.replace("_", this.value);
			streamer.modeSetting(pmcommand);
		});
		// Progress bar
		$get("#prog_played").on("click", function (e) {
			var here = e.offsetX;
			var maximum = $get("#prog_played").parent().width();
			log("prog_played click " + here + " of " + maximum);
		});
		$get("#prog_to_play").on("click", function (e) {
			var played = $get("#prog_played").width();
			var playing = $get("#prog_playing").width();
			var here = e.offsetX;
			var maximum = $get("#prog_to_play").parent().width();
			log("prog_to_play click " + played + " + " + playing + " + " + here + " of " + maximum);
		});
	}
}

streaming_page.unload_page = function () {
	$get("#streaming_page").hide();
	if (streaming_page.data.loaded) {
		log("streaming_page.unload");
		streaming_page.data.loaded = false;
		turnOffNowPlaying();
	}

	function turnOffNowPlaying() {
		$get("#playing_stop").off("click");
		$get("#playing_pause").off("click");
		$get("#playing_previous").off("click");
		$get("#playing_next").off("click");
		$get("#playmode_mute_cb").off("change");
		$get("#playmode_s").off("change");
		$get("#prog_played").off("click");
		$get("#prog_to_play").off("click");
	}
}

streaming_page.fitButtonText = function (id) {
	var butext = $get(id).text();
	$get(id).attr("style", "");
	var box_wide = Math.ceil($get(id).width());
	var label_fsize = $get(id).css("font-size");
	var label_fpx = parseInt(label_fsize);
	var label_ffamily = $get(id).css("font-family");
	var elem = document.getElementById("canfit");
	var ctx = elem.getContext("2d");
	while (label_fpx >= 10) {
		ctx.font = label_fpx + "px " + label_ffamily;
		var label_wide = Math.ceil(ctx.measureText(butext).width);
		if (label_wide <= box_wide) {
			break;
		}
		label_fpx -= 1;
		$get(id).css("font-size", label_fpx + "px");
	}
}

//Get data for one song from its source file
streaming_page.querySong = function (songpath) {
	var url = location.origin + "/api/getData?path=" + encodeURIComponent(songpath) + "&roles=@all";
	log("URL " + url);
	var songrequest = new XMLHttpRequest();
	songrequest.onload = function () {
		log("querySong onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if (obj.path != undefined) {
			streaming_page.playSong(JSON.parse(this.responseText));
		} else if (obj.error != undefined) {
			var error_msg = "Error " + songrequest.status + ": " +
				obj.error.message + " for " + songpath;
			alert(error_msg);
		}
	}
	songrequest.onerror = function (evt) {
		log("querySong error responseText=", this.responseText);
	};
	songrequest.open('GET', url, true);
	songrequest.send();
}

// Get data for all songs in a folder
streaming_page.querySongs = function (svc_path) {
	var url = location.origin + "/api/getRows?path=" + encodeURIComponent(svc_path) +
		"&roles=title,path,type&from=0&to=100";
	log("URL " + url);
	var srvc_request = new XMLHttpRequest();
	srvc_request.onload = function () {
		log("querySongs onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if (obj.rows != undefined) {
			streaming_page.playSongs(JSON.parse(this.responseText));
		} else if (obj.error != undefined) {
			var error_msg = "Error " + srvc_request.status + ": " +
				obj.error.message + " for " + svc_path;
			alert(error_msg);
		}
	}
	srvc_request.onerror = function (evt) {
		log("querySongs error responseText=", this.responseText);
	};
	srvc_request.open('GET', url, true);
	srvc_request.send();
}

// Start playing one song
streaming_page.playSong = function (songdata) {
	// Get basic data about the song
	var media_roles = {
		type: "container",
		title: "folder1",
		path: "localfile:folder01",
		mediaData:
		{
			metaData: { serviceID: "Files" },
			resources:
				[
					{
						mimeType: "", uri: "file:///folder01"
					}
				]
		}
	};
	if (songdata.type != null) {
		media_roles.type = songdata.type;
	}
	if (songdata.path != null) {
		media_roles.path = encodeURIComponent(songdata.path);
	}
	if (songdata.mediaData.metaData.serviceID != null) {
		media_roles.mediaData.metaData.serviceID = songdata.mediaData.metaData.serviceID;
	}
	if (songdata.mediaData.resources.length > 0) {
		media_roles.mediaData.resources[0] = songdata.mediaData.resources[0];
		media_roles.mediaData.resources[0].uri = encodeURIComponent(songdata.mediaData.resources[0].uri);
	}
	if (songdata.title != null) {
		media_roles.title = encodeURIComponent(songdata.title);
	}
	var vparams = '{"control":"play","trackRoles":null,"mediaRoles":' + JSON.stringify(media_roles) +
		',"type":"none","index":"0","version":null}';
	var url = location.origin + "/api/setData?path=/player/control&roles=activate&value=" + vparams;
	log("URL " + url);
	var playrequest = new XMLHttpRequest();
	playrequest.onload = function () {
		log("playSong onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if ((obj != undefined) && (obj.error != undefined)) {
			var error_msg = "Error " + playrequest.status + ": " +
				obj.error.message + " for " + songdata.path;
			alert(error_msg);
		} else {
			$get("#now_playing").val(songdata.title);
			setTimeout(streamer.questionSong, 700);
		}
	}
	playrequest.onerror = function (evt) {
		log("playSong error responseText=", this.responseText);
	};
	playrequest.open('GET', url, true);
	playrequest.send();
}

// Start playing a folder full of songs
streaming_page.playSongs = function (songsdata) {
	// Get basic data about the songs
	var media_roles = {
		type: "container",
		title: "folder1",
		path: "localfile:folder01",
		mediaData:
		{
			metaData: { serviceID: "Files" },
			resources:
				[
					{ mimeType: "", uri: "file:///folder01" }
				]
		}
	};
	var enc_fpath = encodeURIComponent(streaming_page.getFirstFolderPath(songsdata.rows));
	var enc_ftitle = encodeURIComponent(streaming_page.getFirstFolderTitle(songsdata.rows));
	media_roles.path = enc_fpath;
	media_roles.title = enc_ftitle;
	media_roles.mediaData.resources[0].uri = enc_fpath;
	var track_roles = {
		path: "localfile:folder01/track01.mp3",
		title: "track01.mp3",
		mediaData:
		{
			resources:
				[
					{
						"mimeType": "audio/mpeg",
						"uri": "file:///folder01/track01.mp3"
					}

				]
		}
	};
	var enc_apath = encodeURIComponent(streaming_page.getFirstAudioPath(songsdata.rows));
	var enc_atitle = encodeURIComponent(streaming_page.getFirstAudioTitle(songsdata.rows));
	track_roles.path = enc_apath;
	track_roles.title = enc_atitle;
	track_roles.mediaData.resources[0].uri = enc_apath;
	var vparams = '{"control":"play","trackRoles":' + JSON.stringify(track_roles) +
		',"mediaRoles":' + JSON.stringify(media_roles) +
		',"type":"none","index":"0","version":null}';
	var url = location.origin + "/api/setData?path=/player/control&roles=activate&value=" + vparams;
	var playrequest = new XMLHttpRequest();
	playrequest.onload = function () {
		log("playSongs onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if ((obj != undefined) && (obj.error != undefined)) {
			var error_msg = "Error " + playrequest.status + " in playSongs: " +
				obj.error.message;
			alert(error_msg);
		} else {
			setTimeout(streamer.questionSong, 700);
		}
	}
	playrequest.onerror = function (evt) {
		log("playSongs one error responseText=", this.responseText);
	};
	playrequest.open('GET', url, true);
	playrequest.send();
}

streaming_page.getFirstAudioPath = function (rows_data) {
	var row_cnt = 0;
	while (row_cnt < rows_data.length) {
		if (rows_data[row_cnt][2] == "audio") {
			return rows_data[row_cnt][1];
		}
		row_cnt++;
	}
	return {};
}

streaming_page.getFirstAudioTitle = function (rows_data) {
	var audiopath = streaming_page.getFirstAudioPath(rows_data);
	var lastix = audiopath.lastIndexOf("/");
	return audiopath.substring(lastix + 1);
}

streaming_page.getFirstFolderPath = function (rows_data) {
	var audiopath = streaming_page.getFirstAudioPath(rows_data);
	var sublen = audiopath.lastIndexOf("/");
	return audiopath.substring(0, sublen);
}

streaming_page.getFirstFolderTitle = function (rows_data) {
	var folderpath = streaming_page.getFirstFolderPath(rows_data);
	var lastix = folderpath.lastIndexOf("/");
	return folderpath.substring(lastix + 1);
}

streaming_page.clearNowPlaying = function () {
	$get("#playing_artist").val("");
	$get("#playing_album").val("");
	$get("#playing_track").val("");
	$get("#playing_title").val("");
	$get("#playing_time").val("");
	$get("#playing_duration").val("");
	$get("#playing_stop").attr("disabled", true);
	$get("#playing_pause").attr("disabled", true);
	$get("#playing_previous").attr("disabled", true);
	$get("#playing_next").attr("disabled", true);
	$get("#play_art").attr("src", "");
}

streaming_page.clearProgress = function () {
	$get("#prog_played").attr("aria-valuenow", 0);
	$get("#prog_played").attr("aria-valuemax", 0);
	$get("#prog_played").attr("style", "width:0");
	$get("#prog_playing").attr("aria-valuenow", 0);
	$get("#prog_playing").attr("aria-valuemax", 0);
	$get("#prog_playing").attr("style", "width:0");
	$get("#prog_to_play").attr("aria-valuenow", 0);
	$get("#prog_to_play").attr("aria-valuemax", 0);
	$get("#prog_to_play").attr("style", "width:0");
}

streaming_page.update_UI_mute = function () {
	if (streaming_page.data.loaded) {
		var value = false;
		if (streaming_page.data.def_streaming_zone == 0) {
			value = streaming_page.data.zonem.mute_state;
		} else if (streaming_page.data.def_streaming_zone == 1) {
			value = streaming_page.data.zone2.mute_state;
		}
		$get("#playmode_mute_cb").prop("checked", value);
	}
}

streaming_page.update_UI_play_mode = function () {
	if (streaming_page.data.loaded) {
		$get("#playmode_s").val(streaming_page.data.play_mode);
	}
}

streaming_page.update_default_streaming_zone = function (value) {
	streaming_page.data.def_streaming_zone = value;
}

streaming_page.update_power = function (zone, value) {
	var spdata = streaming_page.data;
	var stfixed = streamer.fixed;
	if (zone == 1) {
		spdata.zonem.power = value;
		if (value == 0) {
			// Main Zone turns off
			if (main_zone_page.is_audio_streaming()) {
				if (streamer.pollId().length > 0) {
					streamer.unsubscribeFrom(streamer.pollId(), stfixed.allscribed);
				}
			}
		} else if (value == 1) {
			// Main Zone turns on
			if (main_zone_page.is_audio_streaming()) {
				if ((spdata.loaded || main_zone_page.data.loaded) &&
					(streamer.pollId().length > 0)) {
					streamer.subscribeTo(streamer.pollId(), stfixed.allscribed);
				}
			}
		}
	} else if (zone == 2) {
		spdata.zone2.power = value;
		if (value == 0) {
			// Zone 2 turns off
			if (zone_2_page.is_audio_streaming()) {
				if (streamer.pollId().length > 0) {
					streamer.unsubscribeFrom(streamer.pollId(), stfixed.allscribed);
				}
			}
		} else if (value == 1) {
			// Zone 2 turns on
			if (zone_2_page.is_audio_streaming()) {
				if ((spdata.loaded || zone_2_page.data.loaded) &&
					(streamer.pollId().length > 0)) {
					streamer.subscribeTo(streamer.pollId(), stfixed.allscribed);
				}
			}
		}
	}
}

streaming_page.update_mute_state = function (zone, value) {
	if (zone === 1) {
		streaming_page.data.zonem.mute_state = value;
	} else if (zone === 2) {
		streaming_page.data.zone2.mute_state = value;
	}
	streaming_page.update_UI_mute();
}

streaming_page.update_play_mode = function (mode) {
	streaming_page.data.play_mode = mode;
	streaming_page.update_UI_play_mode();
}

streaming_page.fillNowPlaying = function (valueobj) {
	if (true) {
		if ((valueobj.trackRoles != undefined) &&
			(valueobj.trackRoles.mediaData != undefined) &&
			(valueobj.trackRoles.mediaData.metaData != undefined)) {
			var metadata = valueobj.trackRoles.mediaData.metaData;
			$get("#playing_artist").val(metadata.artist);
			$get("#playing_album").val(metadata.album);
			if (metadata.track != undefined) {
				$get("#playing_track").val(metadata.track);
			} else {
				$get("#playing_track").val(0);
			}
			$get("#playing_title").val(valueobj.trackRoles.title);
		}
		if ((valueobj.status != undefined) && (valueobj.status.duration != undefined)) {
			$get("#playing_duration").val((valueobj.status.duration / 1000).tohmMSS());
		}
		var nocontrols = valueobj.controls == undefined;
		$get("#playing_stop").attr("disabled", valueobj.state != "playing");
		$get("#playing_pause").attr("disabled", nocontrols || (valueobj.controls.pause != true));
		$get("#playing_previous").attr("disabled", nocontrols || (valueobj.controls.previous != true));
		$get("#playing_next").attr("disabled", nocontrols || (valueobj.controls.next_ != true));
		if ((valueobj.controls != undefined) && (valueobj.controls.playMode != undefined)) {
			var pm = valueobj.controls.playMode;
			streaming_page.xallowPlayMode("shuffle", pm.shuffle, "Shuffle");
			streaming_page.xallowPlayMode("repeatOne", pm.repeatOne, "Repeat One");
			streaming_page.xallowPlayMode("shuffleRepeatOne", pm.shuffleRepeatOne, "Shuffle Repeat One");
			streaming_page.xallowPlayMode("repeatAll", pm.repeatAll, "Repeat All");
			streaming_page.xallowPlayMode("shuffleRepeatAll", pm.shuffleRepeatAll, "Shuffle Repeat All");
		}
		if (valueobj.trackRoles.icon != undefined) {
			$get("#play_art").attr("src", valueobj.trackRoles.icon);
		} else {
			$get("#play_art").attr("src", location.origin + "/img/nocoverart.png");
		}
	}
}

streaming_page.xallowPlayMode = function (valuestr, ballow, en_text) {
	var qform = '#playmode_s option[value="@"]';
	var opts = qform.replace("@", valuestr);
	var ln = $get(opts).length;
	if (($get(opts).length > 0) && !ballow) {
		$get(opts).remove();
	}
	if (($get(opts).length == 0) && ballow) {
		var optform = '<option value="@">@</option>';
		$get("#playmode_s").append(optform.replace("@", valuestr)
			.replace("@", TR(en_text)));
	}
}

streaming_page.fillProgressLimit = function (valueobj) {
	if (true) {
		// assuming valueobj.trackRoles.type == "audio" or similar
		if ((valueobj.status != undefined) &&
			(valueobj.status.duration != undefined) &&
			(valueobj.status.duration > 0)) {
			streaming_page.data.duration_ms = valueobj.status.duration;
			var maxdursec = Math.ceil(valueobj.status.duration / 1000);
			$get("#prog_played").attr("aria-valuemax", maxdursec);
			$get("#prog_playing").attr("aria-valuemax", maxdursec);
			$get("#prog_to_play").attr("aria-valuemax", maxdursec);
		} else {
			// Initialize to negative ten minutes to indicate adaptive display
			streaming_page.data.duration_ms = -600000;
			$get("#prog_played").attr("aria-valuemax", 600);
			$get("#prog_playing").attr("aria-valuemax", 600);
			$get("#prog_to_play").attr("aria-valuemax", 600);
		}
	}
}

streaming_page.updateProgress = function (msplayed) {
	var currentsec = Math.floor(msplayed / 1000);
	$get("#playing_time").val(currentsec.tohmMSS());
	if (streaming_page.data.duration_ms > 0) {
		// defined duration
		var dursec = Math.ceil(streaming_page.data.duration_ms / 1000);
		var percent = Math.floor(100 * msplayed / streaming_page.data.duration_ms);
		$get("#prog_played").attr("aria-valuenow", currentsec);
		$get("#prog_playing").attr("aria-valuenow", 1);
		$get("#prog_to_play").attr("aria-valuenow", dursec - 1 - currentsec);
		$get("#prog_played").attr("style", "width:" + percent + "%");
		$get("#prog_playing").attr("style", "width:1%");
		$get("#prog_to_play").attr("style", "width:" + (99 - percent) + "%");
	} else if (streaming_page.data.duration_ms < 0) {
		// no defined duration
		if (streaming_page.data.duration_ms == -600000) {
			dursec = -streaming_page.data.duration_ms / 1000;
			percent = Math.floor(100 * msplayed / -streaming_page.data.duration_ms);
			$get("#prog_played").attr("aria-valuenow", currentsec);
			$get("#prog_playing").attr("aria-valuenow", 1);
			$get("#prog_to_play").attr("aria-valuenow", dursec - 1 - currentsec);
			$get("#prog_played").attr("style", "width:" + percent + "%");
			$get("#prog_playing").attr("style", "width:1%");
			$get("#prog_to_play").attr("style", "width:" + (99 - percent) + "%");
		}
	}
}

var streaming_plate = {}

streaming_plate.data = {
	loaded: false,
	cycle_delay: 1000,
	z1power: 0,
	z2power: 0,
	play_mode: "normal",
	now_artist: "",
	now_album: "",
	now_title: "",
	duration_ms: 0,
	now_show: 0,
	now_cycle: []
};

streaming_plate.load_plate = function () {
	$get("#small_now_panel").show();
	streaming_plate.data.loaded = true;
	$get("#snpp_sr_mode_s").parent().hide();

	streamer.starter();

	streaming_plate.update_UI_play_mode();
	streaming_plate.showNowPlaying();
	turnOnListeners();
	setTimeout(streamer.questionSong, 200);

	function turnOnListeners() {
		$get("#snpp_sr_mode_s").on("change", function () {
			var pmcommand = '{"type":"playerPlayMode","playerPlayMode":"_"}'.replace("_", this.value);
			streamer.modeSetting(pmcommand);
		});
		$get("#snpp_stop_b").on("click", function () {
			streamer.turnMonitorOff();
			streamer.playControl(streamer.fixed.cstop);
		});
		$get("#snpp_previous_b").on("click", function () {
			streamer.turnMonitorOff();
			streamer.playControl(streamer.fixed.cprevious);
			setTimeout(streamer.questionSong, 700);
		});
		$get("#snpp_play_b").on("click", function () {
			// Keep monitor running while paused
			streamer.playControl(streamer.fixed.cpause);
		});
		$get("#snpp_pause_b").on("click", function () {
			// Keep monitor running while paused
			streamer.playControl(streamer.fixed.cpause);//to do "play" ?
		});
		$get("#snpp_next_b").on("click", function () {
			streamer.turnMonitorOff();
			streamer.playControl(streamer.fixed.cnext);
			setTimeout(streamer.questionSong, 700);
		});
		// Progress bar
		$get("#snnp_played").on("click", function (e) {
			var here = e.offsetX;
			var maximum = $get("#snpp_played").parent().width();
			log("snpp_played click " + here + " of " + maximum);
		});
		$get("#snpp_to_play").on("click", function (e) {
			var played = $get("#snpp_played").width();
			var playing = $get("#snpp_playing").width();
			var here = e.offsetX;
			var maximum = $get("#snpp_to_play").parent().width();
			log("snpp_to_play click " + played + " + " + playing + " + " + here + " of " + maximum);
		});
	}
}

streaming_plate.unload_plate = function () {
	streaming_plate.data.now_cycle = [];
	$get("#small_now_panel").hide();
	streaming_plate.data.loaded = false;

	$get("#snpp_sr_mode_s").off("change");
	$get("#snpp_stop_b").off("click");
	$get("#snpp_previous_b").off("click");
	$get("#snpp_play_b").off("click");
	$get("#snpp_pause_b").off("click");
	$get("#snpp_next_b").off("click");

	$get("#snpp_played").off("click");
	$get("#snpp_to_play").off("click");
}

streaming_plate.xable_control_states = function (songstate, vcontrols) {
	var anypower = streaming_plate.data.z1power || streaming_plate.data.z2power;
	var bprev = (vcontrols != undefined) && (vcontrols.previous == true);
	var bnext = (vcontrols != undefined) && (vcontrols.next_ == true);
	var bshrepopts = (vcontrols != undefined) && (vcontrols.playMode != undefined);
	if (songstate == "stopped") {
		$get("#snpp_nostop_b").show();
		$get("#snpp_stop_b").hide();
		$get("#snpp_noprev_b").show();
		$get("#snpp_previous_b").hide();
		$get("#snpp_noplay_b").show();
		$get("#snpp_play_b").hide();
		$get("#snpp_nopause_b").hide();
		$get("#snpp_pause_b").hide();
		$get("#snpp_nonext_b").show();
		$get("#snpp_next_b").hide();
	} else if ((songstate == "paused") || (songstate == "playing")) {
		if (anypower) {
			$get("#snpp_stop_b").show();
			$get("#snpp_nostop_b").hide();
		} else {
			$get("#snpp_stop_b").hide();
			$get("#snpp_nostop_b").show();
		}
		if (anypower && bprev) {
			$get("#snpp_noprev_b").hide();
			$get("#snpp_previous_b").show();
		} else {
			$get("#snpp_previous_b").hide();
			$get("#snpp_noprev_b").show();
		}
		$get("#snpp_noplay_b").hide();
		$get("#snpp_nopause_b").hide();
		if (songstate == "playing") {
			$get("#snpp_play_b").hide();
			$get("#snpp_pause_b").show();
		} else {
			$get("#snpp_pause_b").hide();
			$get("#snpp_play_b").show();
		}
		if (anypower && bnext) {
			$get("#snpp_nonext_b").hide();
			$get("#snpp_next_b").show();
		} else {
			$get("#snpp_next_b").hide();
			$get("#snpp_nonext_b").show();
		}
	} else if (songstate == "transitioning") {
		$get("#snpp_nostop_b").hide();
		$get("#snpp_stop_b").show();
		$get("#snpp_noprev_b").show();
		$get("#snpp_previous_b").hide();
		$get("#snpp_noplay_b").show();
		$get("#snpp_play_b").hide();
		$get("#snpp_nopause_b").hide();
		$get("#snpp_pause_b").hide();
		$get("#snpp_nonext_b").show();
		$get("#snpp_next_b").hide();
	} else if (songstate == "nopower") {
		$get("#snpp_nostop_b").show();
		$get("#snpp_stop_b").hide();
		$get("#snpp_noprev_b").show();
		$get("#snpp_previous_b").hide();
		$get("#snpp_noplay_b").show();
		$get("#snpp_play_b").hide();
		$get("#snpp_nopause_b").hide();
		$get("#snpp_pause_b").hide();
		$get("#snpp_nonext_b").show();
		$get("#snpp_next_b").hide();
	}
	if (bshrepopts) {
		$get("#snpp_sr_mode_s").attr("disabled", Object.keys(vcontrols.playMode).length < 1);
	}
}

streaming_plate.update_power = function (zone, value) {
	var stdata = streaming_plate.data;
	if (zone == 1) {
		stdata.z1power = value;
	} else if (zone == 2) {
		stdata.z2power = value;
	}
	if (stdata.z1power || stdata.z2power) {
		streaming_plate.xable_control_states("playing");// To do apply state
	} else {
		streaming_plate.xable_control_states("nopower");
	}
}

streaming_plate.update_UI_play_mode = function () {
	if (streaming_plate.data.loaded) {
		$get("#snpp_sr_mode_s").parent().show();
		$get("#snpp_sr_mode_s").attr("disabled", false);
		$get("#snpp_sr_mode_s").val(streaming_plate.data.play_mode);
	}
}
streaming_plate.update_play_mode = function (mode) {
	streaming_plate.data.play_mode = mode;
	streaming_plate.update_UI_play_mode();
}

streaming_plate.clearNowPlaying = function () {
	var stdata = streaming_plate.data;
	stdata.now_artist = "";
	stdata.now_album = "";
	stdata.now_title = "";
	stdata.duration_ms = 0;
	streaming_plate.data.now_cycle = [];
	$get("#snpp_title_l").text("");
	$get("#snpp_time_l").text("");
	$get("#snpp_art").attr("src", "");
	$get("#snpp_sr_mode_s").attr("disabled", true);
}

streaming_plate.clearProgress = function () {
	$get("#snpp_played").attr("aria-valuenow", 0);
	$get("#snpp_played").attr("aria-valuemax", 0);
	$get("#snpp_played").attr("style", "width:0");
	$get("#snpp_playing").attr("aria-valuenow", 0);
	$get("#snpp_playing").attr("aria-valuemax", 0);
	$get("#snpp_playing").attr("style", "width:0");
	$get("#snpp_to_play").attr("aria-valuenow", 0);
	$get("#snpp_to_play").attr("aria-valuemax", 0);
	$get("#snpp_to_play").attr("style", "width:0");
}

streaming_plate.fillNowPlaying = function (valueobj) {
	var stdata = streaming_plate.data;
	stdata.now_artist = "";
	stdata.now_album = "";
	stdata.now_title = "";
	stdata.duration_ms = 0;
	if (true) {
		if ((valueobj.trackRoles != undefined) &&
			(valueobj.trackRoles.mediaData != undefined) &&
			(valueobj.trackRoles.mediaData.metaData != undefined)) {
			var metadata = valueobj.trackRoles.mediaData.metaData;
			if (metadata.artist != undefined) {
				stdata.now_artist = metadata.artist;
			}
			if (metadata.album != undefined) {
				stdata.now_album = metadata.album;
			}
		}
		if (valueobj.trackRoles.title != undefined) {
			stdata.now_title = valueobj.trackRoles.title;
		}
		if (valueobj.trackRoles.icon != undefined) {
			$get("#snpp_art").attr("src", valueobj.trackRoles.icon);
		} else {
			$get("#snpp_art").attr("src", location.origin + "/img/nocoverart.png");
		}
		if ((valueobj.status != undefined) && (valueobj.status.duration != undefined)) {
			stdata.duration_ms = valueobj.status.duration;
		}
	}

	// Delayed start to allow cycler to expire
	stdata.now_cycle = [];
	setTimeout(streaming_plate.showNowPlaying, stdata.cycle_delay);
}

streaming_plate.fillProgressLimit = function (valueobj) {
	if (true) {
		// assuming valueobj.trackRoles.type == "audio" or similar
		if ((valueobj.status != undefined) &&
			(valueobj.status.duration != undefined) &&
			(valueobj.status.duration > 0)) {
			streaming_plate.data.duration_ms = valueobj.status.duration;
			var maxdursec = Math.ceil(valueobj.status.duration / 1000);
			$get("#snpp_played").attr("aria-valuemax", maxdursec);
			$get("#snpp_playing").attr("aria-valuemax", maxdursec);
			$get("#snpp_to_play").attr("aria-valuemax", maxdursec);
		} else {
			// Initialize to negative ten minutes to indicate adaptive display
			streaming_plate.data.duration_ms = -600000;
			$get("#snpp_played").attr("aria-valuemax", 600);
			$get("#snpp_playing").attr("aria-valuemax", 600);
			$get("#snpp_to_play").attr("aria-valuemax", 600);
		}
	}
}

streaming_plate.showNowPlaying = function () {
	var box_wide = Math.ceil($get("#snpp_title_l").width());
	if (box_wide < 1) {
		return;
	}

	var stdata = streaming_plate.data;
	var bchange = false;
	var aral = stdata.now_artist + " " + stdata.now_album;
	var aralt = (aral + " " + stdata.now_title).trim();
	if (aralt.length < 1) {
		return;
	}

	var c = document.getElementById("canfit");
	var ctx = c.getContext("2d");
	var aralt_wide = Math.ceil(ctx.measureText(aralt).width);
	if ((aralt_wide <= box_wide) ||
		((stdata.now_artist.length == 0) && (stdata.now_album.length == 0))) {
		// Show artist, album and title combined
		if ((stdata.now_cycle.length != 1) || (stdata.now_cycle[0] != aralt)) {
			stdata.now_cycle = [];
			stdata.now_cycle.push(aralt);
			bchange = true;
		}
	} else {
		var aral_wide = Math.ceil(ctx.measureText(aral.trim()).width);
		var title_wide = Math.ceil(ctx.measureText(stdata.now_title).width);
		if (((aral_wide <= box_wide) && (title_wide <= box_wide)) ||
			((stdata.now_artist.length == 0) || (stdata.now_album.length == 0))) {
			// Show album and artist, show title
			if ((stdata.now_cycle.length != 2) ||
				(stdata.now_cycle[0] != aral) ||
				(stdata.now_cycle[1] != stdata.now_title)) {
				stdata.now_cycle = [];
				stdata.now_cycle.push(aral);
				stdata.now_cycle.push(stdata.now_title);
				bchange = true;
			}
		} else {
			// Show artist, show album, show title
			if ((stdata.now_cycle.length != 3) ||
				(stdata.now_cycle[0] != stdata.now_artist) ||
				(stdata.now_cycle[1] != stdata.now_album) ||
				(stdata.now_cycle[2] != stdata.now_title)) {
				stdata.now_cycle = [];
				stdata.now_cycle.push(stdata.now_artist);
				stdata.now_cycle.push(stdata.now_album);
				stdata.now_cycle.push(stdata.now_title);
				bchange = true;
			}
		}
	}
	if (bchange) {
		stdata.now_show = 0;
		if (stdata.now_show < stdata.now_cycle.length) {
			$get("#snpp_title_l").text(stdata.now_cycle[stdata.now_show]);
		}
		if (stdata.now_cycle.length > 1) {
			setTimeout(streaming_plate.cycleNowPlaying, stdata.cycle_delay);
		}
	}
}

streaming_plate.cycleNowPlaying = function () {
	var stdata = streaming_plate.data;
	stdata.now_show++;
	if (stdata.now_show >= stdata.now_cycle.length) {
		stdata.now_show = 0;
	}
	if (stdata.loaded && (stdata.now_cycle.length > 0)) {
		log("cycle " + stdata.now_show + " " + diag_time_ms());
		$get("#snpp_title_l").text(stdata.now_cycle[stdata.now_show]);
		setTimeout(streaming_plate.cycleNowPlaying, stdata.cycle_delay);
	}
}

streaming_plate.updateProgress = function (msplayed) {
	var currentsec = Math.floor(msplayed / 1000);
	if (streaming_plate.data.duration_ms > 0) {
		// defined duration
		var dursec = Math.ceil(streaming_plate.data.duration_ms / 1000);
		$get("#snpp_time_l").text(currentsec.tohmMSS() + " /" + dursec.tohmMSS());
		var percent = Math.floor(100 * msplayed / streaming_plate.data.duration_ms);
		$get("#snpp_played").attr("aria-valuenow", currentsec);
		$get("#snpp_playing").attr("aria-valuenow", 1);
		$get("#snpp_to_play").attr("aria-valuenow", dursec - 1 - currentsec);
		$get("#snpp_played").attr("style", "width:" + percent + "%");
		$get("#snpp_playing").attr("style", "width:1%");
		$get("#snpp_to_play").attr("style", "width:" + (99 - percent) + "%");
	} else if (streaming_plate.data.duration_ms < 0) {
		// no defined duration
		$get("#snpp_time_l").text(currentsec.tohmMSS());
		if (streaming_plate.data.duration_ms == -600000) {
			dursec = -streaming_plate.data.duration_ms / 1000;
			percent = Math.floor(100 * msplayed / -streaming_plate.data.duration_ms);
			$get("#snpp_played").attr("aria-valuenow", currentsec);
			$get("#snpp_playing").attr("aria-valuenow", 1);
			$get("#snpp_to_play").attr("aria-valuenow", dursec - 1 - currentsec);
			$get("#snpp_played").attr("style", "width:" + percent + "%");
			$get("#snpp_playing").attr("style", "width:1%");
			$get("#snpp_to_play").attr("style", "width:" + (99 - percent) + "%");
		}
	}
}

function diag_time_ms() {
	var date = new Date();
	var fseconds = date.getTime() / 1000;
	return "time=" + fseconds.toFixed(3);
}

var general_page = {}

const language_map = { "en": 0, "zh": 1, "de": 2, "es": 3, "fr": 4, "it": 5 };

general_page.cached_power = 0;

general_page.init = {
	distance_units: 0
}

general_page.data = {
	distance_units: 0,
	cec_control: false
}

general_page.update_UI_model_name = function (devmodel) {
	var muteText = "";
	if ((devmodel === MODEL.MRX540) || (devmodel === MODEL.MRX740) ||
		(devmodel === MODEL.MRX1140)) {
		muteText = TR("Analog 5");
	} else if ((devmodel === MODEL.AVM70) || (devmodel === MODEL.AVM90)) {
		muteText = "Phono (MM)";
	}
	if (muteText.length > 0) {
		if ($get("#mute_line_out_select option").length <= 18) {
			$get("#mute_line_out_select").append(new Option(muteText, "18"));
		}
		if ($get("#mute_digital_out_select option").length <= 18) {
			$get("#mute_digital_out_select").append(new Option(muteText, "18"));
		}
	}
}

general_page.load_page = function () {
	$get("#general_page").fadeIn();

	general_page.update_UI_friendly_name(device.friendly_name);

	turn_on_listeners();
	function turn_on_listeners() {

		$get("#device_name_input").on("keydown", function (e) {
			var ENTER_KEY = 13; // trigger key
			if (e.which === ENTER_KEY)
				$get("#device_name_apply_button").click();
			return is_valid_key_code_for_string_input(e.which, e.shiftKey, e.altKey);
		});
		$get("#device_name_input").on("focus", function () {
			$get(this).removeClass("error-field");
		});
		$get("#device_name_apply_button").on("click", function () {
			var value = $get("#device_name_input").val();
			if (value.length > 0) {
				value = value.pad_with_spaces(16);
				send_and_query_command(COMMAND.GCDN, value);
			} else {
				$get("#device_name_input").addClass("error-field");
				$get('#modal').on('hidden.bs.modal', function () {
					$get("#device_name_input").focus();
				});
				show_modal(TR("Error"), TL("warn_no_devname"));
			}
		});
		$get("#language_select").on("change", function () {
			var code = parseInt(this.selectedIndex);
			var opt = this.children[this.selectedIndex];
			var lang = this.children[this.selectedIndex].value;
			send_and_query_command(COMMAND.GCL, code);
			/*if (cookies.set_language(lang)) {
			location.reload();
			}*/
		});
		$get("#distance_units_select").on("change", function () {
			general_page.data.distance_units = this.value;
			log("on distance_units_select: " + general_page.data.distance_units);
			send_and_query_command(COMMAND.GCDU, general_page.data.distance_units);
		});
		$get("#master_volume_scale_select").on("change", function () {
			var value = this.value;
			log("on master_volume_scale_select: " + value);
			send_and_query_command(COMMAND.GCMVS, value);
		});
		$get("#standby_hdmi_bypass_select").on("change", function () {
			var value = this.value;
			log("on standby_hdmi_bypass_select: " + value);
			send_and_query_command(COMMAND.GCSHDMIB, value);
		});
		$get("#standby_hdmi_bypass_sw").on("click", function () {
			var aattr = $get("#standby_hdmi_bypass_sw").attr("aria-checked");
			log("standby_hdmi_bypass_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCSHDMIB, value);
		});
		$get("#favour_current_streaming_input_sw").on("click", function () {
			var aattr = $get("#favour_current_streaming_input_sw").attr("aria-checked");
			log("favour_current_streaming_input_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCFCSI, value);
		});
		$get("#connect_standby_sw").on("click", function () {
			var aattr = $get("#connect_standby_sw").attr("aria-checked");
			log("connect_standby_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCCSTBY, value);
		});

		$get("#no_signal_power_off_select").on("change", function () {
			var value = this.value;
			log("on no_signal_power_off_select: " + value);
			send_and_query_command(COMMAND.GCNSPO, value);
		});
		$get("#front_panel_displayed_info_select").on("change", function () {
			var value = this.value;
			log("on front_panel_displayed_info_select: " + value);
			send_and_query_command(COMMAND.GCFPDI, value);
		});
		$get("#front_panel_brightness_range").on("change", function () {
			var value = parseInt(this.value);
			log("on front_panel_brightness_range: " + value);
			general_page.update_UI_front_panel_brightness(value);
			send_and_query_command(COMMAND.GCFPB, value);
			var wake_up_brightness = $get("#wake_up_brightness_range").val();
			if (wake_up_brightness < value) {
				general_page.update_UI_wake_up_brightness(value);
				send_and_query_command(COMMAND.GCWUB, value);
			}
		});
		$get("#wake_up_brightness_range").on("change", function () {
			var value = parseInt(this.value);
			var front_panel_brightness = $get("#front_panel_brightness_range").val();
			if (value >= front_panel_brightness) {
				log("on wake_up_brightness_range: " + value);
				general_page.update_UI_wake_up_brightness(value);
				send_and_query_command(COMMAND.GCWUB, value);
			} else {
				send_query_commands([COMMAND.GCWUB]);
			}
		});
		$get("#on_screen_info_display_select").on("change", function () {
			var value = this.value;
			log("on on_screen_info_display_select: " + value);
			send_and_query_command(COMMAND.GCOSID, value);
		});
		$get("#on_screen_info_zone_select").on("change", function () {
			var value = this.value;
			log("on on_screen_info_zone_select: " + value);
			send_and_query_command(COMMAND.GCOSIZ, value);
		});

		$get("#main_power_on_volume_range").on("change", function () {
			var value = parseFloat(this.value);
			log("change main_power_on_volume_range: " + value);
			send_and_query_command(COMMAND.GCMPOV, value);
		});
		$get("#main_max_volume_range").on("change", function () {
			var value = parseFloat(this.value);
			log("change main_max_volume_range: " + value);
			send_and_query_command(COMMAND.GCMMV, value);
		});
		$get("#main_power_on_input_select").on("change", function () {
			var value = this.value;
			log("change main_power_on_input_select: " + value);
			send_and_query_command(COMMAND.GCMPOI, value);
		});
		$get("#default_streaming_zone_sw").on("click", function () {
			var aattr = $get("#default_streaming_zone_sw").attr("aria-checked");
			log("default_streaming_zone_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCDSZ, value);
		});

		$get("#zone_2_power_on_volume_range").on("change", function () {
			var value = parseFloat(this.value);
			log("change zone_2_power_on_volume_range: " + value);
			send_and_query_command(COMMAND.GCZ2POV, value);
		});
		$get("#zone_2_max_volume_range").on("change", function () {
			var value = parseFloat(this.value);
			log("change zone_2_max_volume_range: " + value);
			send_and_query_command(COMMAND.GCZ2MMV, value);
		});
		$get("#zone_2_power_on_input_select").on("change", function () {
			var value = this.value;
			log("change zone_2_power_on_input_select: " + value);
			send_and_query_command(COMMAND.GCZ2POI, value);
		});
		$get("#zone_2_default_streaming_zone_sw").on("click", function () {
			var aattr = $get("#zone_2_default_streaming_zone_sw").attr("aria-checked");
			log("zone_2_default_streaming_zone_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCDSZ, value);
		});

		$get("#mute_level_range").on("change", function () {
			var value = parseFloat(this.value);
			log("on mute_level_range: " + value);
			general_page.update_UI_mute_level(value);
			send_and_query_command(COMMAND.GCML, value);
		});
		$get("#mute_line_out_select").on("change", function () {
			var value = this.value;
			log("on mute_line_out_select: " + value);
			send_and_query_command(COMMAND.GCMLOWS, value);
		});
		$get("#mute_digital_out_select").on("change", function () {
			var value = this.value;
			log("on mute_digital_out_select: " + value);
			send_and_query_command(COMMAND.GCMDOWS, value);
		});
		$get("#headphone_mutes_main_outputs_sw").on("click", function () {
			var aattr = $get("#headphone_mutes_main_outputs_sw").attr("aria-checked");
			log("on headphone_mutes_main_outputs_sw: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCHMMO, value);
		});

		$get("#cec_control_sw").on("click", function () {
			var aattr = $get("#cec_control_sw").attr("aria-checked");
			log("on cec_control_sw: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCCECC, value);
		});
		$get("#cec_power_off_control_sw").on("click", function () {
			var aattr = $get("#cec_power_off_control_sw").attr("aria-checked");
			log("on cec_power_off_control_sw: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCCPFC, value);
		});
		$get("#hdmi_audio_to_tv_sw").on("click", function () {
			var aattr = $get("#hdmi_audio_to_tv_sw").attr("aria-checked");
			log("on hdmi_audio_to_tv_sw: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCCTVA, value);
		});

		$get("#general_page .switch_track").on("keydown", function (e) {
			return handle_switch_keydown($get(this), e.which);
		});
		$get("#general_page .minus").on("click", function () {
			handle_range_minus_button_click($get(this));
		});
		$get("#general_page .plus").on("click", function () {
			handle_range_plus_button_click($get(this));
		});
	}
}

general_page.unload_page = function () {
	$get("#general_page").hide();

	turn_off_listeners();
	function turn_off_listeners() {
		$get("#device_name_input").off("keydown");
		$get("#device_name_input").off("focus");
		$get("#device_name_apply_button").off("click");
		$get("#language_select").off("change");
		$get("#distance_units_select").off("change");
		$get("#master_volume_scale_select").off("change");
		$get("#standby_hdmi_bypass_select").off("change");
		$get("#standby_hdmi_bypass_sw").off("click");
		$get("#favour_current_streaming_input_sw").off("click");
		$get("#connect_standby_sw").off("click");

		$get("#no_signal_power_off_select").off("change");
		$get("#front_panel_displayed_info_select").off("change");
		$get("#front_panel_brightness_range").off("change");
		$get("#wake_up_brightness_range").off("change");
		$get("#on_screen_info_display_select").off("change");
		$get("#on_screen_info_zone_select").off("change");

		$get("#main_power_on_volume_range").off("change");
		$get("#main_max_volume_range").off("change");
		$get("#main_power_on_input_select").off("change");
		$get("#default_streaming_zone_sw").off("click");

		$get("#zone_2_power_on_volume_range").off("change");
		$get("#zone_2_max_volume_range").off("change");
		$get("#zone_2_power_on_input_select").off("change");
		$get("#zone_2_default_streaming_zone_sw").off("click");

		$get("#mute_level_range").off("change");
		$get("#mute_line_out_select").off("change");
		$get("#mute_digital_out_select").off("change");
		$get("#headphone_mutes_main_outputs_sw").off("click");

		$get("#cec_control_sw").off("click");
		$get("#cec_power_off_control_sw").off("click");
		$get("#hdmi_audio_to_tv_sw").off("click");

		$get("#general_page .switch_track").off("keydown");
		$get("#general_page .minus").off("click");
		$get("#general_page .plus").off("click");
	}
}

general_page.enable_controls = function (which) {
	general_page.cached_power = which;
	const all_xable_ids = [
		"#device_name_input", "#device_name_apply_button", "#language_select",
		"#distance_units_select", "#master_volume_scale_select",
		"#favour_current_streaming_input_sw",
		"#connect_standby_sw", "#no_signal_power_off_select",
		"#front_panel_displayed_info_select", "#front_panel_brightness_range",
		"#wake_up_brightness_range", "#on_screen_info_display_select",
		"#on_screen_info_zone_select",
		"#main_power_on_volume_range", "#main_max_volume_range",
		"#main_power_on_input_select", "default_streaming_zone_sw",
		"#zone_2_power_on_volume_range", "#zone_2_max_volume_range",
		"#zone_2_power_on_input_select", "#zone_2_default_streaming_zone_sw",
		"#mute_level_range", "#mute_line_out_select", "#mute_digital_out_select",
		"#headphone_mutes_main_outputs_sw", "#cec_control_sw",
		"#general_page .switch_track", "#general_page .minus",
		"#general_page .plus"
	];
	for (var idix = 0; idix < all_xable_ids.length; idix++) {
		$get(all_xable_ids[idix]).attr("disabled", !which);
	}

	var classm = "#general_page .minus";
	enable_class(classm, which);
	var classp = "#general_page .plus";
	enable_class(classp, which);
	var classv = "#general_page .range_value";
	enable_class(classv, which);

	general_page.update_cec_states();
}

// Update UI
general_page.update_UI_friendly_name = function (name) {
	$get("#device_name_input").val(name.trim());
}
general_page.update_UI_languages = function (language) {
	$get("#language_select option").removeAttr("selected", "selected");
	$get("#language_select option")[language].selected = true;

	var newlang = language_codes[language];
	if (newlang != current_language) {
		if (cookies.set_language(newlang)) {
			location.reload();
		}
	}
}
general_page.update_UI_distance_units = function (distance) {
	general_page.data.distance_units = distance;
	$get("#distance_units_select").val(distance);
}
general_page.update_UI_master_volume_scale = function (value) {
	$get("#master_volume_scale_select").val(value);
}
general_page.update_UI_standby_hdmi_bypass = function (value) {
	$get("#standby_hdmi_bypass_select").val(value);
	$get("#standby_hdmi_bypass_sw").attr("aria-checked", (value == 1) ? true : false);
}
general_page.update_UI_favour_current_streaming_input = function (bvalue) {
	$get("#favour_current_streaming_input_sw").attr("aria-checked", bvalue ? true : false);
}
general_page.update_UI_connected_standby = function (bvalue) {
	$get("#connect_standby_sw").attr("aria-checked", bvalue ? true : false);
}

general_page.update_UI_front_panel_displayed_info = function (value) {
	$get("#front_panel_displayed_info_select").val(value);
}
general_page.update_UI_front_panel_brightness = function (value) {
	var range = $get("#front_panel_brightness_range");
	range.val(value);
	update_UI_range_text(range, value, "%", 0);
}
general_page.update_UI_wake_up_brightness = function (value) {
	var range = $get("#wake_up_brightness_range");
	range.val(value);
	update_UI_range_text(range, value, "%", 0);
}
general_page.update_UI_no_signal_power_off = function (value) {
	$get("#no_signal_power_off_select").val(value);
}

general_page.update_UI_on_screen_info_display = function (value) {
	$get("#on_screen_info_display_select").val(value);
}

general_page.update_UI_on_screen_info_zone = function (value) {
	$get("#on_screen_info_zone_select").val(value);
}

// value is -90.5 to max volume
// display is Last Used, -90 to +10
general_page.update_main_power_on_volume = function (value) {
	var range = $get("#main_power_on_volume_range");
	range.val(value);
	if (value < -90) {
		range.parent().find(".range_value").text(TR("Last Used"));
	} else {
		update_UI_range_text(range, value, "dB");
	}
}

general_page.update_main_max_volume = function (value) {
	var range = $get("#main_max_volume_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");

	var power_on_volume_range = $get("#main_power_on_volume_range");
	var power_on_volume_range_value = parseFloat(power_on_volume_range.val());
	power_on_volume_range.attr("max", value);
	if (value < power_on_volume_range_value) {
		power_on_volume_range.val(value).change();
		general_page.update_main_power_on_volume(value);
	} else {
		general_page.update_main_power_on_volume(power_on_volume_range_value);
	}
}

general_page.update_main_power_on_input = function (value) {
	$get("#main_power_on_input_select").val(value);
}

general_page.update_zone2_power_on_input = function (value) {
	$get("#zone_2_power_on_input_select").val(value);
}

general_page.update_mainz_default_streaming_zone = function (bvalue) {
	$get("#default_streaming_zone_sw").attr("aria-checked", bvalue ? true : false);
}

general_page.update_zone2_default_streaming_zone = function (bvalue) {
	$get("#zone_2_default_streaming_zone_sw").attr("aria-checked", bvalue ? true : false);
}

// Modify controls because an input was added or inserted
general_page.add_input = function (input_num) {
	if (input_num < 1 || input_num > inputs_page.maximum_number_of_inputs) {
		return;
	}

	var comparepon = "#main_power_on_input_select option[value='" + input_num + "']";
	if ($get(comparepon).val() != input_num) {
		$get('#main_power_on_input_select').append($get('<option>', main_zone_page.input_model(input_num)));
	} else {
		var imscan;
		var pioptions = $get("#main_power_on_input_select option");
		var index = pioptions.length - 1;
		while ((index >= 0) &&
			((imscan = pioptions.eq(index)).val() >= input_num)) {
			imscan.val(parseInt(imscan.val()) + 1);
			index--;
		}

		// Insert one option
		var nextcur = "#main_power_on_input_select option[value='" + (input_num + 1) + "']";
		$get(option_fragment(input_num)).insertBefore($get(nextcur));
	}

	comparepon = "#zone_2_power_on_input_select option[value='" + input_num + "']";
	if ($get(comparepon).val() != input_num) {
		$get('#zone_2_power_on_input_select').append($get('<option>', zone_2_page.input_model(input_num)));
	} else {
		pioptions = $get("#zone_2_power_on_input_select option");
		index = pioptions.length - 1;
		while ((index >= 0) &&
			((imscan = pioptions.eq(index)).val() >= input_num)) {
			imscan.val(parseInt(imscan.val()) + 1);
			index--;
		}

		// Insert one option
		nextcur = "#zone_2_power_on_input_select option[value='" + (input_num + 1) + "']";
		$get(option_fragment(input_num)).insertBefore($get(nextcur));
	}

	if (!device.use_zone2) {
		return;
	}

	function option_fragment(v) {
		var frag = "<option value='" + v + "'>" + TR("Input %1", [v]) + "</option>";
		return frag;
	}
}

general_page.update_inputs = function (num_items) {
	var input_value;

	// value should be 0..num_items
	var selectEl = $get('#main_power_on_input_select');
	var curlength = $get('#main_power_on_input_select option').length;
	if (curlength > 1 + num_items) {
		// Remove items
		while (curlength > 1 + num_items) {
			selectEl.find("option[value=" + (curlength - 1) + "]").remove();
			curlength--;
		}
	} else if (curlength < 1 + num_items) {
		// Add items
		for (input_value = curlength; input_value <= num_items; input_value++) {
			selectEl.append($get('<option>', {
				value: input_value,
				text: TR("Input %1", [input_value])
			}));
		}
	}

	if (!device.use_zone2) {
		return;
	}

	selectEl = $get('#zone_2_power_on_input_select');
	curlength = $get('#zone_2_power_on_input_select option').length;
	if (curlength > 1 + num_items) {
		// Remove items
		while (curlength > 1 + num_items) {
			curlength--;
			selectEl.find("option[value=" + curlength + "]").remove();
		}
	} else if (curlength < 1 + num_items) {
		// Add items
		for (input_value = curlength; input_value <= num_items; input_value++) {
			selectEl.append($get('<option>', {
				value: input_value,
				text: TR("Input %1", [input_value])
			}));
		}
	}
}

general_page.remove_input = function (index) {
	var input_value;
	var optv;

	$get("#main_power_on_input_select option[value='" + index + "']").remove();

	// value should be 0..highest
	var selectEl = $get('#main_power_on_input_select');
	var curlength = $get('#main_power_on_input_select option').length - 1;
	for (input_value = index; input_value <= curlength; input_value++) {
		optv = selectEl.find("option[value=" + (input_value + 1) + "]");
		if (optv.length > 0) {
			optv.attr("value", input_value);
		}
	}

	if (!device.use_zone2) {
		return;
	}

	$get("#zone_2_power_on_input_select option[value='" + index + "']").remove();

	// value should be 0..highest
	selectEl = $get('#zone_2_power_on_input_select');
	curlength = $get('#zone_2_power_on_input_select option').length - 1;
	for (input_value = index; input_value <= curlength; input_value++) {
		optv = selectEl.find("option[value=" + (input_value + 1) + "]");
		if (optv.length > 0) {
			optv.attr("value", input_value);
		}
	}
}

general_page.update_main_input_option_name = function (index, name) {
	var trimmed_name = name.trim();
	$get("#main_power_on_input_select option[value='" + index + "']").text(trimmed_name);
	$get("#zone_2_power_on_input_select option[value='" + index + "']").text(trimmed_name);
}

// value is -90.5 to max volume
// display is Last Used, -90 to +10
general_page.update_zone2_power_on_volume = function (value) {
	var range = $get("#zone_2_power_on_volume_range");
	range.val(value);
	if (value < -90) {
		range.parent().find(".range_value").text(TR("Last Used"));
	} else {
		update_UI_range_text(range, value, "dB");
	}
}

general_page.update_zone2_max_volume = function (value) {
	var range = $get("#zone_2_max_volume_range");
	range.val(value);
	update_UI_range_text(range, value, "dB");

	var power_on_volume_range = $get("#zone_2_power_on_volume_range");
	var power_on_volume_range_value = parseFloat(power_on_volume_range.val());
	power_on_volume_range.attr("max", value);
	if (value < power_on_volume_range_value) {
		power_on_volume_range.val(value).change();
		general_page.update_zone2_power_on_volume(value);
	} else {
		general_page.update_zone2_power_on_volume(power_on_volume_range_value);
	}
}

// value is 0 to 10
// display Silent, -55 to -5
general_page.update_UI_mute_level = function (value) {
	var range = $get("#mute_level_range");
	range.val(value);
	if (value < 1) {
		range.parent().find(".range_value").text(TR("Silent"));
	} else {
		update_UI_range_text(range, value * 5 - 55, "dB", 0);
	}
}
general_page.update_UI_mute_line_out = function (value) {
	$get("#mute_line_out_select").val(value);
}
general_page.update_UI_mute_digital_out = function (value) {
	$get("#mute_digital_out_select").val(value);
}
general_page.update_UI_headphone_mutes_main_outputs = function (bvalue) {
	$get("#headphone_mutes_main_outputs_sw").attr("aria-checked", bvalue ? true : false);
}

general_page.update_UI_cec_control = function (bvalue) {
	general_page.data.cec_control = bvalue;
	$get("#cec_control_sw").attr("aria-checked", bvalue ? true : false);
	general_page.update_cec_states();
}
general_page.update_UI_cec_power_off_control = function (bvalue) {
	$get("#cec_power_off_control_sw").attr("aria-checked", bvalue ? true : false);
}
general_page.update_UI_hdmi_audio_to_tv = function (bvalue) {
	$get("#hdmi_audio_to_tv_sw").attr("aria-checked", bvalue ? true : false);
}
general_page.update_cec_states = function () {
	var use_poweroff = general_page.cached_power && general_page.data.cec_control;
	var use_hdmi = general_page.cached_power && !general_page.data.cec_control;
	$get("#cec_power_off_control_sw").attr("disabled", !use_poweroff);
	$get("#hdmi_audio_to_tv_sw").attr("disabled", !use_hdmi);
	if (device.is_mrxx40avm79) {
		$get("#standby_hdmi_bypass_select").attr("disabled", !use_hdmi);
	} else if (device.model == MODEL.MRXSLM) {
		$get("#standby_hdmi_bypass_sw").attr("disabled", !general_page.cached_power);
	}
}



var speaker_page = {}

const profile_back_cmds = [COMMAND.SSSP_9, COMMAND.BMSP_9,
COMMAND.LPSP_C, COMMAND.LCSP_C, COMMAND.LPSP_D, COMMAND.LCSP_D];
const profile_height1_cmds = [COMMAND.SSSP_A, COMMAND.BMSP_A,
COMMAND.LPSP_E, COMMAND.LCSP_E, COMMAND.LPSP_F, COMMAND.LCSP_F];

speaker_page.current_profile_index = 0;
speaker_page.cached_power = 0;

speaker_page.data = {
	surround_choice: 0, // also for amp surround
	height_choice: 0,
	amp_front_choice: 0,
	amp_back_choice: 0,
	amp_ht1_choice: 0,
	amp_ht2_choice: 0,
	dist_units: 0,
	height_1_off: false,
	height_2_off: false,
	height_3_off: false,
	height_1_choice: 8,
	height_2_choice: 5,
	height_3_choice: 3,
	profile_1: {
		name: "Profile 1",
		calibration_level: 0,
		test_noise: false,

		subwoofers_enabled: 0,
		subwoofer_distance: 0,
		subwoofer_2_distance: 0,
		subwoofer_3_distance: 0,
		subwoofer_4_distance: 0,
		subwoofer_level: 0,
		subwoofer_2_level: 0,
		subwoofer_3_level: 0,
		subwoofer_4_level: 0,
		subwoofer_phase_frequency: 80,
		subwoofer_phase: 0,
		subwoofer_polarity: 0,
		subwoofer_2_phase_frequency: 80,
		subwoofer_2_phase: 0,
		subwoofer_2_polarity: 0,
		subwoofer_3_phase_frequency: 80,
		subwoofer_3_phase: 0,
		subwoofer_3_polarity: 0,
		subwoofer_4_phase_frequency: 80,
		subwoofer_4_phase: 0,
		subwoofer_4_polarity: 0,
		subwoofer_lfe_lowpass_filter: 120,
		subwoofer_front_crossover: 0,
		super_sub_fronts: 0,
		subwoofer_front_wide_crossover: 0,
		subwoofer_center_crossover: 0,
		subwoofer_surround_crossover: 0,
		subwoofer_back_crossover: 0,
		subwoofer_height_1_crossover: 0,
		subwoofer_height_2_crossover: 0,
		subwoofer_height_3_crossover: 0,

		front_left_distance: 0,
		front_left_level: 0,
		front_right_distance: 0,
		front_right_level: 0,

		front_wide_enabled: false,
		front_wide_left_distance: 0,
		front_wide_left_level: 0,
		front_wide_right_distance: 0,
		front_wide_right_level: 0,

		center_enable: false,
		center_distance: 0,
		center_level: 0,

		surround_enable: false,
		surround_left_distance: 0,
		surround_left_level: 0,
		surround_right_distance: 0,
		surround_right_level: 0,

		back_enable: false,
		back_left_distance: 0,
		back_left_level: 0,
		back_right_distance: 0,
		back_right_level: 0,

		heights_1_enable: false,
		heights_1_left_distance: 0,
		heights_1_left_level: 0,
		heights_1_right_distance: 0,
		heights_1_right_level: 0,

		heights_2_enable: false,
		heights_2_left_distance: 0,
		heights_2_left_level: 0,
		heights_2_right_distance: 0,
		heights_2_right_level: 0,

		heights_3_enable: false,
		heights_3_left_distance: 0,
		heights_3_left_level: 0,
		heights_3_right_distance: 0,
		heights_3_right_level: 0
	},
	profile_2: {
		name: "Profile 2",
		calibration_level: 0,
		test_noise: false,

		subwoofers_enabled: 0,
		subwoofer_distance: 0,
		subwoofer_2_distance: 0,
		subwoofer_3_distance: 0,
		subwoofer_4_distance: 0,
		subwoofer_level: 0,
		subwoofer_2_level: 0,
		subwoofer_3_level: 0,
		subwoofer_4_level: 0,
		subwoofer_phase_frequency: 80,
		subwoofer_phase: 0,
		subwoofer_polarity: 0,
		subwoofer_2_phase_frequency: 80,
		subwoofer_2_phase: 0,
		subwoofer_2_polarity: 0,
		subwoofer_3_phase_frequency: 80,
		subwoofer_3_phase: 0,
		subwoofer_3_polarity: 0,
		subwoofer_4_phase_frequency: 80,
		subwoofer_4_phase: 0,
		subwoofer_4_polarity: 0,
		subwoofer_lfe_lowpass_filter: 120,
		subwoofer_front_crossover: 0,
		super_sub_fronts: 0,
		subwoofer_front_wide_crossover: 0,
		subwoofer_center_crossover: 0,
		subwoofer_surround_crossover: 0,
		subwoofer_back_crossover: 0,
		subwoofer_height_1_crossover: 0,
		subwoofer_height_2_crossover: 0,
		subwoofer_height_3_crossover: 0,

		front_left_distance: 0,
		front_left_level: 0,
		front_right_distance: 0,
		front_right_level: 0,

		front_wide_enabled: 0,
		front_wide_left_distance: 0,
		front_wide_left_level: 0,
		front_wide_right_distance: 0,
		front_wide_right_level: 0,

		center_enable: false,
		center_distance: 0,
		center_level: 0,

		surround_enable: false,
		surround_left_distance: 0,
		surround_left_level: 0,
		surround_right_distance: 0,
		surround_right_level: 0,

		back_enable: false,
		back_left_distance: 0,
		back_left_level: 0,
		back_right_distance: 0,
		back_right_level: 0,

		heights_1_enable: false,
		heights_1_left_distance: 0,
		heights_1_left_level: 0,
		heights_1_right_distance: 0,
		heights_1_right_level: 0,

		heights_2_enable: false,
		heights_2_left_distance: 0,
		heights_2_left_level: 0,
		heights_2_right_distance: 0,
		heights_2_right_level: 0,

		heights_3_enable: false,
		heights_3_left_distance: 0,
		heights_3_left_level: 0,
		heights_3_right_distance: 0,
		heights_3_right_level: 0
	},
	profile_3: {
		name: "Profile 3",
		calibration_level: 0,
		test_noise: false,

		subwoofers_enabled: 0,
		subwoofer_distance: 0,
		subwoofer_2_distance: 0,
		subwoofer_3_distance: 0,
		subwoofer_4_distance: 0,
		subwoofer_level: 0,
		subwoofer_2_level: 0,
		subwoofer_3_level: 0,
		subwoofer_4_level: 0,
		subwoofer_phase_frequency: 80,
		subwoofer_phase: 0,
		subwoofer_polarity: 0,
		subwoofer_2_phase_frequency: 80,
		subwoofer_2_phase: 0,
		subwoofer_2_polarity: 0,
		subwoofer_3_phase_frequency: 80,
		subwoofer_3_phase: 0,
		subwoofer_3_polarity: 0,
		subwoofer_4_phase_frequency: 80,
		subwoofer_4_phase: 0,
		subwoofer_4_polarity: 0,
		subwoofer_lfe_lowpass_filter: 120,
		subwoofer_front_crossover: 0,
		super_sub_fronts: 0,
		subwoofer_front_wide_crossover: 0,
		subwoofer_center_crossover: 0,
		subwoofer_surround_crossover: 0,
		subwoofer_back_crossover: 0,
		subwoofer_height_1_crossover: 0,
		subwoofer_height_2_crossover: 0,
		subwoofer_height_3_crossover: 0,

		front_left_distance: 0,
		front_left_level: 0,
		front_right_distance: 0,
		front_right_level: 0,

		front_wide_enabled: 0,
		front_wide_left_distance: 0,
		front_wide_left_level: 0,
		front_wide_right_distance: 0,
		front_wide_right_level: 0,

		center_enable: false,
		center_distance: 0,
		center_level: 0,

		surround_enable: false,
		surround_left_distance: 0,
		surround_left_level: 0,
		surround_right_distance: 0,
		surround_right_level: 0,

		back_enable: false,
		back_left_distance: 0,
		back_left_level: 0,
		back_right_distance: 0,
		back_right_level: 0,

		heights_1_enable: false,
		heights_1_left_distance: 0,
		heights_1_left_level: 0,
		heights_1_right_distance: 0,
		heights_1_right_level: 0,

		heights_2_enable: false,
		heights_2_left_distance: 0,
		heights_2_left_level: 0,
		heights_2_right_distance: 0,
		heights_2_right_level: 0,

		heights_3_enable: false,
		heights_3_left_distance: 0,
		heights_3_left_level: 0,
		heights_3_right_distance: 0,
		heights_3_right_level: 0
	},
	profile_4: {
		name: "Profile 4",
		calibration_level: 0,
		test_noise: false,

		subwoofers_enabled: 0,
		subwoofer_distance: 0,
		subwoofer_2_distance: 0,
		subwoofer_3_distance: 0,
		subwoofer_4_distance: 0,
		subwoofer_level: 0,
		subwoofer_2_level: 0,
		subwoofer_3_level: 0,
		subwoofer_4_level: 0,
		subwoofer_phase_frequency: 80,
		subwoofer_phase: 0,
		subwoofer_polarity: 0,
		subwoofer_2_phase_frequency: 80,
		subwoofer_2_phase: 0,
		subwoofer_2_polarity: 0,
		subwoofer_3_phase_frequency: 80,
		subwoofer_3_phase: 0,
		subwoofer_3_polarity: 0,
		subwoofer_4_phase_frequency: 80,
		subwoofer_4_phase: 0,
		subwoofer_4_polarity: 0,
		subwoofer_lfe_lowpass_filter: 120,
		subwoofer_front_crossover: 0,
		super_sub_fronts: 0,
		subwoofer_front_wide_crossover: 0,
		subwoofer_center_crossover: 0,
		subwoofer_surround_crossover: 0,
		subwoofer_back_crossover: 0,
		subwoofer_height_1_crossover: 0,
		subwoofer_height_2_crossover: 0,
		subwoofer_height_3_crossover: 0,

		front_left_distance: 0,
		front_left_level: 0,
		front_right_distance: 0,
		front_right_level: 0,

		front_wide_enabled: 0,
		front_wide_left_distance: 0,
		front_wide_left_level: 0,
		front_wide_right_distance: 0,
		front_wide_right_level: 0,

		center_enable: false,
		center_distance: 0,
		center_level: 0,

		surround_enable: false,
		surround_left_distance: 0,
		surround_left_level: 0,
		surround_right_distance: 0,
		surround_right_level: 0,

		back_enable: false,
		back_left_distance: 0,
		back_left_level: 0,
		back_right_distance: 0,
		back_right_level: 0,

		heights_1_enable: false,
		heights_1_left_distance: 0,
		heights_1_left_level: 0,
		heights_1_right_distance: 0,
		heights_1_right_level: 0,

		heights_2_enable: false,
		heights_2_left_distance: 0,
		heights_2_left_level: 0,
		heights_2_right_distance: 0,
		heights_2_right_level: 0,

		heights_3_enable: false,
		heights_3_left_distance: 0,
		heights_3_left_level: 0,
		heights_3_right_distance: 0,
		heights_3_right_level: 0
	}
};

speaker_page.get_profile = function (index) {
	if (index < 1 || index > 4) {
		logE("get_profile: wrong index " + index);
	} else {
		if (index === 1) {
			return speaker_page.data.profile_1;
		} else if (index === 2) {
			return speaker_page.data.profile_2;
		} else if (index === 3) {
			return speaker_page.data.profile_3;
		} else if (index === 4) {
			return speaker_page.data.profile_4;
		}
	}
}

speaker_page.get_profile_index = function (id) {
	if (id === "profile_1") {
		return 1;
	} else if (id === "profile_2") {
		return 2;
	} else if (id === "profile_3") {
		return 3;
	} else if (id === "profile_4") {
		return 4;
	} else {
		return 0;
	}
}

speaker_page.get_panel_commands = function (commands) {
	var panel_commands = [];
	for (var prof_no = 1; prof_no <= 4; prof_no++) {
		for (var cmdix = 0; cmdix < commands.length; cmdix++) {
			var pccommand = get_profile_command(commands[cmdix], prof_no);
			panel_commands = panel_commands.concat(pccommand);
		}
	}
	return panel_commands;
}

speaker_page.get_control_commands = function (command) {
	var control_commands = [];
	for (var prof_no = 1; prof_no <= 4; prof_no++) {
		var pccommand = get_profile_command(command, prof_no);
		control_commands = control_commands.concat(pccommand);
	}
	return control_commands;
}

speaker_page.load_page = function () {

	$get("#speaker_page").fadeIn();

	var page_param = get_url_param("page");
	if (!page_param)
		page_param = cookies.get_profile_selection();
	else
		cookies.set_profile_selection(page_param);

	speaker_page.current_profile_index = speaker_page.get_profile_index(page_param);
	set_profile_menu_names();
	set_profile_menu_active(page_param);
	load_page_profile(page_param);

	function get_url_param(key) {
		var results = new RegExp('[?&]' + key + '=([^&#]*)').exec(window.location.hash);
		return (results !== null) ? results[1] || 0 : false;
	}

	function set_profile_menu_names() {
		$get("#profile_menu_profile_1_text").text(speaker_page.data.profile_1.name);
		$get("#profile_menu_profile_2_text").text(speaker_page.data.profile_2.name);
		$get("#profile_menu_profile_3_text").text(speaker_page.data.profile_3.name);
		$get("#profile_menu_profile_4_text").text(speaker_page.data.profile_4.name);
	}

	function load_page_profile(id) {
		unload_global_page();
		unload_profile_page();
		if (id == "global") {
			load_global_page();
		} else {
			speaker_page.load_profile_page(speaker_page.current_profile_index);
		}
	}

	function load_global_page() {
		$get("#global_view").fadeIn();
		speaker_page.update_UI_placements();
		turn_on_global_page_listeners();

		function turn_on_global_page_listeners() {
			$get("#height_select").on("change", function () {
				var value = this.value;
				log("on height_select: " + value);
				if (value == "1") {
					// When changing to Back set Height 1 to Off
					send_and_query_command(COMMAND.SS3DH1, 8);
				}
				send_and_query_command(COMMAND.SS3DHL, value);
				if (value == "1") {
					send_query_commands(speaker_page.get_panel_commands(profile_back_cmds));
				} else {
					send_query_commands(speaker_page.get_panel_commands(profile_height1_cmds));
				}
			});
			$get("#height_1_select").on("change", function () {
				var value = this.value;
				var was_off = speaker_page.data.height_1_off;
				log("on height_1_select: " + value);
				send_and_query_command(COMMAND.SS3DH1, value);
				if (was_off || (value == "8")) {
					// Was or is Off
					send_query_commands(speaker_page.get_control_commands(COMMAND.SSSP_A));
				}
			});
			$get("#height_2_select").on("change", function () {
				var value = this.value;
				var was_off = speaker_page.data.height_2_off;
				log("on height_2_select: " + value);
				send_and_query_command(COMMAND.SS3DH2, value);
				if (was_off || (value == "5")) {
					send_query_commands(speaker_page.get_control_commands(COMMAND.SSSP_B));
				}
			});
			$get("#height_3_select").on("change", function () {
				var value = this.value;
				var was_off = speaker_page.data.height_3_off;
				log("on height_3_select: " + value);
				send_and_query_command(COMMAND.SS3DH3, value);
				if (was_off || (value == "3")) {
					send_query_commands(speaker_page.get_control_commands(COMMAND.SSSP_C));
				}
			});

			$get("#amp_matrixing_front_select").on("change", function () {
				var value = this.value;
				log("on amp_matrixing_front_select: " + value);
				speaker_page.update_UI_amp_matrixing_front(parseInt(value));
				send_and_query_command(COMMAND.SSAMF, value);
			});
			$get("#amp_matrixing_surrounds_select").on("change", function () {
				var value = this.value;
				log("on amp_matrixing_surrounds_select: " + value);
				speaker_page.update_UI_amp_matrixing_surrounds(parseInt(value));
				if ((device.model == MODEL.MRXSLM) && (parseInt(value) > 0)) {
					var cmds = speaker_page.get_control_commands(COMMAND.SSSP_8);
					for (var cnt = 0; cnt < cmds.length; cnt++) {
						send_and_query_command(cmds[cnt], "0");
					}
				}
				send_and_query_command(COMMAND.SSAMS, value);
			});
			$get("#amp_matrixing_back_select").on("change", function () {
				var value = this.value;
				log("on amp_matrixing_back_select: " + value);
				speaker_page.update_UI_amp_matrixing_back(parseInt(value));
				send_and_query_command(COMMAND.SSAMB, value);
			});
			$get("#amp_matrixing_height_1_select").on("change", function () {
				var value = this.value;
				log("on amp_matrixing_height_1_select: " + value);
				speaker_page.update_UI_amp_matrixing_height_1(parseInt(value));
				send_and_query_command(COMMAND.SSAMH1, value);
			});
			$get("#amp_matrixing_height_2_select").on("change", function () {
				var value = this.value;
				log("on amp_matrixing_height_2_select: " + value);
				speaker_page.update_UI_amp_matrixing_height_2(parseInt(value));
				send_and_query_command(COMMAND.SSAMH2, value);
			});
		}
	}

	function unload_global_page() {
		$get("#global_view").hide();
		turn_off_global_page_listeners();
		function turn_off_global_page_listeners() {
			$get("#height_select").off("change");
			$get("#height_1_select").off("change");
			$get("#height_2_select").off("change");
			$get("#height_3_select").off("change");

			$get("#amp_matrixing_front_select").off("change");
			$get("#amp_matrixing_surrounds_select").off("change");
			$get("#amp_matrixing_back_select").off("change");
			$get("#amp_matrixing_height_1_select").off("change");
			$get("#amp_matrixing_height_2_select").off("change");
		}
	}

	function unload_profile_page() {
		$get("#profile_view").hide();

		turn_off_profile_page_listeners();
		function turn_off_profile_page_listeners() {

			$get("#profile_name_input").off("keydown");
			$get("#profile_name_input").off("focus");
			$get("#profile_name_apply_button").off("click");
			$get("#calibration_range").off("change");
			$get("#test_noise_sw").off("click");

			$get("#front_wide_sw").off("click");
			$get("#center_sw").off("click");
			$get("#surrounds_sw").off("click");
			$get("#backs_sw").off("click");
			$get("#height_1_sw").off("click");
			$get("#height_2_sw").off("click");
			$get("#height_3_sw").off("click");

			$get("#subwoofer_sw").off("click");
			$get("#subwoofers_select").off("change");
			$get("#phase_frequency_1_range").off("change");
			$get("#phase_frequency_2_range").off("change");
			$get("#phase_frequency_3_range").off("change");
			$get("#phase_frequency_4_range").off("change");
			$get("#phase_1_range").off("change");
			$get("#phase_2_range").off("change");
			$get("#phase_3_range").off("change");
			$get("#phase_4_range").off("change");
			$get("#normal_1_radio_button").off("keydown");
			$get("#normal_1_radio_button").off("click");
			$get("#normal_2_radio_button").off("keydown");
			$get("#normal_2_radio_button").off("click");
			$get("#normal_3_radio_button").off("keydown");
			$get("#normal_3_radio_button").off("click");
			$get("#normal_4_radio_button").off("keydown");
			$get("#normal_4_radio_button").off("click");
			$get("#inverted_1_radio_button").off("keydown");
			$get("#inverted_1_radio_button").off("click");
			$get("#inverted_2_radio_button").off("keydown");
			$get("#inverted_2_radio_button").off("click");
			$get("#inverted_3_radio_button").off("keydown");
			$get("#inverted_3_radio_button").off("click");
			$get("#inverted_4_radio_button").off("keydown");
			$get("#inverted_4_radio_button").off("click");
			$get("#subwoofer_1_distance_range").off("change");
			$get("#subwoofer_2_distance_range").off("change");
			$get("#subwoofer_3_distance_range").off("change");
			$get("#subwoofer_4_distance_range").off("change");
			$get("#subwoofer_1_level_range").off("change");
			$get("#subwoofer_2_level_range").off("change");
			$get("#subwoofer_3_level_range").off("change");
			$get("#subwoofer_4_level_range").off("change");
			$get("#lfe_lowpass_filter_select").off("change");
			$get("#front_crossover_select").off("change");
			$get("#super_sub_fronts_sw").off("click");
			$get("#front_wide_crossover_select").off("change");
			$get("#center_crossover_select").off("change");
			$get("#surround_crossover_select").off("change");
			$get("#back_crossover_select").off("change");
			$get("#height_1_crossover_select").off("change");
			$get("#height_2_crossover_select").off("change");
			$get("#height_3_crossover_select").off("change");

			$get("#front_left_distance_range").off("change");
			$get("#front_left_level_range").off("change");
			$get("#front_right_distance_range").off("change");
			$get("#front_right_level_range").off("change");

			$get("#front_wide_left_distance_range").off("change");
			$get("#front_wide_left_level_range").off("change");
			$get("#front_wide_right_distance_range").off("change");
			$get("#front_wide_right_level_range").off("change");

			$get("#center_distance_range").off("change");
			$get("#center_level_range").off("change");

			$get("#surrounds_left_distance_range").off("change");
			$get("#surrounds_left_level_range").off("change");
			$get("#surrounds_right_distance_range").off("change");
			$get("#surrounds_right_level_range").off("change");

			$get("#back_left_distance_range").off("change");
			$get("#back_left_level_range").off("change");
			$get("#back_right_distance_range").off("change");
			$get("#back_right_level_range").off("change");

			$get("#height_1_left_distance_range").off("change");
			$get("#height_1_left_level_range").off("change");
			$get("#height_1_right_distance_range").off("change");
			$get("#height_1_right_level_range").off("change");

			$get("#height_2_left_distance_range").off("change");
			$get("#height_2_left_level_range").off("change");
			$get("#height_2_right_distance_range").off("change");
			$get("#height_2_right_level_range").off("change");

			$get("#height_3_left_distance_range").off("change");
			$get("#height_3_left_level_range").off("change");
			$get("#height_3_right_distance_range").off("change");
			$get("#height_3_right_level_range").off("change");

			$get("#speaker_page .switch_track").off("keydown");
			$get("#speaker_page .minus").off("click");
			$get("#speaker_page .plus").off("click");
		}
	}
}

speaker_page.load_profile_page = function (index) {
	if ((index >= 1) && (index <= 4)) {
		$get("#profile_view").fadeIn();
		load_profile_page_data(index, speaker_page.get_profile(index));
		speaker_page.update_distances(index);
		speaker_page.turn_on_profile_page_listeners(index);
		speaker_page.enable_controls(speaker_page.cached_power);
	}

	function load_profile_page_data(index, spdata) {
		speaker_page.update_UI_profile_name(index, spdata.name);
		speaker_page.update_UI_calibration_level(index, spdata.calibration_level);
		speaker_page.update_UI_test_noise_enable(index, spdata.test_noise);

		speaker_page.update_UI_subwoofers_enabled(index, spdata.subwoofers_enabled);
		speaker_page.update_UI_subwoofer_phase_frequency(index, spdata.subwoofer_phase_frequency, 1);
		speaker_page.update_UI_subwoofer_phase(index, spdata.subwoofer_phase, 1);
		speaker_page.update_UI_subwoofer_polarity(index, spdata.subwoofer_polarity, 1);
		speaker_page.update_UI_subwoofer_level(index, spdata.subwoofer_level, 1);
		speaker_page.update_UI_subwoofer_phase_frequency(index, spdata.subwoofer_2_phase_frequency, 2);
		speaker_page.update_UI_subwoofer_phase(index, spdata.subwoofer_2_phase, 2);
		speaker_page.update_UI_subwoofer_polarity(index, spdata.subwoofer_2_polarity, 2);
		speaker_page.update_UI_subwoofer_level(index, spdata.subwoofer_2_level, 2);
		speaker_page.update_UI_subwoofer_phase_frequency(index, spdata.subwoofer_3_phase_frequency, 3);
		speaker_page.update_UI_subwoofer_phase(index, spdata.subwoofer_3_phase, 3);
		speaker_page.update_UI_subwoofer_polarity(index, spdata.subwoofer_3_polarity, 3);
		speaker_page.update_UI_subwoofer_level(index, spdata.subwoofer_3_level, 3);
		speaker_page.update_UI_subwoofer_phase_frequency(index, spdata.subwoofer_4_phase_frequency, 4);
		speaker_page.update_UI_subwoofer_phase(index, spdata.subwoofer_4_phase, 4);
		speaker_page.update_UI_subwoofer_polarity(index, spdata.subwoofer_4_polarity, 4);
		speaker_page.update_UI_subwoofer_level(index, spdata.subwoofer_4_level, 4);

		speaker_page.update_UI_subwoofer_lpf_for_lfe(index, spdata.subwoofer_lfe_lowpass_filter);
		speaker_page.update_UI_subwoofer_front_crossover(index, spdata.subwoofer_front_crossover);
		speaker_page.update_UI_super_sub_fronts(index, spdata.super_sub_fronts);
		speaker_page.update_UI_subwoofer_front_wide_crossover(index, spdata.subwoofer_front_wide_crossover);
		speaker_page.update_UI_subwoofer_center_crossover(index, spdata.subwoofer_center_crossover);
		speaker_page.update_UI_subwoofer_surround_crossover(index, spdata.subwoofer_surround_crossover);
		speaker_page.update_UI_subwoofer_back_crossover(index, spdata.subwoofer_back_crossover);
		speaker_page.update_UI_subwoofer_height_1_crossover(index, spdata.subwoofer_height_1_crossover);
		speaker_page.update_UI_subwoofer_height_2_crossover(index, spdata.subwoofer_height_2_crossover);
		speaker_page.update_UI_subwoofer_height_3_crossover(index, spdata.subwoofer_height_3_crossover);

		speaker_page.update_UI_front_left_level(index, spdata.front_left_level);
		speaker_page.update_UI_front_right_level(index, spdata.front_right_level);

		speaker_page.update_UI_front_wide_enable(index, spdata.front_wide_enabled);
		speaker_page.update_UI_front_wide_left_level(index, spdata.front_wide_left_level);
		speaker_page.update_UI_front_wide_right_level(index, spdata.front_wide_right_level);

		speaker_page.update_UI_center_enable(index, spdata.center_enable);
		speaker_page.update_UI_center_level(index, spdata.center_level);

		speaker_page.update_UI_surrounds_enable(index, spdata.surround_enable);
		speaker_page.update_UI_surrounds_left_level(index, spdata.surround_left_level);
		speaker_page.update_UI_surrounds_right_level(index, spdata.surround_right_level);

		speaker_page.update_UI_backs_enable(index, spdata.back_enable);
		speaker_page.update_UI_backs_left_level(index, spdata.back_left_level);
		speaker_page.update_UI_backs_right_level(index, spdata.back_right_level);

		speaker_page.update_UI_heights_1_enable(index, spdata.heights_1_enable);
		speaker_page.update_UI_heights_1_left_level(index, spdata.heights_1_left_level);
		speaker_page.update_UI_heights_1_right_level(index, spdata.heights_1_right_level);

		speaker_page.update_UI_heights_2_enable(index, spdata.heights_2_enable);
		speaker_page.update_UI_heights_2_left_level(index, spdata.heights_2_left_level);
		speaker_page.update_UI_heights_2_right_level(index, spdata.heights_2_right_level);

		speaker_page.update_UI_heights_3_enable(index, spdata.heights_3_enable);
		speaker_page.update_UI_heights_3_left_level(index, spdata.heights_3_left_level);
		speaker_page.update_UI_heights_3_right_level(index, spdata.heights_3_right_level);
	}
}

speaker_page.update_distances = function (index) {
	// assuming valid profile index
	var spdata = speaker_page.get_profile(index);
	speaker_page.update_UI_subwoofer_distance(index, spdata.subwoofer_distance, 1);
	speaker_page.update_UI_subwoofer_distance(index, spdata.subwoofer_2_distance, 2);
	speaker_page.update_UI_subwoofer_distance(index, spdata.subwoofer_3_distance, 3);
	speaker_page.update_UI_subwoofer_distance(index, spdata.subwoofer_4_distance, 4);

	speaker_page.update_UI_front_left_distance(index, spdata.front_left_distance);
	speaker_page.update_UI_front_right_distance(index, spdata.front_right_distance);
	speaker_page.update_UI_front_wide_left_distance(index, spdata.front_wide_left_distance);
	speaker_page.update_UI_front_wide_right_distance(index, spdata.front_wide_right_distance);
	speaker_page.update_UI_center_distance(index, spdata.center_distance);
	speaker_page.update_UI_surrounds_left_distance(index, spdata.surround_left_distance);
	speaker_page.update_UI_surrounds_right_distance(index, spdata.surround_right_distance);
	speaker_page.update_UI_backs_left_distance(index, spdata.back_left_distance);
	speaker_page.update_UI_backs_right_distance(index, spdata.back_right_distance);
	speaker_page.update_UI_heights_1_left_distance(index, spdata.heights_1_left_distance);
	speaker_page.update_UI_heights_1_right_distance(index, spdata.heights_1_right_distance);
	speaker_page.update_UI_heights_2_left_distance(index, spdata.heights_2_left_distance);
	speaker_page.update_UI_heights_2_right_distance(index, spdata.heights_2_right_distance);
	speaker_page.update_UI_heights_3_left_distance(index, spdata.heights_3_left_distance);
	speaker_page.update_UI_heights_3_right_distance(index, spdata.heights_3_right_distance);
}

speaker_page.turn_on_profile_page_listeners = function (index) {
	var keys = {
		TAB: 9,
		ENTER: 13,
		SPACE: 32,
		END: 35,
		HOME: 36,
		LEFT: 37,
		UP: 38,
		RIGHT: 39,
		DOWN: 40
	};

	$get("#profile_name_input").on("keydown", function (e) {
		if (e.which === keys.ENTER)
			$get("#profile_name_apply_button").click();
		return is_valid_key_code_for_string_input(e.which, e.shiftKey, e.altKey);
	});
	$get("#profile_name_input").on("focus", function () {
		$get("#profile_name_input").removeClass("error-field");
	});
	$get("#profile_name_apply_button").on("click", function () {
		var value = $get("#profile_name_input").val();
		if (value.length > 0) {
			speaker_page.update_UI_profile_name(index, value);
			value = value.pad_with_spaces(16);
			send_and_query_command(get_profile_command(COMMAND.SSSP_0, index), value);
		} else {
			$get("#profile_name_input").addClass("error-field");
			show_modal(TR("Error"), TL("warn_no_profname"));
		}
	});
	$get("#calibration_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on calibration_range: " + value);
		speaker_page.update_UI_calibration_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_0, index), value);
	});
	$get("#test_noise_sw").on("click", function () {
		var aattr = $get("#test_noise_sw").attr("aria-checked");
		log("test_noise_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_test_noise_enable(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_K, index), value);
	});
	$get("#test_noise_sw").prop("disabled",
		!speaker_page.cached_power || !speaker_page.enable_test_noise(index));

	$get("#subwoofer_sw").on("click", function () {
		var aattr = $get("#subwoofer_sw").attr("aria-checked");
		log("subwoofer_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		send_and_query_command(get_profile_command(COMMAND.SSSP_1, index), value);
	});
	$get("#subwoofers_select").on("change", function () {
		var value = parseInt(this.value);
		log("change subwoofers_enabled: " + value);
		send_and_query_command(get_profile_command(COMMAND.SSSP_1, index), value);
	});
	$get("#phase_frequency_1_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_frequency_1_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_10, index), value);
	});
	$get("#phase_frequency_2_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_frequency_2_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_20, index), value);
	});
	$get("#phase_frequency_3_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_frequency_3_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_30, index), value);
	});
	$get("#phase_frequency_4_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_frequency_4_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_40, index), value);
	});
	$get("#phase_1_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_1_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_11, index), value);
	});
	$get("#phase_2_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_2_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_21, index), value);
	});
	$get("#phase_3_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_3_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_31, index), value);
	});
	$get("#phase_4_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change sub phase_4_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_41, index), value);
	});
	$get("#normal_1_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#normal_1_radio_button").click();
		} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN) || (e.which == keys.END)) {
			$get("#inverted_1_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#normal_2_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#normal_2_radio_button").click();
		} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN) || (e.which == keys.END)) {
			$get("#inverted_2_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#normal_3_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#normal_3_radio_button").click();
		} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN) || (e.which == keys.END)) {
			$get("#inverted_3_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#normal_4_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#normal_4_radio_button").click();
		} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN) || (e.which == keys.END)) {
			$get("#inverted_4_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#normal_1_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 0;
			log("change normal_1_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_12, index), value);
		}
	});
	$get("#normal_2_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 0;
			log("change normal_2_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_22, index), value);
		}
	});
	$get("#normal_3_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 0;
			log("change normal_3_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_32, index), value);
		}
	});
	$get("#normal_4_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 0;
			log("change normal_4_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_42, index), value);
		}
	});
	$get("#inverted_1_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#inverted_1_radio_button").click();
		} else if ((e.which == keys.LEFT) || (e.which == keys.UP) || (e.which == keys.HOME)) {
			$get("#normal_1_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#inverted_2_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#inverted_2_radio_button").click();
		} else if ((e.which == keys.LEFT) || (e.which == keys.UP) || (e.which == keys.HOME)) {
			$get("#normal_2_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#inverted_3_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#inverted_3_radio_button").click();
		} else if ((e.which == keys.LEFT) || (e.which == keys.UP) || (e.which == keys.HOME)) {
			$get("#normal_3_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#inverted_4_radio_button").on("keydown", function (e) {
		if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
			$get("#inverted_4_radio_button").click();
		} else if ((e.which == keys.LEFT) || (e.which == keys.UP) || (e.which == keys.HOME)) {
			$get("#normal_4_radio_button").focus();
		}
		e.stopPropagation();
		return e.which == keys.TAB;
	});
	$get("#inverted_1_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 1;
			log("change normal_1_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_12, index), value);
		}
	});
	$get("#inverted_2_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 1;
			log("change normal_2_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_22, index), value);
		}
	});
	$get("#inverted_3_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 1;
			log("change normal_3_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_32, index), value);
		}
	});
	$get("#inverted_4_radio_button").on("click", function () {
		if (!$get(this).hasClass("disabled")) {
			var value = 1;
			log("change normal_4_radio_button: " + value);
			send_and_query_command(get_profile_command(COMMAND.BMSP_42, index), value);
		}
	});
	$get("#subwoofer_1_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_1_distance_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_1, index), value);
	});
	$get("#subwoofer_2_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_2_distance_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_2, index), value);
	});
	$get("#subwoofer_3_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_3_distance_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_3, index), value);
	});
	$get("#subwoofer_4_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_4_distance_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_4, index), value);
	});
	$get("#subwoofer_1_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_1_level_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_1, index), value);
	});
	$get("#subwoofer_2_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_2_level_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_2, index), value);
	});
	$get("#subwoofer_3_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_3_level_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_3, index), value);
	});
	$get("#subwoofer_4_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("change subwoofer_4_level_range: " + value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_4, index), value);
	});
	$get("#lfe_lowpass_filter_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on lfe_lowpass_filter_select: " + value);
		speaker_page.update_UI_subwoofer_lpf_for_lfe(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_0, index), value);
	});
	$get("#front_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_front_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_5, index), value);
	});
	$get("#super_sub_fronts_sw").on("click", function () {
		var aattr = $get("#super_sub_fronts_sw").attr("aria-checked");
		log("super_sub_fronts_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_super_sub_fronts(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_D, index), value);
	});
	$get("#front_wide_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_wide_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_front_wide_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_6, index), value);
	});
	$get("#center_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on center_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_center_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_7, index), value);
	});
	$get("#surround_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on surround_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_surround_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_8, index), value);
	});
	$get("#back_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on back_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_back_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_9, index), value);
	});
	$get("#height_1_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_1_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_height_1_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_A, index), value);
	});
	$get("#height_2_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_2_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_height_2_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_B, index), value);
	});
	$get("#height_3_crossover_select").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_3_crossover_select: " + value);
		speaker_page.update_UI_subwoofer_height_3_crossover(index, value);
		send_and_query_command(get_profile_command(COMMAND.BMSP_C, index), value);
	});

	$get("#front_left_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_left_distance_range: " + value);
		speaker_page.update_UI_front_left_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_5, index), value);
	});
	$get("#front_left_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_left_level_range: " + value);
		speaker_page.update_UI_front_left_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_5, index), value);
	});
	$get("#front_right_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_right_distance_range: " + value);
		speaker_page.update_UI_front_right_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_6, index), value);
	});
	$get("#front_right_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_right_level_range: " + value);
		speaker_page.update_UI_front_right_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_6, index), value);
	});

	$get("#front_wide_sw").on("click", function () {
		var aattr = $get("#front_wide_sw").attr("aria-checked");
		log("front_wide_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_front_wide_enable(index, value);
		send_and_query_command(get_profile_command(COMMAND.SSSP_6, index), value);
	});
	$get("#front_wide_left_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_wide_left_distance_range: " + value);
		speaker_page.update_UI_front_wide_left_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_7, index), value);
	});
	$get("#front_wide_left_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_wide_left_level_range: " + value);
		speaker_page.update_UI_front_wide_left_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_7, index), value);
	});
	$get("#front_wide_right_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_wide_right_distance_range: " + value);
		speaker_page.update_UI_front_wide_right_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_8, index), value);
	});
	$get("#front_wide_right_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on front_wide_right_level_range: " + value);
		speaker_page.update_UI_front_wide_right_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_8, index), value);
	});

	$get("#center_sw").on("click", function () {
		var aattr = $get("#center_sw").attr("aria-checked");
		log("center_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_center_enable(index, value);
		send_and_query_command(get_profile_command(COMMAND.SSSP_7, index), value);
	});
	$get("#center_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on center_distance_range: " + value);
		speaker_page.update_UI_center_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_9, index), value);
	});
	$get("#center_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on center_level_range: " + value);
		speaker_page.update_UI_center_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_9, index), value);
	});

	$get("#surrounds_sw").on("click", function () {
		var aattr = $get("#surrounds_sw").attr("aria-checked");
		log("surrounds_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		if (DEMO_MODE) {
			if (value == 0 && device.model == MODEL.MRX540) {
				// Emulate Surrounds changed to disabled when set Backs to disabled
				// mrx 540 replies SSSPp60, SSSPp90, SSSPpB0, SSSPpC0, SSSPp80
				send_and_query_command(get_profile_command(COMMAND.SSSP_9, index), 0);
			}
		}
		send_and_query_command(get_profile_command(COMMAND.SSSP_8, index), value);
	});
	$get("#surrounds_left_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on surrounds_left_distance_range: " + value);
		speaker_page.update_UI_surrounds_left_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_A, index), value);
	});
	$get("#surrounds_left_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on surrounds_left_level_range: " + value);
		speaker_page.update_UI_surrounds_left_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_A, index), value);
	});
	$get("#surrounds_right_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on surrounds_right_distance_range: " + value);
		speaker_page.update_UI_surrounds_right_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_B, index), value);
	});
	$get("#surrounds_right_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on surrounds_right_level_range: " + value);
		speaker_page.update_UI_surrounds_right_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_B, index), value);
	});

	$get("#backs_sw").on("click", function () {
		var aattr = $get("#backs_sw").attr("aria-checked");
		log("backs_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_backs_enable(index, value);
		send_and_query_command(get_profile_command(COMMAND.SSSP_9, index), value);
	});
	$get("#back_left_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on back_left_distance_range: " + value);
		speaker_page.update_UI_backs_left_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_C, index), value);
	});
	$get("#back_left_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on back_left_level_range: " + value);
		speaker_page.update_UI_backs_left_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_C, index), value);
	});
	$get("#back_right_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on back_right_distance_range: " + value);
		speaker_page.update_UI_backs_right_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_D, index), value);
	});
	$get("#back_right_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on back_right_level_range: " + value);
		speaker_page.update_UI_backs_right_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_D, index), value);
	});

	$get("#height_1_sw").on("click", function () {
		var aattr = $get("#height_1_sw").attr("aria-checked");
		log("height_1_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_heights_1_enable(index, value);
		send_and_query_command(get_profile_command(COMMAND.SSSP_A, index), value);
	});
	$get("#height_1_left_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_1_left_distance_range: " + value);
		speaker_page.update_UI_heights_1_left_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_E, index), value);
	});
	$get("#height_1_left_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_1_left_level_range: " + value);
		speaker_page.update_UI_heights_1_left_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_E, index), value);
	});
	$get("#height_1_right_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_1_right_distance_range: " + value);
		speaker_page.update_UI_heights_1_right_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_F, index), value);
	});
	$get("#height_1_right_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_1_right_level_range: " + value);
		speaker_page.update_UI_heights_1_right_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_F, index), value);
	});

	$get("#height_2_sw").on("click", function () {
		var aattr = $get("#height_2_sw").attr("aria-checked");
		log("height_2_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_heights_2_enable(index, value);
		send_and_query_command(get_profile_command(COMMAND.SSSP_B, index), value);
	});
	$get("#height_2_left_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_2_left_distance_range: " + value);
		speaker_page.update_UI_heights_2_left_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_G, index), value);
	});
	$get("#height_2_left_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_2_left_level_range: " + value);
		speaker_page.update_UI_heights_2_left_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_G, index), value);
	});
	$get("#height_2_right_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_2_right_distance_range: " + value);
		speaker_page.update_UI_heights_2_right_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_H, index), value);
	});
	$get("#height_2_right_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_2_right_level_range: " + value);
		speaker_page.update_UI_heights_2_right_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_H, index), value);
	});

	$get("#height_3_sw").on("click", function () {
		var aattr = $get("#height_3_sw").attr("aria-checked");
		log("height_3_sw click: " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		speaker_page.update_UI_heights_3_enable(index, value);
		send_and_query_command(get_profile_command(COMMAND.SSSP_C, index), value);
	});
	$get("#height_3_left_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_3_left_distance_range: " + value);
		speaker_page.update_UI_heights_3_left_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_I, index), value);
	});
	$get("#height_3_left_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_3_left_level_range: " + value);
		speaker_page.update_UI_heights_3_left_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_I, index), value);
	});
	$get("#height_3_right_distance_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_3_right_distance_range: " + value);
		speaker_page.update_UI_heights_3_right_distance(index, value);
		send_and_query_command(get_profile_command(COMMAND.LPSP_J, index), value);
	});
	$get("#height_3_right_level_range").on("change", function () {
		var value = parseFloat(this.value);
		log("on height_3_right_level_range: " + value);
		speaker_page.update_UI_heights_3_right_level(index, value);
		send_and_query_command(get_profile_command(COMMAND.LCSP_J, index), value);
	});

	$get("#speaker_page .switch_track").on("keydown", function (e) {
		return handle_switch_keydown($get(this), e.which);
	});
	$get("#speaker_page .minus").on("click", function () {
		handle_range_minus_button_click($get(this));
	});
	$get("#speaker_page .plus").on("click", function () {
		handle_range_plus_button_click($get(this));
	});
}

speaker_page.enable_test_noise = function (index) {
	var noises = 0;
	for (var procnt = 1; procnt <= 4; procnt++) {
		if (speaker_page.get_profile(procnt).test_noise) {
			noises++;
		}
	}
	var changable = noises < 1;
	if ((index >= 1) && (index <= 4)) {
		changable = changable || (speaker_page.get_profile(index).test_noise);
	}
	return changable;
}

speaker_page.enable_controls = function (bpower) {
	log("speaker_page.enable_controls " + bpower);
	speaker_page.cached_power = bpower;
	const all_xable_ids = [
		// channel mapping controls
		"#height_select",
		"#height_2_select", "#height_3_select",
		// amp matrixing
		"#amp_matrixing_front_select", "#amp_matrixing_surrounds_select",
		"#amp_matrixing_back_select", "#amp_matrixing_height_1_select",
		"#amp_matrixing_height_2_select",

		// profile controls
		"#profile_name_input", "#profile_name_apply_button",

		// subwoofers
		"#subwoofer_sw", "#subwoofers_select",

		// other speakers
		"#front_wide_sw",
		"#center_sw",
		"#surrounds_sw",
		"#height_1_sw",
		"#height_2_sw",
		"#height_3_sw",
		"#profile_view .switch_track"
	];

	var pdata;
	var btestnoise = false;
	if (speaker_page.current_profile_index != 0) {
		pdata = speaker_page.get_profile(speaker_page.current_profile_index);
		btestnoise = pdata.test_noise;
	}
	for (var idix = 0; idix < all_xable_ids.length; idix++) {
		var controlid = all_xable_ids[idix];
		$get(controlid).attr("disabled", !bpower || btestnoise);
	}

	speaker_page.update_UI_height_1_state();
	if (pdata != undefined) {
		speaker_page.xable_calibration();
		speaker_page.xable_subwoofers();
		speaker_page.xable_fronts();
		speaker_page.xable_front_wide();
		speaker_page.xable_center();
		speaker_page.xable_surrounds();
		speaker_page.update_back_states();
		speaker_page.xable_heights_1();
		speaker_page.xable_heights_2();
		speaker_page.xable_heights_3();
	}

	$get("#test_noise_sw").attr("disabled",
		!bpower || !speaker_page.enable_test_noise(speaker_page.current_profile_index));
}

speaker_page.enable_ranges = function (selector, which) {
	// En/disable level range control
	var levelstr = selector + " .tnlevel ";
	enable_class(levelstr + ".minus", which);
	$get(levelstr + "input").prop("disabled", !which);
	enable_class(levelstr + ".plus", which);
	enable_class(levelstr + ".range_value", which);

	// En/disable distance range control
	var diststr = selector + " .tndistance ";
	var noisy = which &&
		(!speaker_page.get_profile(speaker_page.current_profile_index).test_noise);
	enable_class(diststr + ".minus", noisy);
	$get(diststr + "input").prop("disabled", !noisy);
	enable_class(diststr + ".plus", noisy);
	enable_class(diststr + ".range_value", noisy);
}

speaker_page.unload_page = function () {
	// Turn off test noise when leaving the page
	if (speaker_page.current_profile_index != 0) {
		if (speaker_page.get_profile(speaker_page.current_profile_index).test_noise) {
			log("unload_page reset " + speaker_page.current_profile_index + " test_noise ");
			send_and_query_command(get_profile_command(COMMAND.LCSP_K, speaker_page.current_profile_index), 0);
		}
	}

	$get("#speaker_page").hide();
	speaker_page.current_profile_index = 0;
}

// Update UI
speaker_page.update_UI_model_name = function (devmodel) {
	if (devmodel === MODEL.MRXSLM) {
		if ($get("#amp_matrixing_surrounds_select option").length <= 1) {
			var textopts = ["Front (Bi-Amp)", "Front In-Ceiling",
				"Front Dolby", "Front On-Wall", "Middle In-Ceiling",
				"Back In-Ceiling", "Back On-Wall"];
			textopts.forEach(function (value, index) {
				$get("#amp_matrixing_surrounds_select").append(new Option(TR(value), 1 + index));
			});
		}
	} else if (devmodel === MODEL.MRX740) {
		var zone2text = TR("Zone 2");
		var height1text = TR("Height 1");
		var height2text = TR("Height 2");
		if ($get("#amp_matrixing_front_select option").length <= 2) {
			$get("#amp_matrixing_front_select").append(new Option(height1text, "2"));
			$get("#amp_matrixing_front_select").append(new Option(height2text, "3"));
		}
		if ($get("#amp_matrixing_surrounds_select option").length <= 1) {
			$get("#amp_matrixing_surrounds_select").append(new Option(zone2text, "1"));
			$get("#amp_matrixing_surrounds_select").append(new Option(height2text, "2"));
		}
		if ($get("#amp_matrixing_back_select option").length <= 4) {
			$get("#amp_matrixing_back_select option").eq(2).after(new Option(height1text, "3"));
		}
	} else if (devmodel === MODEL.MRX1140) {
		var frontwidetext = TR("Front Wide");
		var height3text = TR("Height 3");
		zone2text = TR("Zone 2");
		if ($get("#amp_matrixing_front_select option").length <= 2) {
			$get("#amp_matrixing_front_select").append(new Option(frontwidetext, "2"));
			$get("#amp_matrixing_front_select").append(new Option(height3text, "3"));
		}
		if ($get("#amp_matrixing_surrounds_select option").length <= 1) {
			$get("#amp_matrixing_surrounds_select").append(new Option(zone2text, "1"));
			$get("#amp_matrixing_surrounds_select").append(new Option(height3text, "2"));
		}
		if ($get("#amp_matrixing_back_select option").length <= 4) {
			$get("#amp_matrixing_back_select option").eq(2).after(new Option(frontwidetext, "3"));
		}
	}
}

speaker_page.format_distance = function (value) {
	var text;
	if (speaker_page.data.dist_units == 1) {
		// centimetres
		text = TR("%1 cm", [parseInt(value) * 5]);
	} else {
		// Feet and inches
		text = TR("%1 ft %2 in", [parseInt(value / 6), ((value % 6) * 2)]);
	}
	return text;
}

speaker_page.any_sub_enabled = function (sub_num) {
	for (var procnt = 1; procnt <= 4; procnt++) {
		if (speaker_page.get_profile(procnt).subwoofers_enabled >= sub_num) {
			return true;
		}
	}
	return false;
}
speaker_page.update_UI_placements = function () {
	var sdata = speaker_page.data;
	var bsub1 = speaker_page.any_sub_enabled(1);
	var bsub2 = ((device.model == MODEL.MRX1140) || device.is_avm79) &&
		speaker_page.any_sub_enabled(2);
	var bsub3 = (device.model == MODEL.AVM90) && speaker_page.any_sub_enabled(3);
	var bsub4 = (device.model == MODEL.AVM90) && speaker_page.any_sub_enabled(4);
	if (bsub1) {
		$get("#subwoofer_leftx").show();
	} else {
		$get("#subwoofer_leftx").hide();
	}
	if (bsub2) {
		$get("#subwoofer_rightx").show();
	} else {
		$get("#subwoofer_rightx").hide();
	}
	if (bsub3) {
		$get("#subwoofer_back_leftx").show();
	} else {
		$get("#subwoofer_back_leftx").hide();
	}
	if (bsub4) {
		$get("#subwoofer_back_rightx").show();
	} else {
		$get("#subwoofer_back_rightx").hide();
	}
	var bcenter = sdata.profile_1.center_enable || sdata.profile_2.center_enable ||
		sdata.profile_3.center_enable || sdata.profile_4.center_enable;
	if (bcenter) {
		$get("#centerx").show();
	} else {
		$get("#centerx").hide();
	}
	var bsurround = device.is_mrxx40avm79 ||
		(device.is_mrxslm && (sdata.surround_choice == 0));
	if (bsurround) {
		bsurround = sdata.profile_1.surround_enable || sdata.profile_2.surround_enable ||
			sdata.profile_3.surround_enable || sdata.profile_4.surround_enable;
	}
	if (bsurround) {
		$get("#surround_leftx").show();
		$get("#surround_rightx").show();
	} else {
		$get("#surround_leftx").hide();
		$get("#surround_rightx").hide();
	}
	var bback = device.always_back ||
		((device.model == MODEL.MRX540) && (sdata.height_choice == 1));
	if (bback) {
		bback = sdata.profile_1.back_enable || sdata.profile_2.back_enable ||
			sdata.profile_3.back_enable || sdata.profile_4.back_enable;
	}
	if (bback) {
		$get("#back_leftx").show();
		$get("#back_rightx").show();
	} else {
		$get("#back_leftx").hide();
		$get("#back_rightx").hide();
	}
	var bfrontwide = device.is_avm79 ||
		((device.model == MODEL.MRX1140) &&
			((sdata.amp_front_choice == 2) ||
				(sdata.amp_back_choice == 3) ||
				(sdata.amp_ht2_choice == 2)));
	if (bfrontwide) {
		bfrontwide = sdata.profile_1.front_wide_enabled || sdata.profile_2.front_wide_enabled ||
			sdata.profile_3.front_wide_enabled || sdata.profile_4.front_wide_enabled;
	}
	if (bfrontwide) {
		$get("#front_left_widex").show();
		$get("#front_right_widex").show();
	} else {
		$get("#front_left_widex").hide();
		$get("#front_right_widex").hide();
	}
	if (device.is_mrxslm) {
		var anyhten = sdata.profile_1.heights_1_enable || sdata.profile_2.heights_1_enable ||
			sdata.profile_3.heights_1_enable || sdata.profile_4.heights_1_enable;
		var bfrontceiling = anyhten && (sdata.surround_choice == 2);
		var bfrontdolby = anyhten && (sdata.surround_choice == 3);
		var bfrontwall = anyhten && (sdata.surround_choice == 4);
		var bmiddleceiling = anyhten && (sdata.surround_choice == 5);
		var bmiddledolby = false;
		var bbackceiling = anyhten && (sdata.surround_choice == 6);
		var bbackdolby = false;
		var bbackwall = anyhten && (sdata.surround_choice == 7);
	} else if (device.is_mrxx40avm79) {
		var bamht1 = ((device.model == MODEL.MRX540) && (sdata.height_choice == 0)) ||
			(device.model == MODEL.MRX740) ||
			(device.model == MODEL.MRX1140) ||
			device.is_avm79;
		var bamht2 = (device.model == MODEL.MRX740) ||
			(device.model == MODEL.MRX1140) ||
			device.is_avm79;
		var bamht3 = device.is_avm79 || (device.model == MODEL.MRX1140);
		if (bamht1) {
			bamht1 = sdata.profile_1.heights_1_enable || sdata.profile_2.heights_1_enable ||
				sdata.profile_3.heights_1_enable || sdata.profile_4.heights_1_enable;
		}
		if (bamht2) {
			bamht2 = sdata.profile_1.heights_2_enable || sdata.profile_2.heights_2_enable ||
				sdata.profile_3.heights_2_enable || sdata.profile_4.heights_2_enable;
		}
		if (bamht3) {
			bamht3 = sdata.profile_1.heights_3_enable || sdata.profile_2.heights_3_enable ||
				sdata.profile_3.heights_3_enable || sdata.profile_4.heights_3_enable;
		}
		bfrontceiling = bamht1 && (sdata.height_1_choice == 0);
		bfrontdolby = bamht1 && (sdata.height_1_choice == 1);
		bfrontwall = bamht1 && (sdata.height_1_choice == 2);
		bmiddleceiling = (bamht1 && (sdata.height_1_choice == 3)) ||
			(bamht2 && (sdata.height_2_choice == 0));
		bmiddledolby = (bamht1 && (sdata.height_1_choice == 4)) ||
			(bamht2 && (sdata.height_2_choice == 1));
		bbackceiling = (bamht1 && (sdata.height_1_choice == 5)) ||
			(bamht2 && (sdata.height_2_choice == 2)) ||
			(bamht3 && (sdata.height_3_choice == 0));
		bbackdolby = (bamht1 && (sdata.height_1_choice == 6)) ||
			(bamht2 && (sdata.height_2_choice == 3)) ||
			(bamht3 && (sdata.height_3_choice == 1));
		bbackwall = (bamht1 && (sdata.height_1_choice == 7)) ||
			(bamht2 && (sdata.height_2_choice == 4)) ||
			(bamht3 && (sdata.height_3_choice == 2));
	}
	if (bfrontceiling) {
		$get("#ceiling_front_leftx").show();
		$get("#ceiling_front_rightx").show();
	} else {
		$get("#ceiling_front_leftx").hide();
		$get("#ceiling_front_rightx").hide();
	}
	if (bfrontdolby) {
		$get("#height_front_leftx").show();
		$get("#height_front_rightx").show();
	} else {
		$get("#height_front_leftx").hide();
		$get("#height_front_rightx").hide();
	}
	if (bfrontwall) {
		$get("#wall_front_leftx").show();
		$get("#wall_front_rightx").show();
	} else {
		$get("#wall_front_leftx").hide();
		$get("#wall_front_rightx").hide();
	}
	if (bmiddleceiling) {
		$get("#ceiling_surround_leftx").show();
		$get("#ceiling_surround_rightx").show();
	} else {
		$get("#ceiling_surround_leftx").hide();
		$get("#ceiling_surround_rightx").hide();
	}
	if (bmiddledolby) {
		$get("#height_surround_leftx").show();
		$get("#height_surround_rightx").show();
	} else {
		$get("#height_surround_leftx").hide();
		$get("#height_surround_rightx").hide();
	}
	if (bbackceiling) {
		$get("#ceiling_back_leftx").show();
		$get("#ceiling_back_rightx").show();
	} else {
		$get("#ceiling_back_leftx").hide();
		$get("#ceiling_back_rightx").hide();
	}
	if (bbackdolby) {
		$get("#height_back_leftx").show();
		$get("#height_back_rightx").show();
	} else {
		$get("#height_back_leftx").hide();
		$get("#height_back_rightx").hide();
	}
	if (bbackwall) {
		$get("#wall_back_leftx").show();
		$get("#wall_back_rightx").show();
	} else {
		$get("#wall_back_leftx").hide();
		$get("#wall_back_rightx").hide();
	}
}

speaker_page.update_UI_height = function (value) {
	speaker_page.data.height_choice = value;
	if (speaker_page.data.height_choice == 0) {
		// The device turns the back off
		speaker_page.data.profile_1.back_enable = false;
		speaker_page.data.profile_2.back_enable = false;
		speaker_page.data.profile_3.back_enable = false;
		speaker_page.data.profile_4.back_enable = false;
		$get("#backs_sw").attr("aria-checked", false);
	}
	$get("#height_select").val(value);
	speaker_page.update_UI_height_1_state();
	speaker_page.update_back_states();
	speaker_page.update_room_back();
	speaker_page.update_UI_placements();
}
speaker_page.update_UI_height_1_state = function () {
	var which = speaker_page.cached_power && (speaker_page.data.height_choice == 0);
	$get("#height_1_select").attr("disabled", !which);
	if ((device.model == MODEL.MRX540) && (0 != speaker_page.current_profile_index)) {
		$get("#height_1_sw").attr("disabled", !which); // disable for MRX 540 only
		speaker_page.xable_heights_1();
		speaker_page.update_UI_room_diagram_heights(speaker_page.current_profile_index);
	}
}
speaker_page.update_UI_height_1 = function (value) {
	speaker_page.data.height_1_choice = value;
	speaker_page.data.height_1_off = value === 8;
	$get("#height_1_select").val(value);
	if (speaker_page.data.height_1_off) {
		$get("#pro_cross_ht1_row").hide();
	} else {
		$get("#pro_cross_ht1_row").show();
		var height_1_name = $get("#height_1_select option[value='" + value + "']").text();
		$get("#height_1_crossover_label").text(TR("%1 Crossover", [height_1_name]));
		$get("#pro_height1_l").text(height_1_name);
		$get("#ht1_left_a").text(height_1_name + TR(" Left"));
		$get("#ht1_right_a").text(height_1_name + TR(" Right"));
		$get("#ht1_leftl_a").text(height_1_name + TR(" Left"));
		$get("#ht1_rightl_a").text(height_1_name + TR(" Right"));
	}
	if (speaker_page.data.height_1_off) {// Off
		$get("#height_1_panel").parent().hide();
		$get("#pro_height1_row, .pro_height1_row").hide();
	} else {
		$get("#height_1_panel").parent().show();
		$get("#pro_height1_row, .pro_height1_row").show();
	}
	speaker_page.update_UI_room_diagram_heights(speaker_page.current_profile_index);
	speaker_page.update_UI_placements();
	return height_1_name;
}
speaker_page.update_UI_height_2 = function (value) {
	speaker_page.data.height_2_choice = value;
	speaker_page.data.height_2_off = value === 5;
	$get("#height_2_select").val(value);
	if (speaker_page.data.height_2_off) {
		$get("#pro_cross_ht2_row").hide();
	} else {
		$get("#pro_cross_ht2_row").show();
		var height_2_name = $get("#height_2_select option[value='" + value + "']").text();
		$get("#height_2_crossover_label").text(TR("%1 Crossover", [height_2_name]));
		$get("#pro_height2_l").text(height_2_name);
		$get("#ht2_left_a").text(height_2_name + TR(" Left"));
		$get("#ht2_right_a").text(height_2_name + TR(" Right"));
		$get("#ht2_leftl_a").text(height_2_name + TR(" Left"));
		$get("#ht2_rightl_a").text(height_2_name + TR(" Right"));
	}
	if (speaker_page.data.height_2_off) {// Off
		$get("#height_2_panel").parent().hide();
		$get("#pro_height2_row").hide();
	} else {
		$get("#height_2_panel").parent().show();
		$get("#pro_height2_row").show();
	}
	speaker_page.update_UI_room_diagram_heights(speaker_page.current_profile_index);
	speaker_page.update_UI_placements();
	return height_2_name;
}
speaker_page.update_UI_height_3 = function (value) {
	speaker_page.data.height_3_choice = value;
	speaker_page.data.height_3_off = value === 3;
	$get("#height_3_select").val(value);
	if (speaker_page.data.height_3_off) {
		$get("#pro_cross_ht3_row").hide();
	} else {
		$get("#pro_cross_ht3_row").show();
		var height_3_name = $get("#height_3_select option[value='" + value + "']").text();
		$get("#height_3_crossover_label").text(TR("%1 Crossover", [height_3_name]));
		$get("#pro_height3_l").text(height_3_name);
		$get("#ht3_left_a").text(height_3_name + TR(" Left"));
		$get("#ht3_right_a").text(height_3_name + TR(" Right"));
		$get("#ht3_leftl_a").text(height_3_name + TR(" Left"));
		$get("#ht3_rightl_a").text(height_3_name + TR(" Right"));
	}
	if (speaker_page.data.height_3_off) {// Off
		$get("#height_3_panel").parent().hide();
		$get("#pro_height3_row").hide();
	} else {
		$get("#height_3_panel").parent().show();
		$get("#pro_height3_row").show();
	}
	speaker_page.update_UI_room_diagram_heights(speaker_page.current_profile_index);
	speaker_page.update_UI_placements();
	return height_3_name;
}

speaker_page.update_room_back = function () {
	if (0 != speaker_page.current_profile_index) {
		var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
		var which = (device.always_back || (speaker_page.data.height_choice == 1)) &&
			pdata.back_enable;
		if (which) {
			$get("#back_left").show();
			$get("#back_right").show();
		} else {
			$get("#back_left").hide();
			$get("#back_right").hide();
		}
	}
}

speaker_page.update_UI_room_diagram_heights = function (index) {

	if (index === speaker_page.current_profile_index && index != 0) {

		var profile = speaker_page.get_profile(index);
		const all_height_1_room_ids = [["#ceiling_front_left", "#ceiling_front_right"],	// Front In-Ceiling
		["#height_front_left", "#height_front_right"], 		// Front Dolby
		["#wall_front_left", "#wall_front_right"],			// Front On-Wall
		["#ceiling_surround_left", "#ceiling_surround_right"],	// Middle In-Ceiling
		["#height_surround_left", "#height_surround_right"],  	// Middle Dolby
		["#ceiling_back_left", "#ceiling_back_right"],	// Back In-Ceiling
		["#height_back_left", "#height_back_right"],	// Back Dolby
		["#wall_back_left", "#wall_back_right"], 		// Back On-Wall
		[]]; // Off
		hide_all_ids(all_height_1_room_ids);

		if (profile.heights_1_enable) {
			if (device.model == MODEL.MRXSLM) {
				var slmv = $get("#amp_matrixing_surrounds_select").val();
				var height_1 = slmv >= 2 ? slmv - 2 : 8;
			} else {
				height_1 = $get("#height_1_select").val();
			}
			show_ids(all_height_1_room_ids[height_1]);
		}

		if (profile.heights_2_enable) {
			var height_2 = $get("#height_2_select").val();
			const all_height_2_room_ids = [["#ceiling_surround_left", "#ceiling_surround_right"],	// Middle In-Ceiling
			["#height_surround_left", "#height_surround_right"],  	// Middle Dolby
			["#ceiling_back_left", "#ceiling_back_right"],			// Back In-Ceiling
			["#height_back_left", "#height_back_right"],			// Back Dolby
			["#wall_back_left", "#wall_back_right"], 				// Back On-Wall
			[]]; // Off
			show_ids(all_height_2_room_ids[height_2]);
		}

		if (profile.heights_3_enable) {
			var height_3 = $get("#height_3_select").val();
			const all_height_3_room_ids = [["#ceiling_back_left", "#ceiling_back_right"],	// Back In-Ceiling
			["#height_back_left", "#height_back_right"],	// Back Dolby
			["#wall_back_left", "#wall_back_right"], 		// Back On-Wall
			[]]; // Off
			show_ids(all_height_3_room_ids[height_3]);
		}

	}

	function hide_all_ids(all_ids) {
		var i;
		for (i = 0; i < all_ids.length; i++) {
			var j;
			for (j = 0; j < all_ids[i].length; j++)
				$get(all_ids[i][j]).hide();
		}
	}

	function show_ids(ids) {
		var i;
		for (i = 0; i < ids.length; i++)
			$get(ids[i]).show();
	}
}

// Update Amp Matrixing UI
speaker_page.update_UI_amp_matrixing_front = function (value) {
	speaker_page.data.amp_front_choice = value;
	$get("#amp_matrixing_front_select").val(value);
	speaker_page.update_UI_placements();
}
speaker_page.update_UI_amp_matrixing_surrounds = function (value) {
	speaker_page.data.surround_choice = value;
	$get("#amp_matrixing_surrounds_select").val(value);
	if (device.model == MODEL.MRXSLM) {
		if (value == 0) {
			// Set to surround speakers
			$get("#surrounds_panel").parent().show();
			$get("#pro_surround_row, .pro_surround_row").show();
			$get("#height_1_panel").parent().hide();
			$get("#pro_height1_row, .pro_height1_row").hide();
			$get("#pro_cross_surround_row").show();
			$get("#pro_cross_ht1_row").hide();
		}
		else if (value == 1) {
			// Set to front bi-amp
			$get("#surrounds_panel").parent().hide();
			$get("#pro_surround_row, .pro_surround_row").hide();
			$get("#height_1_panel").parent().hide();
			$get("#pro_height1_row, .pro_height1_row").hide();
			$get("#pro_cross_surround_row").hide();
			$get("#pro_cross_ht1_row").hide();
		} else {
			// Set to other speakers
			$get("#surrounds_panel").parent().hide();
			$get("#pro_surround_row, .pro_surround_row").hide();
			$get("#height_1_panel").parent().show();
			$get("#pro_height1_row, .pro_height1_row").show();
			$get("#pro_cross_surround_row").hide();
			$get("#pro_cross_ht1_row").show();
			var height_1_name = $get("#amp_matrixing_surrounds_select option[value='" + value + "']").text();
			$get("#pro_height1_l").text(height_1_name);
			$get("#ht1_left_a").text(height_1_name + TR(" Left"));
			$get("#ht1_right_a").text(height_1_name + TR(" Right"));
			$get("#ht1_leftl_a").text(height_1_name + TR(" Left"));
			$get("#ht1_rightl_a").text(height_1_name + TR(" Right"));
			$get("#height_1_crossover_label").text(TR("%1 Crossover", [height_1_name]));
		}
	}
	speaker_page.update_UI_placements();
}
speaker_page.update_UI_amp_matrixing_back = function (value) {
	speaker_page.data.amp_back_choice = value;
	$get("#amp_matrixing_back_select").val(value);
	speaker_page.update_UI_placements();
}
speaker_page.update_UI_amp_matrixing_height_1 = function (value) {
	speaker_page.data.amp_ht1_choice = value;
	$get("#amp_matrixing_height_1_select").val(value);
	speaker_page.update_UI_placements();
}
speaker_page.update_UI_amp_matrixing_height_2 = function (value) {
	speaker_page.data.amp_ht2_choice = value;
	$get("#amp_matrixing_height_2_select").val(value);
	speaker_page.update_UI_placements();
}

// Update Profile Panel UI
speaker_page.update_UI_profile_name = function (index, profile_name) {
	var trimmed_name = profile_name.trim();
	speaker_page.get_profile(index).name = trimmed_name;
	$get("#profile_menu_profile_" + index + "_text").text(trimmed_name);
	if (index === speaker_page.current_profile_index) {
		$get("#profile_name").text(trimmed_name);
		$get("#profile_name_input").val(trimmed_name);
	}
}
speaker_page.xable_calibration = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && !pdata.test_noise;
	enable_class(".calibration_row .minus", which);
	$get("#calibration_range").prop("disabled", !which);
	enable_class(".calibration_row .plus", which);
	enable_class(".calibration_row .range_value", which);
}
speaker_page.update_UI_calibration_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#calibration_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_test_noise_enable = function (index, bvalue) {
	speaker_page.get_profile(index).test_noise = bvalue;
	if (index === speaker_page.current_profile_index) {
		$get("#test_noise_sw").attr("aria-checked", bvalue);
	}
	speaker_page.enable_controls(speaker_page.cached_power);
}

// Update Subwoofers Panel UI
speaker_page.update_UI_subwoofers_enabled = function (prof_num, value) {
	speaker_page.get_profile(prof_num).subwoofers_enabled = value;
	if (prof_num === speaker_page.current_profile_index) {

		$get("#subwoofer_sw").attr("aria-checked", (value > 0) ? true : false);
		$get("#subwoofers_select").val(value);
		speaker_page.xable_subwoofers();

		// room diagram
		if (value >= 1) {
			$get("#subwoofer_left").show();
		} else {
			$get("#subwoofer_left").hide();
		}
		if (value >= 2) {
			$get("#subwoofer_right").show();
		} else {
			$get("#subwoofer_right").hide();
		}
		if (value >= 3) {
			$get("#subwoofer_back_left").show();
		} else {
			$get("#subwoofer_back_left").hide();
		}
		if (value >= 4) {
			$get("#subwoofer_back_right").show();
		} else {
			$get("#subwoofer_back_right").hide();
		}
	}
	speaker_page.update_UI_placements();
}

speaker_page.xable_phases = function (selector, state) {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);

	// Other range controls
	var which = state && !pdata.test_noise;
	enable_class(selector + " .tnfreeze .minus", which);
	$get(selector + " .tnfreeze .subwoofer_control").prop("disabled", !which);
	enable_class(selector + " .tnfreeze .plus", which);
	enable_class(selector + " .tnfreeze .range_value", which);

	// Radio buttons
	var rstate = which ? 0 : -1;
	var selected = $get(selector + " .radio_buttons button");
	$get(selected).prop('tabIndex', rstate);
	$get(selected).prop('disabled', !which);
}

speaker_page.update_UI_subwoofer_phase_frequency = function (index, value, sub_num) {
	var spdata = speaker_page.get_profile(index);
	if (sub_num == 1) {
		spdata.subwoofer_phase_frequency = value;
		var range = $get("#phase_frequency_1_range");
	} else if (sub_num == 2) {
		spdata.subwoofer_2_phase_frequency = value;
		range = $get("#phase_frequency_2_range");
	} else if (sub_num == 3) {
		spdata.subwoofer_3_phase_frequency = value;
		range = $get("#phase_frequency_3_range");
	} else if (sub_num == 4) {
		spdata.subwoofer_4_phase_frequency = value;
		range = $get("#phase_frequency_4_range");
	} else {
		range = undefined;
	}
	if (index === speaker_page.current_profile_index) {
		range.val(value);
		update_UI_range_text(range, value, TR("Hz"), 0);
	}
}
speaker_page.update_UI_subwoofer_phase = function (index, value, sub_num) {
	var spdata = speaker_page.get_profile(index);
	if (sub_num == 1) {
		spdata.subwoofer_phase = value;
		var range = $get("#phase_1_range");
	} else if (sub_num == 2) {
		spdata.subwoofer_2_phase = value;
		range = $get("#phase_2_range");
	} else if (sub_num == 3) {
		spdata.subwoofer_3_phase = value;
		range = $get("#phase_3_range");
	} else if (sub_num == 4) {
		spdata.subwoofer_4_phase = value;
		range = $get("#phase_4_range");
	} else {
		range = undefined;
	}
	if (index === speaker_page.current_profile_index) {
		range.val(value);
		update_UI_range_text(range, value, TR("degrees"), 0);
	}
}
speaker_page.update_UI_subwoofer_polarity = function (index, value, sub_num) {
	var spdata = speaker_page.get_profile(index);
	if (sub_num == 1) {
		spdata.subwoofer_polarity = value;
		var normalb = "#normal_1_radio_button";
		var inverteb = "#inverted_1_radio_button";
	} else if (sub_num == 2) {
		spdata.subwoofer_2_polarity = value;
		normalb = "#normal_2_radio_button";
		inverteb = "#inverted_2_radio_button";
	} else if (sub_num == 3) {
		spdata.subwoofer_3_polarity = value;
		normalb = "#normal_3_radio_button";
		inverteb = "#inverted_3_radio_button";
	} else if (sub_num == 4) {
		spdata.subwoofer_4_polarity = value;
		normalb = "#normal_4_radio_button";
		inverteb = "#inverted_4_radio_button";
	} else {
		normalb = undefined;
		inverteb = undefined;
	}
	if (index === speaker_page.current_profile_index) {
		if (value === 0) {
			$get(normalb).addClass("active").attr("tabindex", "0");
			$get(inverteb).removeClass("active").attr("tabindex", "-1");
		} else if (value === 1) {
			$get(normalb).removeClass("active").attr("tabindex", "-1");
			$get(inverteb).addClass("active").attr("tabindex", "0");
		} else {
			logE("update_UI_subwoofer_polarity wrong value:" + value);
		}
	}
}
speaker_page.update_UI_subwoofer_distance = function (index, value, sub_num) {
	var spdata = speaker_page.get_profile(index);
	if (sub_num == 1) {
		spdata.subwoofer_distance = value;
		var range = $get("#subwoofer_1_distance_range");
	} else if (sub_num == 2) {
		spdata.subwoofer_2_distance = value;
		range = $get("#subwoofer_2_distance_range");
	} else if (sub_num == 3) {
		spdata.subwoofer_3_distance = value;
		range = $get("#subwoofer_3_distance_range");
	} else if (sub_num == 4) {
		spdata.subwoofer_4_distance = value;
		range = $get("#subwoofer_4_distance_range");
	} else {
		range = undefined;
	}
	if (index === speaker_page.current_profile_index) {
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_subwoofer_level = function (index, value, sub_num) {
	var spdata = speaker_page.get_profile(index);
	if (sub_num == 1) {
		spdata.subwoofer_level = value;
		var range = $get("#subwoofer_1_level_range");
	} else if (sub_num == 2) {
		spdata.subwoofer_2_level = value;
		range = $get("#subwoofer_2_level_range");
	} else if (sub_num == 3) {
		spdata.subwoofer_3_level = value;
		range = $get("#subwoofer_3_level_range");
	} else if (sub_num == 4) {
		spdata.subwoofer_4_level = value;
		range = $get("#subwoofer_4_level_range");
	} else {
		range = undefined;
	}
	if (index === speaker_page.current_profile_index) {
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

// Update Crossovers Panel UI
speaker_page.xable_crossovers = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && (pdata.subwoofers_enabled > 0) &&
		!pdata.test_noise;
	$get("#crossovers_panel select").prop("disabled", !which);
	$get("#crossovers_panel input").prop("disabled", !which);
	$get("#front_wide_crossover_select").prop("disabled", !which || !pdata.front_wide_enabled);
	$get("#center_crossover_select").prop("disabled", !which || !pdata.center_enable);
	$get("#surround_crossover_select").prop("disabled", !which || !pdata.surround_enable);
	$get("#back_crossover_select").prop("disabled", !which || !pdata.back_enable);
	$get("#height_1_crossover_select").prop("disabled", !which || !pdata.heights_1_enable);
	$get("#height_2_crossover_select").prop("disabled", !which || !pdata.heights_2_enable);
	$get("#height_3_crossover_select").prop("disabled", !which || !pdata.heights_3_enable);
}

speaker_page.update_UI_subwoofer_lpf_for_lfe = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#lfe_lowpass_filter_select").val(value);
	}
}
speaker_page.update_UI_subwoofer_front_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#front_crossover_select").val(value);
	}
}
speaker_page.update_UI_super_sub_fronts = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#super_sub_fronts_sw").attr("aria-checked", (value == 1) ? true : false);
	}
}
speaker_page.update_UI_subwoofer_front_wide_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#front_wide_crossover_select").val(value);
	}
}
speaker_page.update_UI_subwoofer_center_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#center_crossover_select").val(value);
	}
}
speaker_page.update_UI_subwoofer_surround_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#surround_crossover_select").val(value);
	}
}
speaker_page.update_UI_subwoofer_back_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#back_crossover_select").val(value);
	}
}
speaker_page.update_UI_subwoofer_height_1_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#height_1_crossover_select").val(value);
	}
}
speaker_page.update_UI_subwoofer_height_2_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#height_2_crossover_select").val(value);
	}
}
speaker_page.update_UI_subwoofer_height_3_crossover = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		$get("#height_3_crossover_select").val(value);
	}
}

// Update Other Speakers UI
speaker_page.xable_subwoofers = function () {
	if (speaker_page.current_profile_index > 0) {
		var cpow = speaker_page.cached_power;
		var subs = speaker_page.get_profile(speaker_page.current_profile_index).subwoofers_enabled;
		speaker_page.enable_ranges(".pro_subw1_row", cpow && (subs >= 1));
		speaker_page.enable_ranges(".pro_subw2_row", cpow && (subs >= 2));
		speaker_page.enable_ranges(".pro_subw3_row", cpow && (subs >= 3));
		speaker_page.enable_ranges(".pro_subw4_row", cpow && (subs >= 4));
		speaker_page.xable_phases(".pro_subw1_row", cpow && (subs >= 1));
		speaker_page.xable_phases(".pro_subw2_row", cpow && (subs >= 2));
		speaker_page.xable_phases(".pro_subw3_row", cpow && (subs >= 3));
		speaker_page.xable_phases(".pro_subw4_row", cpow && (subs >= 4));
		speaker_page.xable_crossovers();
	}
}
speaker_page.xable_fronts = function () {
	speaker_page.enable_ranges(".pro_front", speaker_page.cached_power);
}
speaker_page.update_UI_front_left_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_left_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_front_left_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_left_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_front_right_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_right_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_front_right_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_right_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_UI_front_wide_enable = function (index, bvalue) {
	speaker_page.get_profile(index).front_wide_enabled = bvalue;
	if (index === speaker_page.current_profile_index) {
		$get("#front_wide_sw").attr("aria-checked", bvalue);
		speaker_page.xable_crossovers();
		speaker_page.xable_front_wide();

		// room diagram
		if (bvalue) {
			$get("#front_left_wide").show();
			$get("#front_right_wide").show();
		} else {
			$get("#front_left_wide").hide();
			$get("#front_right_wide").hide();
		}
	} else if (0 == speaker_page.current_profile_index) {
		speaker_page.update_UI_placements();
	}
}
speaker_page.xable_front_wide = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && pdata.front_wide_enabled;
	speaker_page.enable_ranges(".front_wide", which);
}

speaker_page.update_UI_front_wide_left_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_wide_left_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_front_wide_left_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_wide_left_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_front_wide_right_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_wide_right_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_front_wide_right_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#front_wide_right_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_UI_center_enable = function (prof_num, bvalue) {
	speaker_page.get_profile(prof_num).center_enable = bvalue;
	if (prof_num === speaker_page.current_profile_index) {
		$get("#center_sw").attr("aria-checked", bvalue);
		speaker_page.xable_crossovers();
		speaker_page.xable_center();

		// room diagram
		if (bvalue) {
			$get("#center").show();
		} else {
			$get("#center").hide();
		}
	} else if (0 == speaker_page.current_profile_index) {
		speaker_page.update_UI_placements();
	}
}
speaker_page.xable_center = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && pdata.center_enable;
	speaker_page.enable_ranges("#centers_panel", which);
	speaker_page.enable_ranges(".pro_center_row", which);
}

speaker_page.update_UI_center_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#center_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_center_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#center_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_UI_surrounds_enable = function (prof_num, bvalue) {
	speaker_page.get_profile(prof_num).surround_enable = bvalue;
	if (prof_num === speaker_page.current_profile_index) {
		$get("#surrounds_sw").attr("aria-checked", bvalue);
		speaker_page.xable_crossovers();
		speaker_page.xable_surrounds();
		speaker_page.update_back_states();

		// room diagram
		if (bvalue) {
			$get("#surround_left").show();
			$get("#surround_right").show();
		} else {
			$get("#surround_left").hide();
			$get("#surround_right").hide();
		}
	} else if (0 == speaker_page.current_profile_index) {
		speaker_page.update_UI_placements();
	}
}
speaker_page.xable_surrounds = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && pdata.surround_enable;
	speaker_page.enable_ranges("#surrounds_panel", which);
	speaker_page.enable_ranges(".pro_surround_row", which);
}

speaker_page.update_UI_surrounds_left_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#surrounds_left_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_surrounds_left_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#surrounds_left_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_surrounds_right_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#surrounds_right_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_surrounds_right_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#surrounds_right_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_back_states = function () {
	if (0 != speaker_page.current_profile_index) {
		var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
		var which = speaker_page.cached_power &&
			(device.always_back || (speaker_page.data.height_choice == 1)) &&
			pdata.surround_enable && !pdata.test_noise;
		$get("#backs_sw").attr("disabled", !which);
		speaker_page.xable_backs();
		if (device.always_back || (speaker_page.data.height_choice == 1)) {
			$get("#pro_cross_back_row").show();
			$get("#backs_panel").parent().show();
			$get("#pro_back_row, .pro_back_row").show();
		} else {
			$get("#pro_cross_back_row").hide();
			$get("#backs_panel").parent().hide();
			$get("#pro_back_row, .pro_back_row").hide();
		}
	}
}
speaker_page.update_UI_backs_enable = function (prof_num, bvalue) {
	speaker_page.get_profile(prof_num).back_enable = bvalue;
	if (prof_num === speaker_page.current_profile_index) {
		$get("#backs_sw").attr("aria-checked", bvalue);
		speaker_page.xable_crossovers();
		speaker_page.xable_backs();
		speaker_page.update_room_back();
	} else if (0 == speaker_page.current_profile_index) {
		speaker_page.update_UI_placements();
	}
}
speaker_page.xable_backs = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power &&
		(device.always_back || (speaker_page.data.height_choice == 1)) &&
		pdata.back_enable;
	speaker_page.enable_ranges("#backs_panel", which);
	speaker_page.enable_ranges(".pro_back_row", which);
}

speaker_page.update_UI_backs_left_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#back_left_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_backs_left_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#back_left_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_backs_right_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#back_right_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_backs_right_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#back_right_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_UI_heights_1_enable = function (prof_num, bvalue) {
	speaker_page.get_profile(prof_num).heights_1_enable = bvalue;
	if (prof_num === speaker_page.current_profile_index) {
		$get("#height_1_sw").attr("aria-checked", bvalue);
		speaker_page.xable_crossovers();
		speaker_page.xable_heights_1();
		speaker_page.update_UI_room_diagram_heights(prof_num);
	} else if (0 == speaker_page.current_profile_index) {
		speaker_page.update_UI_placements();
	}
}
speaker_page.xable_heights_1 = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && (speaker_page.data.height_choice == 0) &&
		pdata.heights_1_enable;
	speaker_page.enable_ranges("#height_1_panel", which);
	speaker_page.enable_ranges(".pro_height1_row", which);
}

speaker_page.update_UI_heights_1_left_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_1_left_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_heights_1_left_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_1_left_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_heights_1_right_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_1_right_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_heights_1_right_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_1_right_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_UI_heights_2_enable = function (prof_num, bvalue) {
	speaker_page.get_profile(prof_num).heights_2_enable = bvalue;
	if (prof_num === speaker_page.current_profile_index) {
		$get("#height_2_sw").attr("aria-checked", bvalue);
		speaker_page.xable_crossovers();
		speaker_page.xable_heights_2();
		speaker_page.update_UI_room_diagram_heights(prof_num);
	} else if (0 == speaker_page.current_profile_index) {
		speaker_page.update_UI_placements();
	}
}
speaker_page.xable_heights_2 = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && pdata.heights_2_enable;
	speaker_page.enable_ranges("#height_2_panel", which);
	speaker_page.enable_ranges(".pro_height2_row", which);
}

speaker_page.update_UI_heights_2_left_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_2_left_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_heights_2_left_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_2_left_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_heights_2_right_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_2_right_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_heights_2_right_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_2_right_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_UI_heights_3_enable = function (prof_num, bvalue) {
	speaker_page.get_profile(prof_num).heights_3_enable = bvalue;
	if (prof_num === speaker_page.current_profile_index) {
		$get("#height_3_sw").attr("aria-checked", bvalue);
		speaker_page.xable_crossovers();
		speaker_page.xable_heights_3();
		speaker_page.update_UI_room_diagram_heights(prof_num);
	} else if (0 == speaker_page.current_profile_index) {
		speaker_page.update_UI_placements();
	}
}
speaker_page.xable_heights_3 = function () {
	var pdata = speaker_page.get_profile(speaker_page.current_profile_index);
	var which = speaker_page.cached_power && pdata.heights_3_enable;
	speaker_page.enable_ranges("#height_3_panel", which);
	speaker_page.enable_ranges(".pro_height3_row", which);
}

speaker_page.update_UI_heights_3_left_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_3_left_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_heights_3_left_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_3_left_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}
speaker_page.update_UI_heights_3_right_distance = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_3_right_distance_range");
		range.val(value);
		var text = speaker_page.format_distance(value);
		update_UI_range_formatted(range, text);
	}
}
speaker_page.update_UI_heights_3_right_level = function (index, value) {
	if (index === speaker_page.current_profile_index) {
		var range = $get("#height_3_right_level_range");
		range.val(value);
		update_UI_range_text(range, value, "dB");
	}
}

speaker_page.update_distance_units = function (distint) {
	speaker_page.data.dist_units = distint;
	if ((speaker_page.current_profile_index >= 1) && (speaker_page.current_profile_index <= 4)) {
		speaker_page.update_distances(speaker_page.current_profile_index);
	}
}



var inputs_page = {}

inputs_page.maximum_number_of_inputs = 30;
inputs_page.first_names = false;
inputs_page.number_of_inputs = 0;
inputs_page.active_inputs = [];
inputs_page.added_inputs_indices = [];
inputs_page.arc_valid = 0;
inputs_page.cached_power = false;

inputs_page.query_commands = function () {
	return [COMMAND.ICN];
}

inputs_page.set_input_count = function (count) {
	if (!inputs_page.first_names) {
		// Starting. Add default names.
		for (var innum = 1; innum <= count; innum++) {
			inputs_page.add_input(innum);
		}
		inputs_page.first_names = true;
	} else {
		// May be change in number of inputs
		if (count > inputs_page.number_of_inputs) {
			if (count != (inputs_page.number_of_inputs + 1)) {
				logE("set_input_count too many extra");
			}
			inputs_page.add_input(count);
		} else if (count < inputs_page.number_of_inputs) {
			if (count != (inputs_page.number_of_inputs - 1)) {
				logE("set_input_count too many reducing");
			}
		}
	}
	inputs_page.number_of_inputs = count;
	inputs_page.update_UI_add_input();
	inputs_page.update_UI_remove_inuse_panels();
}

inputs_page.query_input_commands = function (index) {
	var model = device.model;
	var icommands = [COMMAND.Z1ARCVAL,
	get_input_command(COMMAND.IS_IN, index), get_input_command(COMMAND.IS_VID, index),
	get_input_command(COMMAND.IS_AIJ, index), get_input_command(COMMAND.IS_SP, index),
	get_input_command(COMMAND.IS_PS, index),
	get_input_command(COMMAND.IS_PC, index),
	get_input_command(COMMAND.IS_ARC, index), get_input_command(COMMAND.IS_DV, index),
	get_input_command(COMMAND.IS_LS, index),
	get_input_command(COMMAND.IS_IT, index)];
	if (device.is_mrxx40avm79) {
		icommands.push(get_input_command(COMMAND.IS_PM, index));
	}
	if (model === MODEL.AVM70 || model === MODEL.AVM90) {
		icommands.push(get_input_command(COMMAND.IS_CA, index));
		icommands.push(get_input_command(COMMAND.IS_RF, index));
	}
	return icommands;
}

inputs_page.load_page = function () {
	$get("#inputs_page").fadeIn();
	$get("#input_container .arc_na").val(TR("N / A"));

	turn_on_listeners();

	function turn_on_listeners() {
		$get("#add_input_button").on("click", function () {
			$get("#add_input_button").attr("disabled", true);
			var input_no = inputs_page.number_of_inputs + 1;
			if (DEMO_MODE) {
				log("Emulate Add Input " + COMMAND.IIAI + input_no + ";");
				command_handler.handle_incoming_command(COMMAND.IIAI + input_no);
			} else {
				if (inputs_page.added_inputs_indices.length >= inputs_page.maximum_number_of_inputs) {
					notification(TR("Cannot add any more inputs"));
				} else {
					log("add_input_button clicked " + input_no);
					send_command(COMMAND.IIAI + input_no + ";");
					//send_command(COMMAND.ICN + "?;");
					notification_changes_start();

					inputs_page.modify_data_structures(false, input_no);
					inputs_page.modify_panels(false, input_no);
					inputs_page.modify_add_insert_controls(false, input_no);
					inputs_page.activate_panel(input_no);
				}
			}
			setTimeout(update_panel_and_pages, 500, input_no);
		});

		$get("#insert_input_button").on("click", function () {
			$get("#insert_input_button").attr("disabled", true);
			var new_input = parseInt($get("#insert_input_select").val());
			if (DEMO_MODE) {
				log("Emulate Insert Input " + COMMAND.IIAI + new_input + ";");
				command_handler.handle_incoming_command(COMMAND.IIAI + new_input);
			} else {
				log("insert_input_button clicked " + new_input);
				socket.send(COMMAND.IIAI + new_input + ";");
				notification_changes_start();

				inputs_page.modify_data_structures(true, new_input);
				inputs_page.modify_panels(true, new_input);
				inputs_page.modify_add_insert_controls(true, new_input);
				inputs_page.activate_panel(new_input);
			}
			setTimeout(update_panel_and_pages, 500, new_input);
		});
	}

	function update_panel_and_pages(new_input) {
		inputs_page.update_UI_add_input();
		if (!DEMO_MODE) {
			// Update the other pages. Their settings affect the remove_panel_button_ controls.
			main_zone_page.add_input(new_input);
			zone_2_page.add_input(new_input);
			general_page.add_input(new_input);
			network_page.add_input(new_input);
		}
		inputs_page.update_UI_remove_inuse_panels();
		send_query_commands(inputs_page.query_input_commands(new_input));
	}
}

inputs_page.unload_page = function () {
	$get("#inputs_page").hide();

	turn_off_listeners();

	function turn_off_listeners() {
		$get("#add_input_button").off("click");
		$get("#insert_input_button").off("click");
	}
}

inputs_page.is_valid_input_index = function (input_index) {
	return input_index > 0 && input_index <= inputs_page.maximum_number_of_inputs;
}

inputs_page.input_model = function (v) {
	var im = {
		id: "input_" + v,
		name: TR("Input %1", [v])
	};
	return im;
};

inputs_page.modify_data_structures = function (binsert, input_num) {
	if (binsert) {
		var index = inputs_page.added_inputs_indices.indexOf(input_num);
		inputs_page.added_inputs_indices.splice(index, 0, input_num);
		inputs_page.active_inputs.splice(index, 0, inputs_page.input_model(input_num));
		for (var incnt = index + 1; incnt < inputs_page.added_inputs_indices.length; incnt++) {
			inputs_page.added_inputs_indices[incnt]++;
			var x = inputs_page.active_inputs[incnt].id;
			var y = x.substring("input_".length);
			var z = parseInt(y);
			inputs_page.active_inputs[incnt].id = "input_" + (z + 1);
		}
	} else {
		inputs_page.added_inputs_indices.push(input_num);
		inputs_page.active_inputs.push(inputs_page.input_model(input_num));
	}
	inputs_page.number_of_inputs++;
}

inputs_page.modify_panels = function (binsert, input_num) {
	if (binsert) {
		// Shift the id attributes and function handlers of the following panels
		var input_no;
		var index = inputs_page.added_inputs_indices.length - 1;
		while ((index >= 0) &&
			((input_no = inputs_page.added_inputs_indices[index]) >= input_num)) {
			inputs_page.panel_turn_off_listeners(input_no);
			inputs_page.panel_move_ids(input_no, input_no + 1);
			inputs_page.panel_turn_on_listeners(input_no + 1);
			index--;
		}
		inputs_page.add_ids_to_template(input_num);
		var next_panel = "#input_panel_root_" + (input_num + 1);
		var template = $get("#input_panel_template");
		$get(template.html()).insertBefore($get(next_panel));
	} else {
		inputs_page.add_ids_to_template(input_num);
		template = $get("#input_panel_template");
		$get(template.html()).insertBefore($get("#add_input_button").parent());
	}
	inputs_page.remove_ids_from_template();
	$get("#input_container .arc_na").val(TR("N / A"));
}

inputs_page.add_ids_to_template = function (input_num) {
	var model = device.model;
	$get("#input_panel_template .input_panel_template_root").attr("id", "input_panel_root_" + input_num);
	$get("#input_panel_template .input_name_title").attr("id", "input_panel_title_" + input_num);
	$get("#input_panel_template .remove_input_button").attr("id", "remove_panel_button_" + input_num);
	$get("#input_panel_template .remove_input_button img").attr("alt", "delete input " + input_num);

	$get("#input_panel_template .expand_collapse_button").attr("id", "expand_collapse_button_" + input_num);
	$get("#input_panel_template .expand_collapse_button img").attr("alt", "expand input panel " + input_num);
	$get("#input_panel_template .input_controls").attr("id", "input_controls_" + input_num);

	$get("#input_panel_template .input_name_l_").attr("id", "input_name_l_" + input_num);
	$get("#input_panel_template .input_name_l_").attr("for", "input_name_i_" + input_num);
	$get("#input_panel_template .input_name_i_").attr("id", "input_name_i_" + input_num);
	$get("#input_panel_template .input_name_b_").attr("id", "input_name_b_" + input_num);

	$get("#input_panel_template .video_input_l_").attr("id", "video_input_l_" + input_num);
	$get("#input_panel_template .video_input_l_").attr("for", "video_input_select_" + input_num);
	$get("#input_panel_template .video_input_select").attr("id", "video_input_select_" + input_num);
	var optvione = $get("#video_input_select_" + input_num + " option").eq(1);
	if ((optvione != null) && optvione.val() !== "1") {
		var selvi = $get("#video_input_select_" + input_num);
		if (model == MODEL.MRXSLM) {
			selvi.append(new Option("HDMI", "1"));
		} else if (device.is_mrxx40avm79) {
			for (var hdminum = 1; hdminum <= 7; hdminum++) {
				selvi.append(new Option("HDMI " + hdminum, hdminum));
			}
		}
	}
	$get("#input_panel_template .audio_input_l_").attr("id", "audio_input_l_" + input_num);
	$get("#input_panel_template .audio_input_l_").attr("for", "audio_input_select_" + input_num);
	$get("#input_panel_template .audio_input_select").attr("id", "audio_input_select_" + input_num);
	if ($get("#audio_input_select_" + input_num + " option").length <= 2) {
		var selai = $get("#audio_input_select_" + input_num);
		var opt2Text = "HDMI eARC";   // MRX SLM, 540, 740, 1140
		if (model == MODEL.MRXSLM) {
			opt2Text = TR("TV (Audio Return Channel)");
		} else if ((model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			opt2Text = TR("HDMI Audio Return Channel");
		}
		selai.append(new Option(opt2Text, "2"));
		if (model == MODEL.MRXSLM) {
			selai.append(new Option(TR("Optical"), "3"));
			selai.append(new Option(TR("Analog"), "4"));
			selai.append(new Option(TR("Streaming"), "5"));
			selai.append(new Option(TR("Bluetooth"), "6"));
		} else if (device.is_mrxx40avm79) {
			selai.append(new Option(TR("Digital Coaxial 1"), "3"));
			selai.append(new Option(TR("Digital Coaxial 2"), "4"));
			selai.append(new Option(TR("Digital Optical 1"), "5"));
			selai.append(new Option(TR("Digital Optical 2"), "6"));
			selai.append(new Option(TR("Digital Optical 3"), "7"));
			selai.append(new Option(TR("Analog 1"), "8"));
			selai.append(new Option(TR("Analog 2"), "9"));
			selai.append(new Option(TR("Analog 3"), "10"));
			selai.append(new Option(TR("Analog 4"), "11"));
			var opt12Text = TR("Analog 5");   // MRX SLM, 540, 740, 1140
			if ((model == MODEL.AVM70) || (model == MODEL.AVM90)) {
				opt12Text = "Phono (MM)";
			}
			selai.append(new Option(opt12Text, "12"));
			selai.append(new Option(TR("Streaming"), "13"));
			selai.append(new Option(TR("Bluetooth"), "14"));
		}
	}
	$get("#input_panel_template .speaker_profile_l_").attr("id", "speaker_profile_l_" + input_num);
	$get("#input_panel_template .speaker_profile_l_").attr("for", "speaker_profile_select_" + input_num);
	$get("#input_panel_template .speaker_profile_select").attr("id", "speaker_profile_select_" + input_num);
	if ((model === MODEL.MRX540) || (model === MODEL.MRX740) || (model === MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		$get("#input_panel_template .mode_preset_for_mono_source_l_").attr("id", "mode_preset_for_mono_source_l_" + input_num);
		$get("#input_panel_template .mode_preset_for_mono_source_l_").attr("for", "mode_preset_for_mono_source_select_" + input_num);
		$get("#input_panel_template .mode_preset_for_mono_source_select").attr("id", "mode_preset_for_mono_source_select_" + input_num);
	}
	$get("#input_panel_template .mode_preset_for_stereo_source_l_").attr("id", "mode_preset_for_stereo_source_l_" + input_num);
	$get("#input_panel_template .mode_preset_for_stereo_source_l_").attr("for", "mode_preset_for_stereo_source_select_" + input_num);
	$get("#input_panel_template .mode_preset_for_stereo_source_select").attr("id", "mode_preset_for_stereo_source_select_" + input_num);
	$get("#input_panel_template .mode_preset_for_multi_ch_source_l_").attr("id", "mode_preset_for_multi_ch_source_l_" + input_num);
	$get("#input_panel_template .mode_preset_for_multi_ch_source_l_").attr("for", "mode_preset_for_multi_ch_source_select_" + input_num);
	$get("#input_panel_template .mode_preset_for_multi_ch_source_select").attr("id", "mode_preset_for_multi_ch_source_select_" + input_num);
	if ((model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		$get("#input_panel_template .no_radio_button").attr("id", "no_radio_button_" + input_num);
		$get("#input_panel_template .khz_radio_button").attr("id", "khz_radio_button_" + input_num);
	}
	var ca_option = "problem";
	if (model === MODEL.MRX540 || model === MODEL.MRX740 || model === MODEL.MRX1140) {
		ca_option = TR("96 kHz");
	} else if (model === MODEL.AVM70 || model === MODEL.AVM90) {
		ca_option = TR("192 kHz");
	}
	$get("#khz_radio_button_" + input_num).html(ca_option);

	$get("#input_panel_template .anthem_room_correction_l_").attr("id", "anthem_room_correction_l_" + input_num);
	$get("#input_panel_template .anthem_room_correction_sw_").attr("id", "anthem_room_correction_sw_" + input_num);
	$get("#input_panel_template .anthem_room_correction_na_").attr("id", "anthem_room_correction_na_" + input_num);
	var is_arc = inputs_page.arc_valid == 1;
	if (is_arc) {
		$get("#input_panel_template .arc_done").show();
		$get("#input_panel_template .arc_na").hide();
		$get("#input_panel_template .anthem_room_correction_l_").attr("for", "anthem_room_correction_sw_" + input_num);
	} else {
		$get("#input_panel_template .arc_done").hide();
		$get("#input_panel_template .arc_na").show();
		$get("#input_panel_template .anthem_room_correction_l_").attr("for", "anthem_room_correction_na_" + input_num);
	}
	$get("#input_panel_template .anthem_room_correction_sw_").attr("disabled", !is_arc);
	$get("#input_panel_template .dolby_audio_l_").attr("id", "dolby_audio_l_" + input_num);
	$get("#input_panel_template .dolby_audio_l_").attr("for", "dolby_audio_select_" + input_num);
	$get("#input_panel_template .dolby_audio_select").attr("id", "dolby_audio_select_" + input_num);

	$get("#input_panel_template .lip_sync_l_").attr("id", "lip_sync_l_" + input_num);
	$get("#input_panel_template .lip_sync_l_").attr("for", "lip_sync_range_" + input_num);
	$get("#input_panel_template .lip_sync_range").attr("id", "lip_sync_range_" + input_num);
	$get("#input_panel_template .input_trim_l_").attr("id", "input_trim_l_" + input_num);
	$get("#input_panel_template .input_trim_l_").attr("for", "input_trim_range_" + input_num);
	$get("#input_panel_template .input_trim_range").attr("id", "input_trim_range_" + input_num);

	if ((model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		$get("#input_panel_template .rumble_filter_l_").attr("id", "rumble_filter_l_" + input_num);
		$get("#input_panel_template .rumble_filter_l_").attr("for", "rumble_filter_range_" + input_num);
		$get("#input_panel_template .rumble_filter_range").attr("id", "rumble_filter_range_" + input_num);
	}
}

inputs_page.remove_ids_from_template = function () {
	var classes = ["input_panel_template_root", "input_name_title",
		"remove_input_button", "expand_collapse_button",
		"input_controls", "input_name_l_", "input_name_i_", "input_name_b_",
		"video_input_l_", "video_input_select", "audio_input_l_", "audio_input_select",
		"speaker_profile_l_", "speaker_profile_select",
		"mode_preset_for_mono_source_l_", "mode_preset_for_mono_source_select",
		"mode_preset_for_stereo_source_l_", "mode_preset_for_stereo_source_select",
		"mode_preset_for_multi_ch_source_l_", "mode_preset_for_multi_ch_source_select",
		"no_radio_button", "khz_radio_button",
		"anthem_room_correction_l_", "anthem_room_correction_sw_", "anthem_room_correction_na_",
		"dolby_audio_l_", "dolby_audio_select", "lip_sync_l_", "lip_sync_range",
		"input_trim_l_", "input_trim_range", "rumble_filter_l_", "rumble_filter_range"];
	for (var count = 0; count < classes.length; count++) {
		$get("#input_panel_template ." + classes[count]).removeAttr("id");
	}
	$get("#input_panel_template label").removeAttr("for");
}

inputs_page.modify_add_insert_controls = function (binsert, input_num) {
	var selectEl = $get('#insert_input_select');
	if (binsert) {
		// Change the value of the existing options
		var optv;
		for (var innum = inputs_page.number_of_inputs - 1; innum >= input_num; innum--) {
			optv = selectEl.find("option[value=" + innum + "]");
			if (optv.length > 0) {
				optv.attr("value", innum + 1);
			}
		}

		// Insert one option
		$get(inputs_page.option_fragment(input_num)).insertBefore($get(optv));
	} else {
		// Add one option
		selectEl.append(inputs_page.option_fragment(input_num));
	}
}

inputs_page.activate_panel = function (input_num) {
	inputs_page.update_UI_input_name(input_num, inputs_page.input_model(input_num).name);
	inputs_page.panel_turn_on_listeners(input_num);
	$get('#input_container [data-toggle="popover"]').popover(); // init popovers
}

inputs_page.option_fragment = function (v) {
	var frag = "<option value='" + v + "'>" + TR("Input %1", [v]) + "</option>";
	return frag;
}

inputs_page.add_input = function (input_num) {

	if (inputs_page.added_inputs_indices.length >= inputs_page.maximum_number_of_inputs || input_num === -1) {
		notification(TR("Cannot add any more inputs"));
		return;
	}
	if (!inputs_page.is_valid_input_index(input_num)) {
		logE("Cannot add input " + input_num);
		return;
	}

	// Add a generic input.
	$get("#no_inputs_label").hide();

	// Modify data structures
	var binsert = input_num <= inputs_page.number_of_inputs;
	var move_list = inputs_page.modify_data_structures(binsert, input_num);

	// Modify panels
	inputs_page.modify_panels(binsert, input_num, move_list);

	// Modify insert-before selector
	inputs_page.modify_add_insert_controls(binsert, input_num);

	inputs_page.activate_panel(input_num);
	send_query_commands(inputs_page.query_input_commands(input_num));
}

inputs_page.panel_turn_on_listeners = function (index) {
	$get("#remove_panel_button_" + index).on("click", function () {
		if (!inputs_page.is_valid_input_index(index)) {
			logE("Cannot delete invalid index:" + index)
		} else {
			log("remove_panel_button_" + index + " clicked");
			var in_name = inputs_page.active_inputs[index - 1].name;
			if (window.confirm(TR("Click OK to delete input '%1'", [in_name]))) {
				log("remove_panel_button_" + index + " removing");
				if (DEMO_MODE) {
					log(COMMAND.IDAI + index + ";");
				} else {
					notification_changes_start();
					send_command(COMMAND.IDAI + index + ";"); // does not echo 2020-07-06
				}
				var cut_index = inputs_page.added_inputs_indices.indexOf(index);
				var move_list = [];
				for (var incnt = cut_index; incnt < inputs_page.added_inputs_indices.length; incnt++) {
					move_list.push(inputs_page.added_inputs_indices[incnt]);
				}

				// Remove the panel
				inputs_page.remove_input(index); // force from here 2020-07-07

				// Shift the id attributes and function handlers of the following panels
				for (incnt = 0; incnt < move_list.length - 1; incnt++) {
					inputs_page.panel_turn_off_listeners(move_list[incnt + 1]);
					inputs_page.panel_move_ids(move_list[incnt + 1], move_list[incnt]);
					inputs_page.panel_turn_on_listeners(move_list[incnt]);
				}

				// Request updates
				var commands = [];
				for (incnt = cut_index; incnt < inputs_page.added_inputs_indices.length; incnt++) {
					var innum = inputs_page.added_inputs_indices[incnt] - 1;
					inputs_page.added_inputs_indices[incnt] = innum;
					commands.push(COMMAND.IS_IN.stuffus(innum));
				}
				if (!DEMO_MODE) {
					send_command(COMMAND.ICN + "?;");
					if (commands.length > 0) {
						send_query_commands(commands);
					}
				}

				// Remove from other pages
				main_zone_page.remove_input(index);
				zone_2_page.remove_input(index);
				general_page.remove_input(index);
				network_page.remove_input(index);

				// Update panel removal buttons
				inputs_page.update_UI_remove_inuse_panels();
			}
		}
	});
	$get("#expand_collapse_button_" + index).on("click", function () {
		var controls = $get("#input_controls_" + index);
		var trimmed_name = inputs_page.active_inputs[index - 1].name;
		if (controls.is(":visible")) {
			controls.slideUp();
			//$("#expand_collapse_button_" + index + " img").attr("alt", "expand input panel " + index);
			$get("#expand_collapse_button_" + index + " img").attr("alt", TL("expand_palt_h", [trimmed_name]));
			$get("#expand_collapse_button_" + index + " img").attr("src", "img/edit.png");
		} else {
			controls.slideDown();
			//$("#expand_collapse_button_" + index + " img").attr("alt", "collapse input panel " + index);
			$get("#expand_collapse_button_" + index + " img").attr("alt", TL("collapse_palt_h", [trimmed_name]));
			$get("#expand_collapse_button_" + index + " img").attr("src", "img/up_arrow.png");
			inputs_page.update_UI_input_name(index, inputs_page.active_inputs[index - 1].name);
		}
	});

	$get("#input_name_i_" + index).on("keydown", function (e) {
		var ENTER_KEY = 13; // trigger key
		if (e.which === ENTER_KEY)
			$get("#input_name_b_" + index).click();
		return is_valid_key_code_for_string_input(e.which, e.shiftKey, e.altKey);
	});
	$get("#input_name_i_" + index).on("focus", function () {
		$get("#input_name_i_" + index).removeClass("error-field");
	});
	$get("#input_name_b_" + index).on("click", function () {
		var value = $get("#input_name_i_" + index).val();
		if (value.length > 0) {
			inputs_page.update_UI_input_name(index, value);
			value = value.pad_with_spaces(16);
			send_and_query_command(get_input_command(COMMAND.IS_IN, index), value);
		} else {
			$get("#input_name_i_" + index).addClass("error-field");
			$get('#modal').on('hidden.bs.modal', function () {
				$get("#input_name_i_" + index).focus();
			});
			show_modal(TR("Error"), TL("warn_no_iname"));
		}
	});
	$get("#video_input_select_" + index).on("change", function () {
		var value = this.value;
		log("on video_input_select: " + value);
		send_and_query_command(get_input_command(COMMAND.IS_VID, index), value);
	});
	$get("#audio_input_select_" + index).on("change", function () {
		var value = this.value;
		log("on audio_input_select: " + value);
		send_and_query_command(get_input_command(COMMAND.IS_AIJ, index), value);
	});
	$get("#speaker_profile_select_" + index).on("change", function () {
		var value = this.value;
		log("on speaker_profile_select: " + value);
		send_and_query_command(get_input_command(COMMAND.IS_SP, index), value);
	});
	$get("#mode_preset_for_mono_source_select_" + index).on("change", function () {
		var value = this.value;
		log("on mode_preset_for_mono_source_select: " + value);
		send_and_query_command(get_input_command(COMMAND.IS_PM, index), value);
	});
	$get("#mode_preset_for_stereo_source_select_" + index).on("change", function () {
		var value = this.value;
		log("on mode_preset_for_stereo_source_select: " + value);
		send_and_query_command(get_input_command(COMMAND.IS_PS, index), value);
	});
	$get("#mode_preset_for_multi_ch_source_select_" + index).on("change", function () {
		var value = this.value;
		log("on mode_preset_for_multi_ch_source_select: " + value);
		send_and_query_command(get_input_command(COMMAND.IS_PC, index), value);
	});
	$get("#no_radio_button_" + index).on("keydown", function (e) {
		var ENTER_KEY = 13; // trigger key
		if (e.which === ENTER_KEY)
			$get("#no_radio_button_" + index).click();
		var TAB_KEY = 9;
		return e.which === TAB_KEY;
	});
	$get("#no_radio_button_" + index).on("click", function () {
		log("on no_radio_button");
		inputs_page.update_UI_convert_analog(index, 0);
		send_and_query_command(get_input_command(COMMAND.IS_CA, index), 0);
	});
	$get("#khz_radio_button_" + index).on("keydown", function (e) {
		var ENTER_KEY = 13; // trigger key
		if (e.which === ENTER_KEY)
			$get("#khz_radio_button_" + index).click();
		var TAB_KEY = 9;
		return e.which === TAB_KEY;
	});
	$get("#khz_radio_button_" + index).on("click", function () {
		log("on khz_radio_button");
		inputs_page.update_UI_convert_analog(index, 1);
		send_and_query_command(get_input_command(COMMAND.IS_CA, index), 1);
	});
	$get("#anthem_room_correction_sw_" + index).on("click", function () {
		var aattr = $get("#anthem_room_correction_sw_" + index).attr("aria-checked");
		log("anthem_room_correction_sw_" + index + ": " + aattr);
		var value = aattr == "true" ? 0 : 1; // toggle
		send_and_query_command(get_input_command(COMMAND.IS_ARC, index), value);
	});
	$get("#dolby_audio_select_" + index).on("change", function () {
		var value = this.value;
		log("on dolby_audio_select: " + value);
		send_and_query_command(get_input_command(COMMAND.IS_DV, index), value);
	});
	$get("#rumble_filter_range_" + index).on("change", function () {
		var value = parseInt(this.value);
		log("on rumble_filter_range: " + value);
		inputs_page.update_UI_rumble_filter(index, value);
		send_and_query_command(get_input_command(COMMAND.IS_RF, index), value);
	});
	$get("#lip_sync_range_" + index).on("change", function () {
		var value = parseInt(this.value);
		log("on lip_sync_range: " + value);
		inputs_page.update_UI_lip_sync(index, value);
		send_and_query_command(get_input_command(COMMAND.IS_LS, index), value);
	});
	$get("#input_trim_range_" + index).on("change", function () {
		var value = parseFloat(this.value);
		log("on input_trim_range: " + value);
		inputs_page.update_UI_input_trim(index, value);
		send_and_query_command(get_input_command(COMMAND.IS_IT, index), value);
	});

	$get("#input_panel_root_" + index + " .switch_track").on("keydown", function (e) {
		return handle_switch_keydown($get(this), e.which);
	});
	$get("#input_panel_root_" + index + " .minus").on("click", function () {
		handle_range_minus_button_click($get(this));
	});
	$get("#input_panel_root_" + index + " .plus").on("click", function () {
		handle_range_plus_button_click($get(this));
	});
}

inputs_page.remove_input = function (index) {

	if (!inputs_page.added_inputs_indices.includes(index)) {
		log("Warning: cannot remove input index that was not added: " + index);
		return;
	}
	if (!inputs_page.is_valid_input_index(index)) {
		logE("cannot remove index: " + index);
		return;
	}

	var cut_index = inputs_page.added_inputs_indices.indexOf(index);
	inputs_page.added_inputs_indices.splice(cut_index, 1);
	inputs_page.active_inputs.splice(cut_index, 1);

	// Remove option from insert Input control
	$get("#insert_input_select option[value='" + index + "']").remove();

	// value should be 1..highest
	var selectEl = $get('#insert_input_select');
	var curlength = $get('#insert_input_select option').length;
	for (var input_value = index; input_value <= curlength; input_value++) {
		var optv = selectEl.find("option[value=" + (input_value + 1) + "]");
		if (optv.length > 0) {
			optv.attr("value", input_value);
		}
	}

	// Remove Input panel
	inputs_page.panel_turn_off_listeners(index)

	$get("#input_panel_root_" + index).remove();
	inputs_page.number_of_inputs--;
	inputs_page.update_UI_add_input();
	inputs_page.update_UI_remove_inuse_panels();
	if (inputs_page.added_inputs_indices.length == 0)
		$get("#no_inputs_label").show();
}

inputs_page.panel_turn_off_listeners = function (index) {
	$get("#remove_panel_button_" + index).off("click");
	$get("#expand_collapse_button_" + index).off("click");
	$get("#input_name_i_" + index).off("keydown");
	$get("#input_name_i_" + index).off("focus");
	$get("#input_name_b_" + index).off("click");
	$get("#video_input_select_" + index).off("change");
	$get("#audio_input_select_" + index).off("change");
	$get("#speaker_profile_select_" + index).off("change");
	$get("#mode_preset_for_mono_source_select_" + index).off("change");
	$get("#mode_preset_for_stereo_source_select_" + index).off("change");
	$get("#mode_preset_for_multi_ch_source_select_" + index).off("change");
	$get("#no_radio_button_" + index).off("keydown");
	$get("#no_radio_button_" + index).off("click");
	$get("#khz_radio_button_" + index).off("keydown");
	$get("#khz_radio_button_" + index).off("change");
	$get("#anthem_room_correction_sw_" + index).off("click");
	$get("#dolby_audio_select_" + index).off("change");
	$get("#rumble_filter_range_" + index).off("change");
	$get("#lip_sync_range_" + index).off("change");
	$get("#input_trim_range_" + index).off("change");

	$get("#input_panel_root_" + index + " .switch_track").off("keydown");
	$get("#input_panel_root_" + index + " .minus").off("click");
	$get("#input_panel_root_" + index + " .plus").off("click");
}

inputs_page.panel_move_ids = function (from_input, to_input) {
	var ids = ["input_panel_root_", "input_panel_title_",
		"remove_panel_button_", "expand_collapse_button_", "input_controls_",
		"input_name_l_", "input_name_i_", "input_name_b_",
		"video_input_l_", "video_input_select_",
		"audio_input_l_", "audio_input_select_", "speaker_profile_l_", "speaker_profile_select_",
		"mode_preset_for_mono_source_l_", "mode_preset_for_mono_source_select_",
		"mode_preset_for_stereo_source_l_", "mode_preset_for_stereo_source_select_",
		"mode_preset_for_multi_ch_source_l_", "mode_preset_for_multi_ch_source_select_",
		"no_radio_button_", "khz_radio_button_",
		"anthem_room_correction_l_", "anthem_room_correction_sw_", "anthem_room_correction_na_",
		"dolby_audio_l_", "dolby_audio_select_", "rumble_filter_l_", "rumble_filter_range_",
		"lip_sync_l_", "lip_sync_range_",
		"input_trim_l_", "input_trim_range_"];
	for (var count = 0; count < ids.length; count++) {
		var from_for = $get("#" + ids[count] + from_input).attr("for");
		if (from_for != undefined) {
			var uix = from_for.lastIndexOf("_");
			if (uix >= 0) {
				var to_for = from_for.substring(0, uix + 1) + to_input;
			}
			$get("#" + ids[count] + from_input).attr("for", to_for);
		}
		$get("#" + ids[count] + from_input).attr("id", ids[count] + to_input);
	}
}

inputs_page.enable_controls = function (which) {
	inputs_page.cached_power = which;
	const template_ids = [
		"#input_name_i_", "#input_name_b_", "#video_input_select_",
		"#audio_input_select_", "#speaker_profile_select_",
		"#mode_preset_for_mono_source_select_",
		"#mode_preset_for_stereo_source_select_",
		"#mode_preset_for_multi_ch_source_select_",
		"#no_radio_button_", "#khz_radio_button_",
		"#anthem_room_correction_sw_", "#dolby_audio_select_",
		"#rumble_filter_range_", "#lip_sync_range_",
		"#input_trim_range_"
	];
	inputs_page.update_UI_add_input();
	for (var incount = 1; incount <= inputs_page.number_of_inputs; incount++) {
		for (var idix = 0; idix < template_ids.length; idix++) {
			var controlid = template_ids[idix] + incount;
			$get(controlid).attr("disabled", !which);
		}
	}
	inputs_page.update_UI_remove_inuse_panels();

	var classm = "#inputs_page .minus";
	enable_class(classm, which);
	var classp = "#inputs_page .plus";
	enable_class(classp, which);
	var classv = "#inputs_page .range_value";
	enable_class(classv, which);
}

// Remote Get Settings
inputs_page.get_speaker_profile = function (input_num) {
	var value_str = $get("#speaker_profile_select_" + input_num).val();
	return parseInt(value_str) + 1;
}

// Update UI
inputs_page.update_UI_add_input = function () {
	var gray = !inputs_page.cached_power || (inputs_page.number_of_inputs >= inputs_page.maximum_number_of_inputs);
	$get("#add_input_button").attr("disabled", gray);
	$get("#insert_input_button").attr("disabled", gray);
}

inputs_page.update_UI_remove_inuse_panels = function () {
	for (var incount = 1; incount <= inputs_page.number_of_inputs; incount++) {
		var gray = !inputs_page.cached_power;
		if ((incount == 1) && (inputs_page.added_inputs_indices.length == 1)) {
			gray = true;
		}
		if (incount == main_zone_page.current_input()) {
			gray = true;
		}
		if (device.use_zone2 && (incount == zone_2_page.current_input())) {
			gray = true;
		}
		$get("#remove_panel_button_" + incount).attr("disabled", gray);
	}
}

inputs_page.update_UI_arc_valid = function (value) {
	inputs_page.arc_valid = value;
	var is_arc = inputs_page.arc_valid == 1;
	if (is_arc) {
		$get(".arc_done").show();
		$get(".arc_na").hide();
	} else {
		$get(".arc_done").hide();
		$get(".arc_na").show();
	}
	for (var incount = 1; incount <= inputs_page.number_of_inputs; incount++) {
		if (is_arc) {
			$get("#anthem_room_correction_sw_" + incount).attr("disabled", false);
			$get("#anthem_room_correction_l_" + incount).attr("for", "anthem_room_correction_sw_" + incount);
		} else {
			$get("#anthem_room_correction_l_" + incount).attr("for", "anthem_room_correction_na_" + incount);
		}
	}
}

inputs_page.update_UI_profile_name = function (profile_index, profile_name) {
	var trimmed_name = profile_name.trim();
	$get(".speaker_profile_select").each(function () {
		this.children[profile_index - 1].text = trimmed_name;
	});
}
inputs_page.update_UI_input_name = function (index, name) {
	var trimmed_name = name.trim();
	inputs_page.active_inputs[index - 1].name = trimmed_name;
	$get("#insert_input_select option[value='" + index + "']").text(trimmed_name);
	$get("#input_panel_title_" + index).text(index + ": " + trimmed_name);
	$get("#input_name_i_" + index).val(trimmed_name);
	var controls = $get("#input_controls_" + index);
	if (controls.is(":visible")) {
		$get("#expand_collapse_button_" + index + " img").attr("alt", TL("collapse_palt_h", [trimmed_name]));
	} else {
		$get("#expand_collapse_button_" + index + " img").attr("alt", TL("expand_palt_h", [trimmed_name]));
	}
	$get("#remove_panel_button_" + index + " img").attr("alt", TL("delete_palt_h", [trimmed_name]));
}
inputs_page.update_UI_video_input = function (index, name) {
	$get("#video_input_select_" + index).val(name);
}
inputs_page.update_UI_audio_input = function (input_num, audiotype) {
	$get("#audio_input_select_" + input_num).val(audiotype);
}
inputs_page.update_UI_speaker_profile = function (input_num, value) {
	$get("#speaker_profile_select_" + input_num).val(value);
}
inputs_page.update_UI_mode_preset_for_mono_source = function (index, name) {
	$get("#mode_preset_for_mono_source_select_" + index).val(name);
}
inputs_page.update_UI_mode_preset_for_stereo_source = function (index, name) {
	$get("#mode_preset_for_stereo_source_select_" + index).val(name);
}
inputs_page.update_UI_mode_preset_for_multi_ch_source = function (index, name) {
	$get("#mode_preset_for_multi_ch_source_select_" + index).val(name);
}
inputs_page.update_UI_convert_analog = function (index, value) {
	if (value === 0) {  // No
		$get("#no_radio_button_" + index).addClass("active");
		$get("#khz_radio_button_" + index).removeClass("active");
	} else if (value === 1) { // kHz
		$get("#no_radio_button_" + index).removeClass("active");
		$get("#khz_radio_button_" + index).addClass("active");
	} else {
		logE("update_UI_convert_analog wrong value:" + value);
	}
}
inputs_page.update_UI_anthem_room_correction = function (index, value) {
	$get("#anthem_room_correction_sw_" + index).attr("aria-checked", value == 1);
	$get("#anthem_room_correction_sw_" + index).val(value == 1 ? TR("Enabled") : TR("Disabled"));
}
inputs_page.update_UI_dolby_audio_proc = function (index, name) {
	$get("#dolby_audio_select_" + index).val(name);
}
inputs_page.update_UI_rumble_filter = function (index, value) {
	var range = $get("#rumble_filter_range_" + index);
	range.val(value);
	if (value < 10) {
		range.parent().find(".range_value").text(TR("Off"));
	} else {
		update_UI_range_text(range, value, TR("Hz"), 0);
	}
}
inputs_page.update_UI_lip_sync = function (index, value) {
	var range = $get("#lip_sync_range_" + index);
	range.val(value);
	update_UI_range_text(range, value, TR("ms"), 0);
}
inputs_page.update_UI_input_trim = function (index, value) {
	var range = $get("#input_trim_range_" + index);
	range.val(value);
	update_UI_range_text(range, value, TR("dB"));
}

inputs_page.is_audio_streaming = function (input_num) {
	var stream_sel = (device.model == MODEL.MRXSLM) ? 5 : 13;
	var audio_sel = $get("#audio_input_select_" + input_num).val();
	return parseInt(audio_sel) == stream_sel;
}



var network_page = {};

// Section 6.3.2
const TCP_PORT_MIN = 1025;
const TCP_PORT_MAX = 49150;

var ENCRYPTION_NONE = "none";
var ENCRYPTION_WEP_OPEN = "wep";
var ENCRYPTION_WPA_PSK = "wpa_psk";

network_page.cached_power = 0;
network_page.data = {
	tcp_port: 0,
	status_uses_wifi: false,
	ethernet_mode_enum: 0,
	wifi_mode_enum: 0,
	wifi_manual_bool: 0,
	wifi_network: "",
	wifi_networks: [],
	encryptopt: ENCRYPTION_WPA_PSK,
	trigger_controls: [0, 0, 0],
	trigger_powers: [0, 0, 0]
};
network_page.demo = {
	dhcp: 0, ip: "", netmask: "", gateway: "", dns: "",
	ssid: "", manual: 0, encryption: "wpa_psk"
};

// see assets/components/jquery/jquery.mask.js, formats ip addresses
$get(function () {
	$get('.ip').mask('0ZZ.0ZZ.0ZZ.0ZZ', { translation: { 'Z': { pattern: /[0-9]/, optional: true } } });
})

function validate_ip_address(ip) {
	return (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip));
}

function validate_ip_control(id) {
	var ip = $get(id).val();
	if (!validate_ip_address(ip)) {
		$get(id).addClass("error-field");
		return false;
	}
	return true;
}

function validate_password(id) {
	var passcode = $get(id).val();
	var len = $get(id).val().length;
	if (network_page.data.encryptopt == ENCRYPTION_NONE) {
		return true;
	}
	if ((network_page.data.encryptopt == ENCRYPTION_WEP_OPEN) && ((len == 10) || (len == 26))) {
		const nohexes = /^[0-9a-fA-F]+$/;
		return nohexes.test(passcode);
	}
	if ((network_page.data.encryptopt == ENCRYPTION_WPA_PSK) && (len >= 8) && (len <= 63)) {
		return true;
	}
	$get(id).addClass("error-field");
	return false;
}

function validate_hidden(id) {
	var len = $get(id).val().length;
	if ((len > 0) && (len <= 32)) {
		return true;
	}
	$get(id).addClass("error-field");
	return false;
}

network_page.update_UI_model_name = function (devmodel) {
	// Add options when the device requires them
	for (var trig_no = 1; trig_no <= 3; trig_no++) {
		var powertid = "#trigger_?_power_select".replace("?", trig_no);
		if (device.use_zone2) {
			if ($get(powertid + " option").length <= 2) {
				$get(powertid).append($get('<option>', {
					value: 2,
					text: TR("Zone 2")
				}));
				$get(powertid).append($get('<option>', {
					value: 3,
					selected: "selected",
					text: TR("Main or Zone 2")
				}));
			}
		} else if (devmodel === MODEL.MRX540) {
			$get(powertid + " option[value='1']").attr("selected", "selected");
		}
	}
}

network_page.load_page = function () {
	$get("#network_page").fadeIn();

	// Initialize the controls and visibility
	network_page.update_UI_tcp_port(network_page.data.tcp_port);
	network_page.change_eth_ip_mode(network_page.data.ethernet_mode_enum);
	network_page.change_wifi_ip_mode(network_page.data.wifi_mode_enum);
	network_page.update_UI_wifi_manual(network_page.data.wifi_manual_bool);
	if ((network_page.data.wifi_network.length > 0) || (network_page.data.wifi_networks.length > 0)) {
		$get(".ssid_search_row").show();
	} else {
		$get(".ssid_search_row").hide();
	}

	network_page.update_network_status(TR("Fetching status"));
	network_page.clear_ip_status();
	if (DEMO_MODE) {
		network_page.update_wifi_config(network_page.demo);
	} else {
		// Update current IP status
		sue_network_page.sendGetNetworkInfo(network_page.configuration_callback);
		sue_network_page.sendGetNetworkProfile(network_page.configuration_callback);

		// Update trigger inputs
		if (device.is_mrxx40avm79 && !device.any_trig_inputs) {
			var trnum;
			var incnt;
			var commands = [];
			for (trnum = 1; trnum <= 3; trnum++) {
				for (incnt = 0; incnt < inputs_page.added_inputs_indices.length; incnt++) {
					var innum = inputs_page.added_inputs_indices[incnt];
					commands.push(COMMAND.GCT_I.replace('_', trnum) + innum);
				}
			}
			send_query_commands(commands);
			device.any_trig_inputs = true;
		}
	}

	turn_on_listeners();
	network_page.enable_controls(network_page.cached_power);

	function turn_on_listeners() {
		var keys = {
			BACKSPACE: 8,
			TAB: 9,
			ENTER: 13,
			SPACE: 32,
			END: 35,
			HOME: 36,
			LEFT: 37,
			UP: 38,
			RIGHT: 39,
			DOWN: 40,
			DELETE: 46,
			NUMPERIOD: 110,
			PERIOD: 190
		};

		// Network / Control panel
		$get("#tcp_port_input").on("keydown", function (e) {

			// trigger key
			if (e.which === keys.ENTER) {
				$get("#tcp_port_apply_button").click();
			}

			// control keys
			if (e.which === keys.DELETE || e.which === keys.BACKSPACE ||
				e.which === keys.TAB)
				return true;
			if (e.which >= keys.END && e.which <= keys.DOWN) // home, end, arrow keys
				return true;
			if (e.ctrlKey && !e.altKey && !e.shiftKey &&
				(e.which >= 65 && e.which <= 90)) {
				// control keys: select all, copy, paste, undo
				return true;
			}

			// accepted characters 0-9
			return !e.altKey && !e.shiftKey &&
				((e.which >= 48 && e.which <= 57) || (e.which >= 96 && e.which <= 105)); // 0-9
		});
		$get("#tcp_port_input").on("focus", function () {
			$get("#tcp_port_input").removeClass("error-field");
		});
		$get("#tcp_port_apply_button").on("click", function () {
			var value = parseInt($get("#tcp_port_input").val());
			if (value >= TCP_PORT_MIN && value <= TCP_PORT_MAX) {
				$get("#tcp_port_apply_button").focus();
				send_and_query_command(COMMAND.GCTCP, value);
			} else {
				$get("#tcp_port_input").addClass("error-field");
				$get('#modal').on('hidden.bs.modal', function () {
					$get("#tcp_port_input").focus();
				});
				show_modal(TR("Error"), TL("warn_bad_port", [TCP_PORT_MIN, TCP_PORT_MAX]));
			}
		});
		$get("#tx_status_select").on("change", function () {
			var value = this.value;
			log("on tx_status_select: " + value);
			send_and_query_command(COMMAND.GCTXS, value);
		});
		$get("#ir_select").on("change", function () {
			var value = this.value;
			log("on ir_select: " + value);
			send_and_query_command(COMMAND.GCIR, value);
		});
		$get("#rear_ir_sw").on("click", function () {
			var aattr = $get("#rear_ir_sw").attr("aria-checked");
			log("rear_ir_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCRIR, value);
		});
		$get("#front_ir_sw").on("click", function () {
			var aattr = $get("#front_ir_sw").attr("aria-checked");
			log("front_ir_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCFIR, value);
		});
		$get("#trigger_delay_select").on("change", function () {
			var value = this.value;
			log("on trigger_delay_select: " + value);
			send_and_query_command(COMMAND.GCTD, value);
		});

		// Ethernet and Wi-Fi panels
		$get("#eth_IPA, #eth_SNM, #eth_IPG, #eth_DNS, #wifi_IPA, #wifi_SNM, #wifi_IPG, #wifi_DNS").on("keydown", function (e) {

			// control keys
			if (e.which === keys.DELETE || e.which === keys.BACKSPACE ||
				e.which === keys.TAB || e.which === keys.PERIOD ||
				e.which === keys.NUMPERIOD)
				return true;
			if (e.which >= keys.END && e.which <= keys.DOWN) // home, end, arrow keys
				return true;
			if (e.ctrlKey && !e.altKey && !e.shiftKey &&
				(e.which >= 65 && e.which <= 90)) {
				// control keys: select all, copy, paste, undo
				return true;
			}

			// accepted characters 0-9
			return !e.altKey && !e.shiftKey &&
				((e.which >= 48 && e.which <= 57) || (e.which >= 96 && e.which <= 105)); // 0-9
		});

		$get("#eth_dhcp_radio_button").on("keydown", function (e) {
			if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
				$get("#eth_dhcp_radio_button").click();
			} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN) || (e.which == keys.END)) {
				$get("#eth_manual_radio_button").focus();
			}
			e.stopPropagation();
			return e.which == keys.TAB;
		});
		$get("#eth_dhcp_radio_button").on("click", function () {
			log("on eth_dhcp_radio_button");
			network_page.change_eth_ip_mode(0);
		});
		$get("#eth_manual_radio_button").on("keydown", function (e) {
			if ((e.which == keys.ENTER) || (e.which == keys.SPACE)) {
				$get("#eth_manual_radio_button").click();
			} else if ((e.which == keys.LEFT) || (e.which == keys.UP) || (e.which == keys.HOME)) {
				$get("#eth_dhcp_radio_button").focus();
			}
			e.stopPropagation();
			return e.which == keys.TAB;
		});
		$get("#eth_manual_radio_button").on("click", function () {
			log("on eth_manual_radio_button");
			network_page.change_eth_ip_mode(1);
		});
		$get("#eth_IPA").on("focus", function () {
			$get("#eth_IPA").removeClass("error-field");
		});
		$get("#eth_IPA").on("blur", function () {
			validate_ip_control("#eth_IPA");
		});
		$get("#eth_SNM").on("focus", function () {
			$get("#eth_SNM").removeClass("error-field");
		});
		$get("#eth_SNM").on("blur", function () {
			validate_ip_control("#eth_SNM");
		});
		$get("#eth_IPG").on("focus", function () {
			$get("#eth_IPG").removeClass("error-field");
		});
		$get("#eth_IPG").on("blur", function () {
			validate_ip_control("#eth_IPG");
		});
		$get("#eth_DNS").on("focus", function () {
			$get("#eth_DNS").removeClass("error-field");
		});
		$get("#eth_DNS").on("blur", function () {
			validate_ip_control("#eth_DNS");
		});
		$get("#eth_network_setter").on("click", function () {
			log("eth_network_setter button clicked");

			if (network_page.data.ethernet_mode_enum == 1) {
				// Manual mode - validate first
				var valid = true;
				var errid = "#eth_network_setter"; // should never be used
				if (!validate_ip_control("#eth_IPA")) {
					valid = false;
					errid = "#eth_IPA";
				}
				if (!validate_ip_control("#eth_SNM")) {
					valid = false;
					errid = "#eth_SNM";
				}
				if (!validate_ip_control("#eth_IPG")) {
					valid = false;
					errid = "#eth_IPG";
				}
				if (!validate_ip_control("#eth_DNS")) {
					valid = false;
					errid = "#eth_DNS";
				}
				if (valid) {
					var ipa = $get("#eth_IPA").val();
					var ips = $get("#eth_SNM").val();
					var ipg = $get("#eth_IPG").val();
					var dns = $get("#eth_DNS").val();
					sue_network_page.setWiredManual(ipa, ips, ipg, dns);
				} else {
					$get('#modal').on('hidden.bs.modal', function () {
						$get(errid).focus();
					});
					show_modal(TR("Error"), TL("warn_bad_addr"));
				}
			} else {
				// Auto mode
				sue_network_page.setWiredAuto();
			}
		});

		$get("#wifi_dhcp_radio_button").on("keydown", function (e) {
			if ((e.which === keys.ENTER) || (e.which == keys.SPACE)) {
				$get("#wifi_dhcp_radio_button").click();
			} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN) || (e.which == keys.END)) {
				$get("#wifi_manual_radio_button").focus();
			}
			e.stopPropagation();
			return e.which == keys.TAB;
		});
		$get("#wifi_dhcp_radio_button").on("click", function () {
			log("on wifi_dhcp_radio_button");
			network_page.change_wifi_ip_mode(0);
		});
		$get("#wifi_manual_radio_button").on("keydown", function (e) {
			if ((e.which === keys.ENTER) || (e.which == keys.SPACE)) {
				$get("#wifi_manual_radio_button").click();
			} else if ((e.which == keys.LEFT) || (e.which == keys.UP) || (e.which == keys.HOME)) {
				$get("#wifi_dhcp_radio_button").focus();
			}
			e.stopPropagation();
			return e.which == keys.TAB;
		});
		$get("#wifi_manual_radio_button").on("click", function () {
			log("on wifi_manual_radio_button");
			network_page.change_wifi_ip_mode(1);
		});
		$get("#wifi_IPA").on("focus", function () {
			$get("#wifi_IPA").removeClass("error-field");
		});
		$get("#wifi_IPA").on("blur", function () {
			validate_ip_control("#wifi_IPA");
		});
		$get("#wifi_SNM").on("focus", function () {
			$get("#wifi_SNM").removeClass("error-field");
		});
		$get("#wifi_SNM").on("blur", function () {
			validate_ip_control("#wifi_SNM");
		});
		$get("#wifi_IPG").on("focus", function () {
			$get("#wifi_IPG").removeClass("error-field");
		});
		$get("#wifi_IPG").on("blur", function () {
			validate_ip_control("#wifi_IPG");
		});
		$get("#wifi_DNS").on("focus", function () {
			$get("#wifi_DNS").removeClass("error-field");
		});
		$get("#wifi_DNS").on("blur", function () {
			validate_ip_control("#wifi_DNS");
		});
		$get("#wifi_find_nets").on("keydown", function (e) {
			if ((e.which == keys.ENTER) || (e.which == keys.SPACE))
				$get("#wifi_find_nets").click();
			return e.which === keys.TAB;
		});
		$get("#wifi_find_nets").on("click", function () {
			$get("#wifi_SSID_sel").children().remove();
			$get("#wifi_SSID_sel").removeClass("error-field");
			$get("#network_page").css("cursor", "wait");
			sue_network_page.startWirelessNetworkScan(network_page.fillScannedNetworks);
		});
		$get("#wifi_SSID_sel").on("change", function () {
			log("wifi_SSID_sel change " + this.selectedIndex + " " + this.value);
			var enc = network_page.data.wifi_networks[this.selectedIndex].encryption;
			network_page.change_wifi_encryption(enc);
		});
		$get("#wifi_password").on("keydown", function (e) {
			return is_valid_key_code_for_string_input(e.which, e.shiftKey, e.altKey);
		});
		$get("#wifi_password").on("focus", function () {
			$get("#wifi_password").removeClass("error-field");
		});
		$get("#wifi_password").on("blur", function () {
			validate_password("#wifi_password");
		});
		$get("#wifi_manual_sw").on("click", function () {
			var aattr = $get("#wifi_manual_sw").attr("aria-checked");
			log("wifi_manual_sw click: " + aattr);
			$get("#wifi_manual_sw").attr("aria-checked", aattr == "true" ? false : true);
			var value = aattr == "true" ? 0 : 1; // toggle
			network_page.data.wifi_manual_bool = value == 1;
			if (value) {
				$get(".ssid_search_row").hide();
				$get(".ssid_man_row").show();
			} else {
				$get(".ssid_man_row").hide();
				$get(".ssid_search_row").show();
			}
		});
		$get("#wifi_hidden").on("keydown", function (e) {
			return is_valid_key_code_for_string_input(e.which, e.shiftKey, e.altKey);
		});
		$get("#wifi_hidden").on("focus", function () {
			$get("#wifi_hidden").removeClass("error-field");
		});
		$get("#wifi_hidden").on("blur", function () {
			validate_hidden("#wifi_hidden");
		});
		$get("#wifi_none_radiob").on("keydown", function (e) {
			if ((e.which === keys.ENTER) || (e.which === keys.SPACE)) {
				$get("#wifi_none_radiob").click();
			} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN)) {
				$get("#wifi_wepopen_radiob").focus();
			} else if (e.which == keys.END) {
				$get("#wifi_wpapsk_radiob").focus();
			}
			e.stopPropagation();
			return e.which == keys.TAB;
		});
		$get("#wifi_none_radiob").on("click", function () {
			log("on wifi_none_radiob");
			network_page.change_wifi_encryption(ENCRYPTION_NONE);
		});
		$get("#wifi_wepopen_radiob").on("keydown", function (e) {
			if ((e.which === keys.ENTER) || (e.which === keys.SPACE)) {
				$get("#wifi_wepopen_radiob").click();
			} else if ((e.which == keys.LEFT) || (e.which == keys.UP) || (e.which == keys.HOME)) {
				$get("#wifi_none_radiob").focus();
			} else if ((e.which == keys.RIGHT) || (e.which == keys.DOWN) || (e.which == keys.END)) {
				$get("#wifi_wpapsk_radiob").focus();
			}
			e.stopPropagation();
			return e.which == keys.TAB;
		});
		$get("#wifi_wepopen_radiob").on("click", function () {
			log("on wifi_wepopen_radiob");
			network_page.change_wifi_encryption(ENCRYPTION_WEP_OPEN);
		});
		$get("#wifi_wpapsk_radiob").on("keydown", function (e) {
			if ((e.which === keys.ENTER) || (e.which === keys.SPACE)) {
				$get("#wifi_wpapsk_radiob").click();
			} else if (e.which == keys.HOME) {
				$get("#wifi_none_radiob").focus();
			} else if ((e.which == keys.LEFT) || (e.which == keys.UP)) {
				$get("#wifi_wepopen_radiob").focus();
			}
			e.stopPropagation();
			return e.which == keys.TAB;
		});
		$get("#wifi_wpapsk_radiob").on("click", function () {
			log("on wifi_wpapsk_radiob");
			network_page.change_wifi_encryption(ENCRYPTION_WPA_PSK);
		});

		$get("#wifi_network_setter").on("click", function () {
			log("wifi_network_setter button clicked");

			var wvalid = true;
			var errid = "#wifi_network_setter"; // should never be used
			var manunet = network_page.data.wifi_manual_bool;
			if (manunet) {
				ssidin = null;
				var hiddenname = $get("#wifi_hidden").val();
			} else {
				var ssidin = $get("#wifi_SSID_sel").val();
				if (ssidin == null) {
					$get("#wifi_SSID_sel").addClass("error-field");
					wvalid = false;
					errid = "#wifi_SSID_sel";
				}
				hiddenname = "";
			}
			if (!validate_password("#wifi_password")) {
				wvalid = false;
				errid = "#wifi_password";
			}
			var passcoded = $get("#wifi_password").val();
			if (wvalid && (network_page.data.wifi_mode_enum == 1)) {
				// Manual mode - validate first
				var valid = true;
				if (!validate_ip_control("#wifi_IPA")) {
					valid = false;
					errid = "#wifi_IPA";
				}
				if (!validate_ip_control("#wifi_SNM")) {
					valid = false;
					errid = "#wifi_SNM";
				}
				if (!validate_ip_control("#wifi_IPG")) {
					valid = false;
					errid = "#wifi_IPG";
				}
				if (!validate_ip_control("#wifi_DNS")) {
					valid = false;
					errid = "#wifi_DNS";
				}
				if (valid) {
					var ipa = $get("#wifi_IPA").val();
					var ips = $get("#wifi_SNM").val();
					var ipg = $get("#wifi_IPG").val();
					var dns = $get("#wifi_DNS").val();
					sue_network_page.setWirelessManual(ipa, ips, ipg, dns,
						manunet, ssidin, hiddenname, network_page.data.encryptopt, passcoded);
				} else {
					$get('#modal').on('hidden.bs.modal', function () {
						$get(errid).focus();
					});
					show_modal(TR("Error"), TL("warn_bad_addr"));
				}
			} else if (wvalid) {
				// Auto mode
				sue_network_page.setWirelessAuto(manunet, ssidin, hiddenname,
					network_page.data.encryptopt, passcoded);
			} else {
				$get('#modal').on('hidden.bs.modal', function () {
					$get(errid).focus();
				});
				show_modal(TR("Error"), TL("warn_bad_wifi"));
			}
		});

		// Trigger panels
		var trigger_number;
		for (trigger_number = 1; trigger_number <= 3; trigger_number++) {
			turn_on_trigger_listeners(trigger_number);
		}

		$get("#network_page .switch_track").on("keydown", function (e) {
			return handle_switch_keydown($get(this), e.which);
		});

		function turn_on_trigger_listeners(trigger_number) {
			$get("#trigger_" + trigger_number + "_control_select").on("change", function () {
				var value = this.value;
				log("on trigger_control_select: " + trigger_number, ", " + value);
				send_and_query_command(COMMAND.GCT_C.replace('_', trigger_number), value);
			});
			$get("#trigger_" + trigger_number + "_power_select").on("change", function () {
				var value = this.value;
				log("on trigger_power_select: " + trigger_number + ", " + value);
				send_and_query_command(COMMAND.GCT_P.replace('_', trigger_number), value);
			});
		}
	}
}

network_page.unload_page = function () {
	$get("#network_page").hide();
	turn_off_listeners();
	function turn_off_listeners() {
		$get("#tcp_port_input").off("keydown");
		$get("#tcp_port_input").off("focus");
		$get("#tcp_port_apply_button").off("click");
		$get("#tx_status_select").off("change");
		$get("#ir_select").off("change");
		$get("#rear_ir_sw").off("click");
		$get("#front_ir_sw").off("click");
		$get("#trigger_delay_select").off("change");

		var trigger_number;
		for (trigger_number = 1; trigger_number <= 3; trigger_number++) {
			$get("#trigger_" + trigger_number + "_control_select").off("change");
			$get("#trigger_" + trigger_number + "_power_select").off("change");
		}

		$get("#eth_dhcp_radio_button").off("keydown");
		$get("#eth_dhcp_radio_button").off("click");
		$get("#eth_manual_radio_button").off("keydown");
		$get("#eth_manual_radio_button").off("click");
		$get("#eth_IPA, #eth_SNM, #eth_IPG, #eth_DNS").off("keydown");
		$get("#eth_IPA, #eth_SNM, #eth_IPG, #eth_DNS").off("focus");
		$get("#eth_IPA, #eth_SNM, #eth_IPG, #eth_DNS").off("blur");
		$get("#eth_network_setter").off("click");
		$get("#wifi_dhcp_radio_button").off("keydown");
		$get("#wifi_dhcp_radio_button").off("click");
		$get("#wifi_manual_radio_button").off("keydown");
		$get("#wifi_manual_radio_button").off("click");
		$get("#wifi_IPA, #wifi_SNM, #wifi_IPG, #wifi_DNS").off("keydown");
		$get("#wifi_IPA, #wifi_SNM, #wifi_IPG, #wifi_DNS").off("focus");
		$get("#wifi_IPA, #wifi_SNM, #wifi_IPG, #wifi_DNS").off("blur");
		$get("#wifi_password, #wifi_hidden").off("keydown");
		$get("#wifi_password").off("focus");
		$get("#wifi_password").off("blur");
		$get("#wifi_manual_sw").off("click");
		$get("#wifi_network_setter").off("click");

		$get("#network_page .switch_track").off("keydown");
	}
}

network_page.enable_power_control = function (trigger_no) {
	if ((trigger_no >= 1) && (trigger_no <= 3)) {
		// Enable if trigger control is set to menu, disable if RS-232/IP
		var control_opt = network_page.data.trigger_controls[trigger_no - 1];
		var changable = network_page.cached_power && (control_opt == 0);
		var powertid = "#trigger_?_power_select".replace("?", trigger_no);
		$get(powertid).attr("disabled", !changable);
	}
}

network_page.enable_input_controls = function (trigger_no) {
	if ((trigger_no >= 1) && (trigger_no <= 3)) {
		// Enable if trigger control is set to menu and power is set to off
		var control_opt = network_page.data.trigger_controls[trigger_no - 1];
		var power_opt = network_page.data.trigger_powers[trigger_no - 1];
		var changable = network_page.cached_power && (control_opt == 0) && (power_opt == 0);
		var triggerid = "#trigger_?_input_list_select_".replace("?", trigger_no);
		for (var incnt = 0; incnt < inputs_page.added_inputs_indices.length; incnt++) {
			var innum = inputs_page.added_inputs_indices[incnt];
			var controliid = triggerid + innum;
			$get(controliid).attr("disabled", !changable);
		}
	}
}

network_page.enable_controls = function (which) {
	log("network_page.enable_controls " + which);
	network_page.cached_power = which;
	const all_xable_ids = [
		// network control
		"#tcp_port_input", "#tcp_port_apply_button", "#tx_status_select",
		"#ir_select",
		"#rear_ir_sw", "#front_ir_sw", "#trigger_delay_select",
		"#network_page .switch_track",
		// IP configuration
		"#eth_dhcp_radio_button", "#eth_manual_radio_button",
		"#eth_IPA", "#eth_SNM", "#eth_IPG", "#eth_DNS", "#eth_network_setter",
		"#wifi_dhcp_radio_button", "#wifi_manual_radio_button",
		"#wifi_IPA", "#wifi_SNM", "#wifi_IPG", "#wifi_DNS", "#wifi_network_setter"
	];
	for (var idix = 0; idix < all_xable_ids.length; idix++) {
		$get(all_xable_ids[idix]).attr("disabled", !which);
	}
	for (var tnum = 1; tnum <= 3; tnum++) {
		// fixed trigger controls
		var controltid = "#trigger_?_control_select".replace("?", tnum);
		$get(controltid).attr("disabled", !which);

		network_page.enable_power_control(tnum);
		network_page.enable_input_controls(tnum);
	}
	log("network_page.enable_controls end");
}

// Update UI
network_page.update_UI_tcp_port = function (number) {
	network_page.data.tcp_port = number;
	$get("#tcp_port_input").val(number);
}
network_page.update_UI_tx_status = function (value) {
	$get("#tx_status_select").val(value);
}
network_page.update_UI_ir = function (value) {
	$get("#ir_select").val(value);
}
network_page.update_UI_rear_ir = function (bvalue) {
	$get("#rear_ir_sw").attr("aria-checked", bvalue);
}
network_page.update_UI_front_ir = function (bvalue) {
	$get("#front_ir_sw").attr("aria-checked", bvalue);
}
network_page.update_UI_trigger_delay = function (value) {
	$get("#trigger_delay_select").val(value);
}

// IP Status
network_page.update_network_status = function (value) {
	$get("#net_conn_status").val(value);
}

network_page.update_UI_ip_mode = function (value) {
	if (value != undefined) {
		if (value === 0) {
			$get("#net_mode_status").val(TR("Auto (DHCP)"));
		} else if (value === 1) {
			$get("#net_mode_status").val(TR("Manual"));
		} else {
			logE("update_UI_ip_mode wrong value: " + value);
		}
	} else {
		// clear when undefined
		$get("#net_mode_status").val("");
	}
}
network_page.update_UI_ip_address = function (value) {
	$get("#net_ipaddress_status").val(value);
}
network_page.update_UI_subnet = function (value) {
	$get("#net_subnet_status").val(value);
}
network_page.update_UI_gateway = function (value) {
	$get("#net_gateway_status").val(value);
}
network_page.update_UI_dns = function (value) {
	$get("#net_dns_status").val(value);
}

// Ethernet Configuration
network_page.change_eth_ip_mode = function (value) {
	if (value === 0) {
		network_page.data.ethernet_mode_enum = value;
		$get("#eth_dhcp_radio_button").addClass("active").attr("tabindex", "0");
		$get("#eth_manual_radio_button").removeClass("active").attr("tabindex", "-1");
		$get(".eth_man_row").hide();
	} else if (value === 1) {
		network_page.data.ethernet_mode_enum = value;
		$get("#eth_dhcp_radio_button").removeClass("active").attr("tabindex", "-1");
		$get("#eth_manual_radio_button").addClass("active").attr("tabindex", "0");
		$get(".eth_man_row").show();
	} else {
		logE("change_eth_ip_mode wrong value: " + value);
	}
}
network_page.update_UI_eth_address_state = function (value) {
	$get("#eth_IPA").val(value);
}
network_page.update_UI_eth_subnet_state = function (value) {
	$get("#eth_SNM").val(value);
}
network_page.update_UI_eth_gateway_state = function (value) {
	$get("#eth_IPG").val(value);
}
network_page.update_UI_eth_dns_state = function (value) {
	$get("#eth_DNS").val(value);
}

// Wi-Fi Configuration
network_page.change_wifi_ip_mode = function (value) {
	if (value === 0) {
		network_page.data.wifi_mode_enum = value;
		$get("#wifi_dhcp_radio_button").addClass("active").attr("tabindex", "0");
		$get("#wifi_manual_radio_button").removeClass("active").attr("tabindex", "-1");
		$get(".wifi_man_row").hide();
	} else if (value === 1) {
		network_page.data.wifi_mode_enum = value;
		$get("#wifi_dhcp_radio_button").removeClass("active").attr("tabindex", "-1");
		$get("#wifi_manual_radio_button").addClass("active").attr("tabindex", "0");
		$get(".wifi_man_row").show();
	} else {
		logE("change_wifi_ip_mode wrong value: " + value);
	}
}
network_page.update_UI_wifi_address_state = function (value) {
	$get("#wifi_IPA").val(value);
}
network_page.update_UI_wifi_subnet_state = function (value) {
	$get("#wifi_SNM").val(value);
}
network_page.update_UI_wifi_gateway_state = function (value) {
	$get("#wifi_IPG").val(value);
}
network_page.update_UI_wifi_dns_state = function (value) {
	$get("#wifi_DNS").val(value);
}
network_page.update_UI_wifi_ssid = function (ssid) {
	network_page.data.wifi_network = ssid;
	if ($get("#wifi_SSID_sel > option").length < 1) {
		$get("#wifi_SSID_sel").append($get("<option>", { value: ssid, text: ssid }));
	}
	$get("#wifi_SSID_sel").val(ssid);
	if (ssid.length > 0) {
		$get(".ssid_search_row").show();
	} else {
		$get(".ssid_search_row").hide();
	}
}
network_page.update_UI_wifi_manual = function (value) {
	network_page.data.wifi_manual_bool = value;
	$get("#wifi_manual_sw").attr("aria-checked", value == 1);
	if (value) {
		$get(".ssid_man_row").show();
	} else {
		$get(".ssid_man_row").hide();
	}
}
network_page.update_UI_wifi_hidden = function (value) {
	$get("#wifi_hidden").val(value);
}
network_page.change_wifi_encryption = function (value) {
	if (value == ENCRYPTION_NONE) {
		network_page.data.encryptopt = value;
		$get("#wifi_none_radiob").addClass("active").attr("tabindex", "0");
		$get("#wifi_wepopen_radiob").removeClass("active").attr("tabindex", "-1");
		$get("#wifi_wpapsk_radiob").removeClass("active").attr("tabindex", "-1");
	} else if (value == ENCRYPTION_WEP_OPEN) {
		network_page.data.encryptopt = value;
		$get("#wifi_none_radiob").removeClass("active").attr("tabindex", "-1");
		$get("#wifi_wepopen_radiob").addClass("active").attr("tabindex", "0");
		$get("#wifi_wpapsk_radiob").removeClass("active").attr("tabindex", "-1");
	} else if (value == ENCRYPTION_WPA_PSK) {
		network_page.data.encryptopt = value;
		$get("#wifi_none_radiob").removeClass("active").attr("tabindex", "-1");
		$get("#wifi_wepopen_radiob").removeClass("active").attr("tabindex", "-1");
		$get("#wifi_wpapsk_radiob").addClass("active").attr("tabindex", "0");
	} else {
		logE("change_wifi_encryption wrong value: " + value);
	}
}

// Parse incoming communication
network_page.configuration_callback = function (response) {
	log("configuration_callback " + response);
	var obj = JSON.parse(response);
	if ((obj.type == "value") && (obj.value.type == "networkInfo")) {
		var netinfo = obj.value.networkInfo;
		network_page.data.status_uses_wifi = false;
		if ((netinfo.state != undefined) && (netinfo.state == "up")) {
			// Check for global settings
			if (netinfo.gateways != undefined) {
				var onegate = only_or_first(netinfo.gateways);
				if (onegate.ip != undefined) {
					network_page.update_UI_gateway(onegate.ip);
				}
			}
			if (netinfo.dns != undefined) {
				var onedns = only_or_first(netinfo.dns);
				if (onedns.ip != undefined) {
					network_page.update_UI_dns(onedns.ip)
				}
			}
			if ((netinfo.wired != undefined) && (netinfo.wired.state != undefined) &&
				(netinfo.wired.state == "down") &&
				(netinfo.wireless != undefined) && (netinfo.wireless.state == "up")) {
				// Not wired, using Wi-Fi
				network_page.data.status_uses_wifi = true;
				network_page.update_network_status(TR("Wi-Fi connected to %1", [netinfo.wireless.ssid]));
				network_page.update_ip_status(netinfo.wireless);
				network_page.update_wifi_config(netinfo.wireless);
			} else if ((netinfo.wired != undefined) && (netinfo.wired.state != undefined) &&
				(netinfo.wired.state == "up")) {
				// Wired connection
				network_page.update_network_status(TR("Ethernet connected"));
				network_page.update_ip_status(netinfo.wired);
				network_page.update_ethernet_config(netinfo.wired);
			} else {
				network_page.update_network_status(TR("Unknown connection"));
			}
		} else {
			network_page.update_network_status(TR("Not connected"));
		}
	} else if ((obj.type == "value") && (obj.value.type == "networkProfile")) {
		var configed = false;
		var netprof = obj.value.networkProfile;
		if ((netprof.type == "wireless") ||
			((netprof.type == "automatic") && (netprof.wireless != undefined))) {
			// Wi-Fi Configuration
			if (network_page.data.status_uses_wifi) {
				network_page.update_ip_status(netprof.wireless);
			}
			network_page.update_wifi_config(netprof.wireless);
			configed = true;
		}
		if ((netprof.type == "wired") ||
			((netprof.type == "automatic") && (netprof.wired != undefined))) {
			// Ethernet Configuration
			if (!network_page.data.status_uses_wifi) {
				network_page.update_ip_status(netprof.wired);
			}
			network_page.update_ethernet_config(netprof.wired);
			configed = true;
		}
		if (configed != true) {
			log("Bad networkProfile " + obj.value.networkProfile.type);
		}
	}
}

network_page.clear_ip_status = function () {
	network_page.update_UI_ip_mode();
	network_page.update_UI_ip_address("");
	network_page.update_UI_subnet("");
	network_page.update_UI_gateway("");
	network_page.update_UI_dns("");
}

// IP Status panel
network_page.update_ip_status = function (status) {
	var bsome = false;
	if (status.dhcp != undefined) {
		if (status.dhcp) {
			network_page.update_UI_ip_mode(0);
			if (status.ip != undefined) {
				network_page.update_UI_ip_address(status.ip);
			}
			if (status.netmask != undefined) {
				network_page.update_UI_subnet(status.netmask);
			}
			if (status.prefix != undefined) {
				network_page.update_UI_subnet(network_page.get_subnet_from(status.prefix));
			}
			if (status.gateway != undefined) {
				network_page.update_UI_gateway(status.gateway);
			}
			if (status.dns != undefined) {
				network_page.update_UI_dns(only_or_first(status.dns));
			}
		}
		else {
			network_page.update_UI_ip_mode(1);
			network_page.update_UI_ip_address(status.ip);
			network_page.update_UI_subnet(status.netmask);
			network_page.update_UI_gateway(status.gateway);
			network_page.update_UI_dns(only_or_first(status.dns));
		}
		bsome = true;
	}
	else if ((status.addresses != undefined) && (Array.isArray(status.addresses))) {
		var adix = 0;
		while (!bsome && (adix < status.addresses.length)) {
			var adrobj = status.addresses[adix];
			if ((adrobj.protocol != undefined) && (adrobj.protocol == "ipv4")) {
				bsome = network_page.update_ip_status(adrobj);
			}
			adix++;
		}
	}
	return bsome;
}

// Interpret subnet prefix
network_page.get_subnet_from = function (prefix) {
	var subnet = "not recognised";
	if (prefix == 24) {
		subnet = "255.255.255.0";
	} else if (prefix == 20) {
		subnet = "255.255.240.0";
	} else if (prefix == 16) {
		subnet = "255.255.0.0";
	}
	return subnet;
}

// Ethernet Configuation panel
network_page.update_ethernet_config = function (status) {
	if (status.dhcp != undefined) {
		network_page.change_eth_ip_mode(status.dhcp ? 0 : 1);
	}
	if (status.ip != undefined) {
		network_page.update_UI_eth_address_state(status.ip);
	}
	if (status.prefix != undefined) {
		network_page.update_UI_eth_subnet_state(network_page.get_subnet_from(status.prefix));
	}
	if (status.netmask != undefined) {
		network_page.update_UI_eth_subnet_state(status.netmask);
	}
	if (status.gateway != undefined) {
		network_page.update_UI_eth_gateway_state(status.gateway);
	}
	if (status.dns != undefined) {
		network_page.update_UI_eth_dns_state(only_or_first(status.dns));
	}
	if ((status.addresses != undefined) && (Array.isArray(status.addresses))) {
		var adix = 0;
		while (adix < status.addresses.length) {
			var adrobj = status.addresses[adix];
			if ((adrobj.protocol != undefined) && (adrobj.protocol == "ipv4")) {
				network_page.update_ethernet_config(adrobj);
				break;
			}
			adix++;
		}
	}
}

// Wi-Fi Configuration panel
network_page.update_wifi_config = function (status) {
	if (DEMO_MODE) {
		network_page.demo = status;
	}
	if (status.dhcp != undefined) {
		network_page.change_wifi_ip_mode(status.dhcp ? 0 : 1);
	}
	if (status.ip != undefined) {
		network_page.update_UI_wifi_address_state(status.ip);
	}
	if (status.netmask != undefined) {
		network_page.update_UI_wifi_subnet_state(status.netmask);
	}
	if (status.gateway != undefined) {
		network_page.update_UI_wifi_gateway_state(status.gateway);
	}
	if (status.dns != undefined) {
		network_page.update_UI_wifi_dns_state(only_or_first(status.dns));
	}
	if (status.ssid != undefined) {
		network_page.update_UI_wifi_ssid(status.ssid);
	}
	if (status.manual != undefined) {
		network_page.update_UI_wifi_manual(parseInt(status.manual));
		if (status.manual == 1) {
			network_page.update_UI_wifi_hidden(status.ssid);
		}
	}
	if (status.encryption != undefined) {
		network_page.data.wifi_networks = [];
		network_page.data.wifi_networks.push(status);
		network_page.change_wifi_encryption(status.encryption);
	}
	if ((status.addresses != undefined) && (Array.isArray(status.addresses))) {
		var adix = 0;
		while (adix < status.addresses.length) {
			var adrobj = status.addresses[adix];
			if ((adrobj.protocol != undefined) && (adrobj.protocol == "ipv4")) {
				network_page.update_wifi_config(adrobj);
				break;
			}
			adix++;
		}
	}
}

// Fill the control with the received SSID names
network_page.fillScannedNetworks = function (data) {
	$get("#network_page").css("cursor", "default");
	network_page.data.wifi_networks = [];
	var selectSSID = $get("#wifi_SSID_sel");
	for (var rowix = 0; rowix < data.length; rowix++) {
		var onerow = data[rowix];
		var rowname = onerow[0];
		var ssid = onerow[1].networkScanResult.ssid;
		if ((rowname == ssid) && (rowname.length > 0)) {
			network_page.data.wifi_networks.push(onerow[1].networkScanResult);
			selectSSID.append($get("<option>", { value: rowname, text: rowname }));
		}
	}
	if (network_page.data.wifi_network.length > 0) {
		selectSSID.val(network_page.data.wifi_network);
	}
	if (network_page.data.wifi_networks.length > 0) {
		$get(".ssid_search_row").show();
		network_page.update_UI_wifi_manual(false);
	} else {
		$get(".ssid_search_row").hide();
	}
}

// Trigger Panels
network_page.update_UI_trigger_control = function (trigger, value) {
	if ((trigger >= 1) && (trigger <= 3)) {
		network_page.data.trigger_controls[trigger - 1] = value;
		$get("#trigger_" + trigger + "_control_select").val(value);

		network_page.enable_power_control(trigger);
		network_page.enable_input_controls(trigger);
	}
}
network_page.update_UI_trigger_power = function (trigger_no, value) {
	if ((trigger_no >= 1) && (trigger_no <= 3)) {
		network_page.data.trigger_powers[trigger_no - 1] = value;
		var powertid = "#trigger_?_power_select".replace("?", trigger_no);
		$get(powertid).val(value);
		network_page.enable_input_controls(trigger_no);
	}
}
network_page.update_UI_input_list = function (trigger, input_index, value) {
	$get("#trigger_" + trigger + "_input_list_select_" + input_index).val(value);
}

// Modify controls because an input was added
network_page.add_input = function (input_num) {
	if (input_num < 1 || input_num > inputs_page.maximum_number_of_inputs) {
		logE("cannot add index: " + input_num);
		return;
	}

	// Do not add an option when one with the index already exists
	var trigger_number;
	for (trigger_number = 1; trigger_number <= 3; trigger_number++) {
		var compareid = "trigger_" + trigger_number + "_input_" + input_num;
		var tindivEl = $get("#trigger_" + trigger_number + "_input_" + input_num);
		if (tindivEl.length > 0) {
			// Move current inputs
			var innum = inputs_page.number_of_inputs - 1;
			while (innum >= input_num) {
				$get("#trigger_" + trigger_number + "_input_list_select_" + innum).off("change");
				network_page.move_input_id(trigger_number, innum, innum + 1);
				network_page.turn_on_input_listener(trigger_number, innum);
				innum--;
			}

			// Insert input
			var nextid = "#trigger_" + trigger_number + "_input_" + (input_num + 1);
			var html = network_page.create_input_fragment(trigger_number, input_num);
			$get(html).insertBefore($get(nextid));
		} else {
			// Append input
			html = network_page.create_input_fragment(trigger_number, input_num);
			$get("#trigger_" + trigger_number + "_panel").append(html);
		}

		$get("#trigger_" + trigger_number + "_input_" + input_num + ' [data-toggle="popover"]').popover(); // init popovers
		network_page.turn_on_input_listener(trigger_number, input_num);
	}
}

network_page.update_inputs = function (num_items) {
	var trigger_number;
	var innum;
	for (trigger_number = 1; trigger_number <= 3; trigger_number++) {
		for (innum = 1; innum <= num_items; innum++) {
			var compareid = "trigger_" + trigger_number + "_input_" + innum;
			if (document.getElementById(compareid) == null) {
				// Append input
				var html = network_page.create_input_fragment(trigger_number, innum);
				$get("#trigger_" + trigger_number + "_panel").append(html);

				$get("#trigger_" + trigger_number + "_input_" + innum + ' [data-toggle="popover"]').popover(); // init popovers
				network_page.turn_on_input_listener(trigger_number, innum);
			}
		}
	}
}

network_page.move_input_id = function (trigger_num, from_input, to_input) {
	var fromid = "#trigger_" + trigger_num + "_input_" + from_input;
	var toid = "trigger_" + trigger_num + "_input_" + to_input;
	$get(fromid).attr("id", toid);
	fromid = "#trigger_" + trigger_num + "_input_list_select_" + from_input;
	toid = "trigger_" + trigger_num + "_input_list_select_" + to_input;
	$get(fromid).attr("id", toid);
}

network_page.create_input_fragment = function (trigger_num, input_num) {
	var html =
		'<div id="trigger_' + trigger_num + '_input_' + input_num + '" class="row">' +
		'<div class="col-6">' +
		'<a data-toggle="popover" data-trigger="hover" data-placement="top" data-content="' + TL("trigger_input") + '">' +
		TR("Input %1", [input_num]) + '</a></div>' +
		'<div class="col-6"><select id="trigger_' + trigger_num + '_input_list_select_' + input_num + '">' +
		'<option value="0" selected="selected">' + TR("Off") + '</option>' +
		'<option value="1">' + TR("Main") + '</option>';
	if (device.use_zone2) {
		html +=
			'<option value="2">' + TR("Zone 2") + '</option>' +
			'<option value="3">' + TR("Main or Zone 2") + '</option>';
	}
	html += '</select></div></div>';
	return html;
}

network_page.turn_on_input_listener = function (trigger_num, input_num) {
	$get("#trigger_" + trigger_num + "_input_list_select_" + input_num).on("change", function () {
		var value = this.value;
		log("on trigger_?_input_list_select trigger " + trigger_num + " input " + input_num + " clicked: " + value);
		send_and_query_command(COMMAND.GCT_I.replace('_', trigger_num) + input_num, value);
	});
}

network_page.remove_input = function (index) {
	var trigger_number;
	var input_number;
	for (trigger_number = 1; trigger_number <= 3; trigger_number++) {
		$get("#trigger_" + trigger_number + "_input_list_select_" + index).off("change");
		$get("#trigger_" + trigger_number + "_input_" + index).remove();
		var baddiv = $get("#trigger_" + trigger_number + "_input_31");

		for (input_number = index;
			input_number < inputs_page.maximum_number_of_inputs; input_number++) {
			var divi = $get("#trigger_" + trigger_number + "_input_" + (input_number + 1));
			if (divi.length > 0) {
				var seli = $get("#trigger_" + trigger_number + "_input_list_select_" + (input_number + 1));
				if (seli.length > 0) {
					seli.off("change");
					divi.attr("id", "trigger_" + trigger_number + "_input_" + input_number);
					seli.attr("id", "trigger_" + trigger_number + "_input_list_select_" + input_number);
					network_page.turn_on_input_listener(trigger_number, input_number);
				}
			}
		}
	}
}

network_page.update_UI_input_name = function (index, name) {
	var trimmed_name = name.trim();
	var trigger_number;
	for (trigger_number = 1; trigger_number <= 3; trigger_number++) {
		$get("#trigger_" + trigger_number + "_input_" + index + " a").text(trimmed_name);
	}
}




var save_page = {}

save_page.data = {
	cached_power: false,
	updateable: false,
	timeoutd: 0,
	timeoutr: 0,
	fwinfo: 0
}

save_page.load_page = function () {
	$get("#save_page").fadeIn();
	fit_text_on_button("#import_settings");
	turn_on_listeners();
	turn_on_import_listeners();
	$get(".available_fw_row").hide();
	save_page.data.updateable = false;
	save_page.enable_controls();
	turn_on_firmware_listeners();

	function turn_on_listeners() {

		$get("#user_settings_load_buttton").on("click", function () {
			log("user_settings_load_buttton clicked");

			if (window.confirm(TL("load_user_sets"))) {
				var title = TR("Loading User Settings");
				show_loader(title);

				// load user to current
				send_command(COMMAND.CPYS + 1 + 0 + ";");
			}
		});
		$get("#user_settings_store_button").on("click", function () {
			log("user_settings_store_button clicked");

			var title = TR("Storing User Settings")
			show_loader(title);

			// store current to user
			send_command(COMMAND.CPYS + 0 + 1 + ";");

			// Unsupported command will return an error
			send_command(COMMAND.STORED_U + "?;");
		});
		$get("#installer_settings_load_button").on("click", function () {
			log("installer_settings_load_button clicked");

			if (window.confirm(TL("load_installer_sets"))) {
				var title = TR("Loading Installer Settings")
				show_loader(title);

				// load installer to current
				send_command(COMMAND.CPYS + 2 + 0 + ";");
			}
		});
		$get("#installer_settings_store_button").on("click", function () {
			log("installer_settings_store_button clicked");

			var title = TR("Storing Installer Settings")
			show_loader(title);

			// store current to installer
			send_command(COMMAND.CPYS + 0 + 2 + ";");

			// Unsupported command will return an error
			send_command(COMMAND.STORED_I + "?;");
		});
		$get("#factory_settings_load_button").on("click", function () {
			log("factory_settings_load_button clicked");

			if (window.confirm(TL("reset_all_settings"))) {
				var title = TR("Loading Factory Default Settings")
				show_loader(title);

				send_command(COMMAND.LDFDS + ";");
			}
		});
		$get("#reset_adjustments_button").on("click", function () {
			log("reset_adjustments_button clicked");

			if (window.confirm(TL("reset_on_the_flys"))) {
				var title = TR("Resetting On-the-Fly Settings")
				show_loader(title);

				send_command(COMMAND.LOTFS + ";");
			}
		});

		$get("#export_settings").on("click", function () {
			log("export_settings button clicked");

			show_loader(TR("Export Settings"))
			export_settings.export_settings();
		});
	}

	function turn_on_import_listeners() {
		$get("#config_file").val("");
		$get("#import_settings").attr("disabled", true);
		$get("#config_file").on("click", function () {
			open_import_file_browser();
		});
		$get("#config_file_browse_button").on("click", function () {
			open_import_file_browser();
		});
		function open_import_file_browser() {
			$get("#config_file_input").click();
		}
		$get("#config_file_input").on("change", function () {
			var val = $get(this).val();
			$get("#config_file").val(val.substring(val.lastIndexOf('\\') + 1));
			$get("#import_settings").attr("disabled", val.length == 0);
		});
		$get("#import_settings").on("click", function () {
			log("import_settings import clicked");
			var file = $get('#config_file_input').prop('files')[0];
			if (window.confirm(TL("import_settings_go"))) {
				show_loader(TR("Importing Settings from %1", [file.name]));
				import_settings.import_settings(file);
			}
		});
	}

	function turn_on_firmware_listeners() {
		$get("#auto_updates_sw").on("click", function (e) {
			var aattr = $get("#auto_updates_sw").attr("aria-checked");
			log("auto_updates_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCAU, value);
		});
		$get("#beta_updates_sw").on("click", function () {
			var aattr = $get("#beta_updates_sw").attr("aria-checked");
			log("beta_updates_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.GCBU, value);
		});
		$get("#check_for_update_b").on("click", function () {
			log("check_for_update_b clicked");
			show_loader(TR("Check for Updated Firmware"));
			$get("#preloader-showanyways").hide();
			var url = "http://192.168.86.88/api/setData?path=firmwareupdate:checkForUpdate&role=activate&value=true";
			var vrequest = new XMLHttpRequest();
			vrequest.onreadystatechange = function () {
				if (this.readyState == 4) {
					vrequest.onload = null;
					if (this.status == 200) {
						if ((this.responseText != "") && (this.responseText != "null")) {
							save_page.data.fwinfo = JSON.parse(this.responseText);
							$get("#available_fw_version").val(save_page.data.fwinfo.version);
							$get("#download_firmware_b").attr("disabled", false);
							$get(".available_fw_row").show();
							save_page.data.updateable = true;
							save_page.enable_controls();
						} else {
							show_modal(TR("Check for Updated Firmware"), TR("No Update Found"));
						}
					} else {
						show_modal(TR("Check for Updated Firmware"), this.status + "\n" + this.response);
					}
					hide_loader();
				}
			};
			vrequest.open('GET', url, true);
			vrequest.onload = function () {
				setTimeout(() => {
					hide_loader();
				}, 15000);
			}
			vrequest.send();
		});
		$get("#download_firmware_b").on("click", function (e) {
			const date = new Date();
			log("download_firmware_b click at " + date.getTime());
			$get("#download_firmware_b").attr("disabled", true);
			setTimeout(queryForDownload, 100);
		});
	}

	function queryForDownload() {
		if (window.confirm(TL("download_fw_h"))) {
			show_loader(TL("rcv_firmware_start"));
			var vparams = '{\"type\":\"firmwareUpdateOptions\",\"firmwareUpdateOptions\":{\"disableAutoInstall\":\"true\"}}';
			var url = "http://192.168.86.88/api/setData?path=firmwareupdate:downloadNewUpdate&role=activate&value=" + vparams;
			log("URL " + url);
			var fwrequest = new XMLHttpRequest();
			fwrequest.addEventListener("error", transferFailed);
			fwrequest.addEventListener("abort", transferCanceled);
			fwrequest.open('GET', url, true);
			fwrequest.onload = function () {
				log("download firmware onload " + this.responseText);
				if ((this.responseText != "") && (this.responseText != "null")) {
					var obj = JSON.parse(this.responseText);
					if ((obj.error != undefined) && (obj.error.message != undefined)) {
						clearTimeout(save_page.data.timeoutd);
						window.alert(obj.error.message);
						hide_loader();
					}
				}
			}
			fwrequest.send();
			save_page.data.timeoutd = setTimeout(pollForUpdate, 1000, 0);
		} else {
			$get("#download_firmware_b").attr("disabled", !save_page.data.cached_power);
		}
	}

	function pollForUpdate(polls) {
		var url = "http://192.168.86.88/api/getData?path=firmwareupdate:updateStatus&roles=@all";
		log("URL " + url);
		var fwrequest = new XMLHttpRequest();
		fwrequest.open('GET', url, true);
		fwrequest.onload = function () {
			log("updateStatus onload " + this.responseText);
			if ((this.responseText != "") && (this.responseText != "null")) {
				var obj = JSON.parse(this.responseText);
				if ((obj.value != undefined) && (obj.value.firmwareUpdateStatus != undefined)) {
					var fus = obj.value.firmwareUpdateStatus;
					if (fus.state != undefined) {
						if (fus.state == "downloading") {
							show_loader(TR("Receiving updated firmware - %1 %", [fus.downloadProgress]));
							save_page.data.timeoutd = setTimeout(pollForUpdate, 1000, polls + 1);
						} else if (fus.state == "downloaded") {
							show_loader(TL("rcv_firmware_done"));
							setTimeout(transferComplete, 100, polls + 1);
						}
					}
				}
			}
		}
		fwrequest.send();
	}

	function transferComplete(polls) {
		log("The transfer was completed in " + polls + " seconds.");
		if (window.confirm(TL("download_done_h"))) {
			show_loader(TR("Installing firmware"));
			installFirmware();
		} else {
			$get("#download_firmware_b").attr("disabled", !save_page.data.cached_power);
			hide_loader();
		}
	}

	function installFirmware() {
		var url = "http://192.168.86.88/api/setData?path=firmwareupdate:installUpdate&role=activate&value=true";
		log("URL " + url);
		var fwrequest = new XMLHttpRequest();
		fwrequest.open('GET', url, true);
		fwrequest.onload = function () {
			log("install firmware onload " + this.responseText);
			save_page.data.timeoutr = setTimeout(pollForRestart, 100, 0);
		}
		fwrequest.send();
	}

	function pollForRestart(seconds) {
		log("socket ready state " + socket.readyState);
		show_loader(TL("fw_install_cnt", [seconds, 180]));
		if (seconds < 180) {
			save_page.data.timeoutr = setTimeout(pollForRestart, 1000, seconds + 1);
		} else {
			alert("Press OK to restart the Web UI.");
			location.reload();
		}
	}

	function transferFailed(evt) {
		logE("An error occurred while transferring the file.");
		show_loader("Transfer Failed");
		if (window.confirm("Transfer failed. Press OK.")) {
			hide_loader();
		} else {
			hide_loader();
		}
	}
	function transferCanceled(evt) {
		log("The transfer has been canceled by the user.");
		show_loader("Transfer Cancelled");
		if (window.confirm("Transfer failed but not sure how. Press OK.")) {
			hide_loader();
		} else {
			hide_loader();
		}
	}
}

save_page.send_exclusive_control_message = function (title, message) {
	send_command(COMMAND.Z1EMSG + 0 + title + ";");
	send_command(COMMAND.Z1EMSG + 1 + message + ";");
}

save_page.unload_page = function () {
	$get("#save_page").hide();
	turn_off_listeners();

	function turn_off_listeners() {

		$get("#user_settings_load_buttton").off("click");
		$get("#user_settings_store_button").off("click");
		$get("#installer_settings_load_button").off("click");
		$get("#installer_settings_store_button").off("click");
		$get("#factory_settings_load_button").off("click");

		$get("#export_settings").off("click");
		$get("#config_file").off("click");
		$get("#config_file_browse_button").off("click");
		$get("#config_file_input").off("change");
		$get("#import_settings").off("click");

		$get("#auto_updates_sw").off("click");
		$get("#beta_updates_sw").off("click");
		$get("#check_for_update_b").off("click");
		$get("#reset_adjustments_button").off("click");
	}
}

save_page.enable_controls = function () {
	const all_xable_ids = [
		// store/load settings
		"#user_settings_load_buttton", "#user_settings_store_button",
		"#installer_settings_load_button", "#installer_settings_store_button",
		"#factory_settings_load_button", "#reset_adjustments_button",
		// import/export settings
		"#export_settings",
		"#config_file", "#config_file_browse_button",
		"#config_file_input", "#import_settings",
		// firmware update
		"#auto_updates_sw", "#beta_updates_sw",
		"#check_for_update_b"
	];

	var which = save_page.data.cached_power && !save_page.data.updateable;
	for (var idix = 0; idix < all_xable_ids.length; idix++) {
		var controlid = all_xable_ids[idix];
		$get(controlid).attr("disabled", !which);
	}
}

// Update External UI
save_page.update_power = function (bvalue) {
	save_page.data.cached_power = bvalue;
	save_page.enable_controls();
}
save_page.update_model_name = function (name) {
	// after update firmware
	clearTimeout(save_page.data.timeoutr);
}

// Update UI
save_page.update_UI_auto_updates = function (bvalue) {
	$get("#auto_updates_sw").attr("aria-checked", bvalue);
}
save_page.update_UI_beta_updates = function (bvalue) {
	$get("#beta_updates_sw").attr("aria-checked", bvalue);
}

save_page.update_UI_module_version = function (firmware) {
	$get("#firmware_current_version").val(firmware);
}

save_page.update_UI_store_progress = function (command) {
	var donei = command.indexOf(COMMAND.STORED_I);
	if (donei >= 0) {
		hide_loader();
		var title = TR("Storing Installer Settings")
		show_modal(title, TL("sets_saved_installer"));
	}
	var doneu = command.indexOf(COMMAND.STORED_U);
	if (doneu >= 0) {
		hide_loader();
		title = TR("Storing User Settings")
		show_modal(title, TL("sets_saved_user"));
	}
}





var admin_page = {};

admin_page.cached_power = 0;
admin_page.number_of_counters = 0;

admin_page.load_page = function () {
	$get("#admin_page").fadeIn();

	if (DEMO_MODE) {
		command_handler.handle_incoming_command("FCC0100");
		command_handler.handle_incoming_command("Z1SHC0");
		command_handler.handle_incoming_command("CTRL00");
		command_handler.handle_incoming_command("CTRL10");
		command_handler.handle_incoming_command("CTRL20");
	} else {
		send_query_commands([COMMAND.FCC, COMMAND.Z1SHC, COMMAND.CTRL0, COMMAND.CTRL1, COMMAND.CTRL2]);
	}

	admin_page.update_UI_show_hide_console_message(LOG_NON_ERROR_MESSAGES);

	turn_on_listeners();

	function turn_on_listeners() {

		$get("#send_command_input").on("focus", function () {
			$get(this).removeClass("error-field");
		});
		$get("#send_command_button").on("click", function () {
			var command = $get("#send_command_input").val();
			if (command.length > 0) {
				send_command(command);
				$get("#send_command_input").removeClass("error-field");
			} else {
				$get("#send_command_input").addClass("error-field");
			}
		});
		$get("#simulated_ir_commands_send_button").on("click", function () {
			var selection = $get("#simulated_ir_commands_select").val();
			send_command("Z1SIM" + selection + ";");
		});

		$get("#show_hide_custom_message_checkbox").on("click", function () {
			var aattr = $get("#show_hide_custom_message_checkbox").attr("aria-checked");
			log("show_hide_custom_message_checkbox change: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_and_query_command(COMMAND.Z1SHC, value);
		});
		$get("#custom_message_row_1_input").on("focus", function () {
			$get(this).removeClass("error-field");
		});
		$get("#send_custom_message_row_1_button").on("click", function () {
			display_custom_message(1);
		});
		$get("#custom_message_row_2_input").on("focus", function () {
			$get(this).removeClass("error-field");
		});
		$get("#send_custom_message_row_2_button").on("click", function () {
			display_custom_message(2);
		});
		$get("#custom_message_row_3_input").on("focus", function () {
			$get(this).removeClass("error-field");
		});
		$get("#send_custom_message_row_3_button").on("click", function () {
			display_custom_message(3);
		});
		$get("#custom_message_row_4_input").on("focus", function () {
			$get(this).removeClass("error-field");
		});
		$get("#send_custom_message_row_4_button").on("click", function () {
			display_custom_message(4);
		});
		function display_custom_message(row) {
			var input = $get("#custom_message_row_" + row + "_input");
			var text = input.val();
			if (text.length > 0) {
				send_command(COMMAND.Z1MSG + (row - 1) + text);
				input.removeClass("error-field");
			} else {
				input.addClass("error-field");
			}
		}

		$get("#log_to_console_sw").on("click", function () {
			var aattr = $get("#log_to_console_sw").attr("aria-checked");
			log("log_to_console_sw click: " + aattr);
			var value = aattr == "true" ? false : true; // toggle
			admin_page.update_UI_show_hide_console_message(value);
			$get("#log_to_console_sw").attr("disabled", true);
			setTimeout(restore_console, 500);
		});

		$get("#exclusive_control_arc_sw").on("click", function () {
			var aattr = $get("#exclusive_control_arc_sw").attr("aria-checked");
			log("exclusive_control_arc_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_command(COMMAND.CTRL0 + value);
		});
		$get("#exclusive_control_scratchpad_sw").on("change", function () {
			var aattr = $get("#exclusive_control_scratchpad_sw").attr("aria-checked");
			log("exclusive_control_scratchpad_sw click: " + aattr);
			var value = aattr == "true" ? 0 : 1; // toggle
			send_command(COMMAND.CTRL1 + value);
		});
		$get("#exclusive_control_firmware_sw").on("change", function () {
			var aattr = $get("#exclusive_control_firmware_sw").attr("aria-checked");
			log("exclusive_control_firmware_sw click: " + aattr);
			send_command(COMMAND.CTRL2 + value);
		});

		$get("#recovery_mode_button").on("click", function () {
			log("recovery_mode_button clicked");
			var url = "http://192.168.86.88/api/setData?path=firmwareupdate:startLocalUpdate&role=activate&value=true";
			var request = new XMLHttpRequest();
			request.open('GET', url, true);
			show_loader("Entering recovery mode.");
			var sa = $get("#preloader-showanyways");
			sa.hide();

			//ignore errors on the socket (target will reset)
			socket.onclose = function (code, reason) { };
			socket.onerror = function (event) { };

			request.onload = function () {
				setTimeout(() => {
					//refresh the page
					window.location.href = "http://" + location.host;
				}, 15000);
			}
			request.send();
		});
	}

	function restore_console() {
		$get("#log_to_console_sw").attr("disabled", false);
	}
}

admin_page.unload_page = function () {
	$get("#admin_page").hide();

	turn_off_listeners();
	function turn_off_listeners() {
		$get("#send_command_input").off("focus");
		$get("#send_command_button").off("click");
		$get("#simulated_ir_commands_send_button").off("click");

		$get("#show_hide_custom_message_checkbox").off("click")
		$get("#custom_message_row_1_input").off("focus");
		$get("#send_custom_message_row_1_button").off("click");
		$get("#custom_message_row_2_input").off("focus");
		$get("#send_custom_message_row_2_button").off("click");
		$get("#custom_message_row_3_input").off("focus");
		$get("#send_custom_message_row_3_button").off("click");
		$get("#custom_message_row_4_input").off("focus");
		$get("#send_custom_message_row_4_button").off("click");

		$get("#log_to_console_sw").off("change");

		$get("#exclusive_control_arc_sw").off("change");
		$get("#exclusive_control_scratchpad_sw").off("change");
		$get("#exclusive_control_firmware_sw").off("change");

		for (var fcnt = 1; fcnt <= admin_page.number_of_counters; fcnt++) {
			$get("#fault_reset_button_" + fcnt).off("click");
		}
	}
}

admin_page.enable_controls = function (which) {
	admin_page.cached_power = which;
	const all_xable_ids = [
		"#send_command_input", "#send_command_button",
		"#simulated_ir_commands_select", "#simulated_ir_commands_send_button",

		"#show_hide_custom_message_checkbox",
		"#custom_message_row_1_input", "#send_custom_message_row_1_button",
		"#custom_message_row_2_input", "#send_custom_message_row_2_button",
		"#custom_message_row_3_input", "#send_custom_message_row_3_button",
		"#custom_message_row_4_input", "#send_custom_message_row_4_button",

		"#log_to_console_sw", "#exclusive_control_arc_sw",
		"#exclusive_control_scratchpad_sw", "#exclusive_control_firmware_sw"
	];
	for (var idix = 0; idix < all_xable_ids.length; idix++) {
		$get(all_xable_ids[idix]).attr("disabled", !which);
	}
	for (var fcnt = 1; fcnt <= admin_page.number_of_counters; fcnt++) {
		$get("#fault_reset_button_" + fcnt).attr("disabled", !which);
	}
}

// Update UI
admin_page.update_UI_show_hide_console_message = function (bvalue) {
	LOG_NON_ERROR_MESSAGES = bvalue;
	$get("#log_to_console_sw").attr("aria-checked", bvalue);
}

admin_page.update_UI_model_name = function (devmodel) {
	var trtext = "";
	var keyArray = [];
	if (devmodel === MODEL.MRXSLM) {
		const slmKeys = [
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "Power On", "Power Off",
			12, 13, "Mode", 15, 16, 17, 18,
			19, "Previous", "Next", "Play / Pause", 23,
			24, "Up", "Down", "Mute", 28, 29, 30,
			"Stream", "Digital", "Analog", "HDMI", "Bluetooth", "TV"
		];
		keyArray = slmKeys;
	} else {
		// is_mrxx40avm79
		const mostKeys = [
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "Power On", "Power Off",
			"Setup", "Input", "Mode", "Dim", "Level", "Info",
			"Up", "Down", "Left", "Right", "Select", "Page Up",
			"Page Down", "Volume Up", "Volume Down", "Toggle Mute", "Last", "Tone",
			"Bass", "Treble", "Lip Sync", "Balance", "Dynamics", "Clear", "Preset"
		];
		keyArray = mostKeys;
	}
	for (var index = 0; index < keyArray.length; index++) {
		if (typeof keyArray[index] == "number") {
			trtext = TR("Key %1", [keyArray[index]]);
		} else {
			trtext = TR(keyArray[index]);
		}
		$get("#simulated_ir_commands_select").append(new Option(trtext, index));
	}
}

admin_page.update_UI_custom_messages = function (bvalue) {
	$get("#show_hide_custom_message_checkbox").attr("aria-checked", bvalue ? true : false);
}

admin_page.update_UI_fault_count = function (fault_count) {

	if (fault_count > 0) {
		if (fault_count > admin_page.number_of_counters) {
			build_fault_panel(fault_count);
			query_fault_names();
		}
		query_fault_data();
		admin_page.enable_controls(admin_page.cached_power);
	} else {
		logE("Invalid fault count, update_UI_fault_count");
	}

	function build_fault_panel(fault_count) {
		$get("#faults_panel_cont").empty();

		var html_text = '<div id="faults_panel" class="panel"><h5>Faults</h5>';
		var i;
		for (i = 1; i <= fault_count; i++) {
			html_text += '<div class="row">' +
				'<div class="col-4">' +
				'<label for="fault_count_value_' + i + '" id="fault_name_' + i + '" data-toggle="popover" data-trigger="hover" data-placement="top" data-content="Displays fault count which can be reset with button."></label>' +
				'</div>' +
				'<div class="col-4">' +
				'<input id="fault_count_value_' + i + '" readonly class="read-only form-control" type="text" />' +
				'</div>' +
				'<div class="col-4">' +
				'<button id="fault_reset_button_' + i + '" class="btn btn-primary btn-block" type="button">Reset</button>' +
				'</div>' +
				'</div>';
		}
		html_text += '</div>';
		$get("#faults_panel_cont").append(html_text);
		admin_page.number_of_counters = fault_count;

		set_listeners_for_reset_buttons();

		function set_listeners_for_reset_buttons() {
			var j;
			for (j = 1; j <= fault_count; j++) {
				set_listeners_for_reset_button(j);
			}
			function set_listeners_for_reset_button(id) {
				var four_digit_hex = padd_hex_string(id.toString(16), 4);
				$get("#fault_reset_button_" + id).on("click", function () {
					send_and_query_command(COMMAND.FCR, "" + four_digit_hex);
				});
			}
		}
	}

	function query_fault_names() {

		var commands = [];
		for (var i = 1; i <= admin_page.number_of_counters; i++) {
			var hexString = i.toString(16);
			var four_digit_hex = padd_hex_string(hexString, 4);
			if (DEMO_MODE) {
				command_handler.handle_incoming_command("FCN" + four_digit_hex + "Fault number " + i);
			} else {
				commands.push(COMMAND.FCN + four_digit_hex);
			}
		}
		if (!DEMO_MODE)
			send_query_commands(commands);
	}

	function query_fault_data() {

		var commands = [];
		for (var i = 1; i <= admin_page.number_of_counters; i++) {
			var hexString = i.toString(16);
			var four_digit_hex = padd_hex_string(hexString, 4);
			if (DEMO_MODE) {
				command_handler.handle_incoming_command("FCQ" + four_digit_hex + 1);
			} else {
				commands.push(COMMAND.FCQ + four_digit_hex);
			}
		}
		if (!DEMO_MODE)
			send_query_commands(commands);
	}

	function padd_hex_string(hexString, padding) {
		if (hexString.length > padding) {
			logE("Cannot pad hex string");
			return hexString;
		} else {
			var zero_padding = "";
			var diff = padding - hexString.length;
			var i;
			for (i = 0; i < diff; i++)
				zero_padding += "0";
			return zero_padding + hexString;
		}
	}
}

admin_page.update_UI_fault_name = function (fault_number, name) {
	$get("#fault_name_" + fault_number).text(name);
}

admin_page.update_UI_fault_counter = function (fault_number, number_of_faults) {
	$get("#fault_count_value_" + fault_number).val(number_of_faults);
}

var streamer = {}

streamer.data = {
	first_run: true,
	shared_poll_id: "",
	monrequest: null,
	monitorTO: null
};

streamer.fixed = {
	cnext: '{"control":"next"}',
	cstop: '{"control":"stop"}',
	cpause: '{"control":"pause"}',
	cprevious: '{"control":"previous"}',
	conscribed: "",
	playscribed: "",
	allscribed: ""
};

// Initialize polling commands
streamer.init = function () {
	var stfixed = streamer.fixed;
	var sarray = [];
	var modeobj = {};
	modeobj.path = "settings:/mediaPlayer/playMode";
	modeobj.type = "itemWithValue";
	sarray.push(modeobj);
	stfixed.conscribed = JSON.stringify(sarray);

	var parray = [];
	var pdobj = {};
	pdobj.path = "player:player/data";
	pdobj.type = "itemWithValue";
	parray.push(pdobj);
	stfixed.playscribed = JSON.stringify(parray);

	sarray.push(pdobj);
	stfixed.allscribed = JSON.stringify(sarray);
}

streamer.starter = function () {
	if (streamer.data.first_run) {
		streamer.data.first_run = false;

		streamer.createQueue(streamer.fixed.allscribed, function (id) {
			streamer.data.shared_poll_id = id;
		});
		setTimeout(streamer.getPlayMode, 200);
	} else {
		streamer.subscribeTo(streamer.data.shared_poll_id, streamer.fixed.conscribed);
	}
}

streamer.pollId = function () {
	return streamer.data.shared_poll_id;
}

// Create a queue to allow for polling of events
streamer.createQueue = function (subscribers, setRefId) {
	var url = location.origin + "/api/event/modifyQueue";
	var cqrequest = new XMLHttpRequest();
	cqrequest.onload = function () {
		log("createQueue onload responseText=" + this.responseText);
		if (this.responseText != null) {
			var jobj = JSON.parse(this.responseText);
			var left = this.responseText.indexOf("{");
			var right = this.responseText.lastIndexOf("}");
			if (left < right) {
				var qid = this.responseText.substring(left, right + 1);
				setRefId(qid);
				streamer.subscribeTo(qid, subscribers);
			}
		}
	}
	cqrequest.onerror = function (evt) {
		logE("createQueue error responseText=", this.responseText);
	};
	cqrequest.open('GET', url, true);
	cqrequest.send();
}

streamer.getPlayMode = function () {
	var url = location.origin + "/api/getData?path=settings:/mediaPlayer/playMode&roles=@all";
	var pmrequest = new XMLHttpRequest();
	pmrequest.onload = function () {
		if (this.responseText != null) {
			var pmobj = JSON.parse(this.responseText);
			if (pmobj.value != undefined) {
				if (pmobj.value.playerPlayMode != undefined) {
					streaming_page.update_play_mode(pmobj.value.playerPlayMode);
					streaming_plate.update_play_mode(pmobj.value.playerPlayMode);
				}
			}
		}
	}
	pmrequest.open('GET', url, true);
	pmrequest.send();
}

// Subscribe to one or more events
streamer.subscribeTo = function (queueIDstr, scriptions) {
	var url = location.origin + "/api/event/modifyQueue?queueId=" + queueIDstr +
		"&subscribe=" + scriptions;
	//log("URL " + url);
	var mqrequest = new XMLHttpRequest();
	mqrequest.onload = function () {
		log("subscribeTo onload responseText=" + this.responseText);
		if (this.responseText != null) {
			var left = this.responseText.indexOf("{");
			var right = this.responseText.lastIndexOf("}");
			if (left < right) {
				var qid = this.responseText.substring(left, right + 1);
				streamer.pollDevice(qid);
			}
		}
	}
	mqrequest.onerror = function (evt) {
		logE("subscribeTo error responseText=", this.responseText);
	};
	mqrequest.open('GET', url, true);
	mqrequest.send();
}

// Unsubscribe from one or more events
streamer.unsubscribeFrom = function (queueIDstr, scriptions) {
	var url = location.origin + "/api/event/modifyQueue?queueId=" + queueIDstr +
		"&unsubscribe=" + scriptions;
	//log("URL " + url);
	var rqrequest = new XMLHttpRequest();
	rqrequest.onload = function () {
		//log("unsubscribeFrom onload responseText=" + this.responseText);
		if (this.responseText != null) {
			var left = this.responseText.indexOf("{");
			var right = this.responseText.lastIndexOf("}");
			if (left < right) {
				var qid = this.responseText.substring(left, right + 1);
			}
			else if (left < 0 && right < 0) {
				log("unsubscribeFrom should be error");
			}
		}
	}
	rqrequest.onerror = function (evt) {
		logE("unsubscribeFrom error responseText=", this.responseText);
	};
	rqrequest.open('GET', url, true);
	rqrequest.send();
}

// Poll the device for an occurance of subscribed events
streamer.pollDevice = function (queueIDstr) {
	var url = location.origin + "/api/event/pollQueue?queueId=" + queueIDstr +
		"&timeout=10";
	var pollrequest = new XMLHttpRequest();
	pollrequest.onload = function () {
		if (this.responseText != null) {
			log("pollDevice onload " + queueIDstr + " " + diag_time_ms() + " responseText=" + this.responseText);
			var tarray = JSON.parse(this.responseText);
			var bquestion = false;
			var itemcnt = 0;
			while (itemcnt < tarray.length) {
				var tobj = tarray[itemcnt];
				if (tobj.path == "settings:/mediaPlayer/playMode") {
					if ((tobj.itemValue != undefined) &&
						(tobj.itemValue.playerPlayMode != undefined)) {
						streaming_page.update_play_mode(tobj.itemValue.playerPlayMode);
						streaming_plate.update_play_mode(tobj.itemValue.playerPlayMode);
					}
				}
				else if (tobj.path == "player:player/data") {
					//log("pollDevice player data ", tobj.itemValue);
					if ((tobj.itemValue != undefined) &&
						(tobj.itemValue.mediaRoles != undefined)) {
						if ((tobj.itemValue.state != undefined) &&
							((tobj.itemValue.state == "playing") ||
								(tobj.itemValue.state == "paused") ||
								(tobj.itemValue.state == "stopped"))) {
							streaming_plate.xable_control_states(tobj.itemValue.state);
							bquestion = true;
						}
					}
				}
				else if (tobj.path == player_page.data.usb_service) // "ui:/storage"
				{
					//log("pollDevice storage event ", tobj.rowsEvents);
					if (tobj.rowsEvents != undefined) {
						for (var usbix = 0; usbix < tobj.rowsEvents.length; usbix++) {
							var rowvent = tobj.rowsEvents[usbix];
							if (rowvent.type == "remove") {
								player_page.remove_usb_service(rowvent.index);
							}
							else if (rowvent.type == "add") {
								//log("pollDevice storage add " + usbix + ", index " + rowvent.index);
								player_page.new_usb_notice();
							}
						}
					}
				}
				itemcnt++;
			}
			if (((streaming_page.data.zonem.power == 1) ||
				(streaming_page.data.zone2.power == 1)) &&
				(streaming_page.data.loaded || player_page.data.loaded ||
					(main_zone_page.is_audio_streaming() && main_zone_page.data.loaded) ||
					(zone_2_page.is_audio_streaming() && zone_2_page.data.loaded))) {
				setTimeout(streamer.pollDevice, 500, queueIDstr);
			}
			if (bquestion) {
				streamer.questionSong();
			}
		}
	}
	pollrequest.onerror = function (evt) {
		logE("pollDevice error responseText=", this.responseText);
	};
	pollrequest.open('GET', url, true);
	pollrequest.send();
}

// Get detailed data about the song
streamer.questionSong = function () {
	streamer.turnMonitorOff();
	var url = location.origin + "/api/getData?path=/player/data&roles=@all";
	//log("URL " + diag_time_ms() + " " + url);
	var qstrequest = new XMLHttpRequest();
	qstrequest.onload = function () {
		log("questionSong onload responseText=" + this.responseText);
		var tobj = JSON.parse(this.responseText);
		if ((tobj.value != undefined) && (tobj.value.state != null)) {
			streaming_page.data.song_details = tobj;
			if ((tobj.value.state == "playing") || (tobj.value.state == "paused")) {
				streaming_page.fillNowPlaying(tobj.value);
				streaming_plate.fillNowPlaying(tobj.value);
				streaming_plate.xable_control_states(tobj.value.state, tobj.value.controls);
				player_page.updateSongList(tobj.value);
				player_page.updateSongTree(tobj.value);
				streaming_page.fillProgressLimit(tobj.value);
				if (streaming_page.data.loaded) {
					streamer.unsubscribeFrom(streaming_page.data.pollsub_id, streamer.fixed.playscribed);
				}
				streamer.data.monitorTO = setTimeout(streamer.monitorSong, 500);
			} else if (tobj.value.state == "stopped") {
				player_page.highlightRow(0);
				player_page.highlightLeaf("");
				streaming_page.clearNowPlaying();
				streaming_page.clearProgress();
				streaming_plate.clearNowPlaying();
				streaming_plate.xable_control_states(tobj.value.state);
				streaming_plate.clearProgress();
			} else if (tobj.value.state == "transitioning") {
				streaming_plate.xable_control_states(tobj.value.state);
				setTimeout(streamer.questionSong, 500);
			} else {
				logE("questionSong value.state not handled");
			}
		} else {
			logE("questionSong value.state null");
		}
	}
	qstrequest.open('GET', url, true);
	qstrequest.send();
}

// Set the repeat/shuffle option
streamer.modeSetting = function (vparam) {
	var url = location.origin + "/api/setData?path=settings:/mediaPlayer/playMode&role=value&value=" + vparam;
	var moderequest = new XMLHttpRequest();
	moderequest.onload = function () {
		log("modeSetting onload responseText=" + this.responseText);
		var mobj = JSON.parse(this.responseText);
		if (mobj.value.playerPlayMode != undefined) {
			streaming_page.update_play_mode(mobj.value.playerPlayMode);
			streaming_plate.update_play_mode(mobj.value.playerPlayMode);
		}
	}
	moderequest.onerror = function () {
		logE("modeSetting error responseText=", this.responseText);
	}
	moderequest.open('GET', url, true);
	moderequest.send();
}

// Continuously update the song timing
streamer.monitorSong = function () {
	var url = location.origin + "/api/getData?path=/player/data/playTime&roles=value";
	streamer.data.monrequest = new XMLHttpRequest();
	streamer.data.monrequest.onload = function () {
		//log("monitorSong onload " + diag_time_ms() + " responseText=" + this.responseText);
		var tobj = JSON.parse(this.responseText)[0];
		if (tobj.type == "i64_") {
			if (tobj.i64_ > 0) {
				streaming_page.updateProgress(tobj.i64_);
				streaming_plate.updateProgress(tobj.i64_);
				streamer.data.monitorTO = setTimeout(streamer.monitorSong, 1001);
			} else {
				// Try for a different song
				setTimeout(streamer.questionSong, 700);
			}
		}
	}
	streamer.data.monrequest.onerror = function (evt) {
		logE("monitorSong one error responseText=", this.responseText);
	};
	streamer.data.monrequest.open('GET', url, true);
	streamer.data.monrequest.send();
}

streamer.playControl = function (vparam) {
	var url = location.origin + "/api/setData?path=/player/control&roles=activate&value=" + vparam;
	//log("URL " + url);
	var ctrlrequest = new XMLHttpRequest();
	ctrlrequest.onload = function () {
		log("playControl onload responseText=" + this.responseText);
		if (vparam == streamer.fixed.cstop) {
			player_page.highlightRow(0);
			player_page.highlightLeaf("");
			streaming_page.clearNowPlaying();
			streaming_page.clearProgress();
			streaming_plate.clearNowPlaying();
			streaming_plate.clearProgress();
		}
	}
	ctrlrequest.onerror = function (evt) {
		logE("playControl error responseText=", this.responseText);
	};
	ctrlrequest.open('GET', url, true);
	ctrlrequest.send();
}

// Stop monitoring the play time of the song
streamer.turnMonitorOff = function () {
	if ((streamer.data.monrequest != null) &&
		(streamer.data.monrequest.onload != null)) {
		streamer.data.monrequest.onload = null;
		streamer.data.monrequest.onerror = null;
		streamer.data.monrequest = null;
	}
	clearTimeout(streamer.data.monitorTO);
}


var sue_network_page = {}

var WIFI_INTERVAL = 500;
var WIFI_TIMEOUT = 10000;

sue_network_page.data = {
	loaded: false,
	first_load: true,
	networkProfile: {
		type: "automatic",
		wired: {
			dhcp: true,
			ip: "192.168.0.100",
			netmask: "255.255.255.0",
			gateway: "192.168.0.1",
			dns: "192.168.0.1"
		},
		wireless: {
			dhcp: true,
			ip: "192.168.0.100",
			netmask: "255.255.255.0",
			gateway: "192.168.0.1",
			dns: "192.168.0.1",
			ssid: "home network",
			encryption: "wpa_psk",
			key: "****",
			manual: false
		}
	}
};
sue_network_page.scan = {
	scanning: false,
	poll_timer: null,
	scan_timer: null,
	callback: null,
	scan_results: {}
};

// Fill the profile from received data
sue_network_page.fillNetworkProfile = function (rcvd) {
	var netprof = sue_network_page.data.networkProfile;
	if (rcvd.wired != undefined) {
		if (rcvd.wired.dhcp != undefined) {
			netprof.wired.dhcp = rcvd.wired.dhcp;
		}
		if (rcvd.wired.ip != undefined) {
			netprof.wired.ip = rcvd.wired.ip;
		}
		if (rcvd.wired.netmask != undefined) {
			netprof.wired.netmask = rcvd.wired.netmask;
		}
		if (rcvd.wired.gateway != undefined) {
			netprof.wired.gateway = rcvd.wired.gateway;
		}
		if (rcvd.wired.dns != undefined) {
			netprof.wired.dns = rcvd.wired.dns;
		}
	}
	if (rcvd.wireless != undefined) {
		if (rcvd.wireless.dhcp != undefined) {
			netprof.wireless.dhcp = rcvd.wireless.dhcp;
		}
		if (rcvd.wireless.ip != undefined) {
			netprof.wireless.ip = rcvd.wireless.ip;
		}
		if (rcvd.wireless.netmask != undefined) {
			netprof.wireless.netmask = rcvd.wireless.netmask;
		}
		if (rcvd.wireless.gateway != undefined) {
			netprof.wireless.gateway = rcvd.wireless.gateway;
		}
		if (rcvd.wireless.dns != undefined) {
			netprof.wireless.dns = rcvd.wireless.dns;
		}
		if (rcvd.wireless.ssid != undefined) {
			netprof.wireless.ssid = rcvd.wireless.ssid;
		}
		if (rcvd.wireless.encryption != undefined) {
			netprof.wireless.encryption = rcvd.wireless.encryption;
		}
		if (rcvd.wireless.key != undefined) {
			netprof.wireless.key = rcvd.wireless.key;
		}
		if (rcvd.wireless.manual != undefined) {
			netprof.wireless.manual = rcvd.wireless.manual;
		}
	}
}

// Generate a minimum wired configuration
sue_network_page.setMinimum = function () {
	var config = {};
	config.networkProfile = {};
	config.networkProfile.type = "automatic";
	config.networkProfile.wired = {};
	return config;
}

// Generate a minimum configuration common to wired and wireless
sue_network_page.setCommon = function () {
	var config = sue_network_page.setMinimum();
	config.networkProfile.wireless = {};
	return config;
}

// Set Ethernet settings when auto/dhcp
sue_network_page.setWiredAuto = function () {
	var config = sue_network_page.setMinimum();
	config.networkProfile.wired.dhcp = true;
	var jsonstr = JSON.stringify(config);
	sue_network_page.sendSetNetworkProfile(jsonstr);
}

// Set Ethernet settings when using entered parameters
sue_network_page.setWiredManual = function (ipa, mask, gwa, dnsa) {
	var config = sue_network_page.setMinimum();
	config.networkProfile.wired.dhcp = false;
	config.networkProfile.wired.ip = ipa;
	config.networkProfile.wired.netmask = mask;
	config.networkProfile.wired.gateway = gwa;
	config.networkProfile.wired.dns = dnsa;
	var jsonstr = JSON.stringify(config);
	sue_network_page.sendSetNetworkProfile(jsonstr);
}

// Set Wi-Fi settings when auto/dhcp
sue_network_page.setWirelessAuto = function (manunet, ssidin, ssidhid, crypto, passcoded) {
	var config = sue_network_page.setCommon();
	config.networkProfile.wired = sue_network_page.data.networkProfile.wired;
	config.networkProfile.wireless.dhcp = true;
	var unwired = sue_network_page.data.networkProfile.wireless;
	config.networkProfile.wireless.key = passcoded;
	config.networkProfile.wireless.manual = manunet.toString();
	if (manunet) {
		config.networkProfile.wireless.ssid = ssidhid;
	} else {
		config.networkProfile.wireless.ssid = ssidin;
	}
	config.networkProfile.wireless.encryption = crypto;
	var jsonstr = JSON.stringify(config);
	sue_network_page.sendSetNetworkProfile(jsonstr);
}

// Set Wi-Fi settings when using entered parameters
sue_network_page.setWirelessManual = function (ipa, mask, gwa, dnsa, manunet, ssidin, ssidhid, crypto, passcoded) {
	var config = sue_network_page.setCommon();
	config.networkProfile.wired = sue_network_page.data.networkProfile.wired;
	config.networkProfile.wireless.dhcp = false;
	config.networkProfile.wireless.ip = ipa;
	config.networkProfile.wireless.netmask = mask;
	config.networkProfile.wireless.gateway = gwa;
	config.networkProfile.wireless.dns = dnsa;
	config.networkProfile.wireless.key = passcoded;
	config.networkProfile.wireless.manual = manunet;
	if (manunet) {
		config.networkProfile.wireless.ssid = ssidhid;
	} else {
		config.networkProfile.wireless.ssid = ssidin;
	}
	config.networkProfile.wireless.encryption = crypto;
	var jsonstr = JSON.stringify(config);
	sue_network_page.sendSetNetworkProfile(jsonstr);
}

sue_network_page.sendSetNetworkProfile = function (npf) {
	var url = location.origin + "/api/setData?path=network:setNetworkProfile&roles=activate&value=" + npf;
	log("URL " + url);
	var setrequest = new XMLHttpRequest();
	setrequest.onload = function () {
		log("sendSetNetworkProfile onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if ((obj != undefined) && (obj.error != undefined)) {
			var error_msg = "Error " + setrequest.status + ": " + obj.error.message;
			alert(error_msg);
		} // else null returned when successful
	}
	setrequest.onerror = function (evt) {
		log("sendSetNetworkProfile error responseText=", this.responseText);
	};
	setrequest.open('GET', url, true);
	setrequest.send();
}

//Get the networkInfo
sue_network_page.sendGetNetworkInfo = function (callback_fn) {
	var url = location.origin + "/api/getData?path=network:info&roles=@all";
	log("URL " + url);
	var getrequest = new XMLHttpRequest();
	getrequest.onload = function () {
		log("sendGetNetworkInfo onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if (obj.path != undefined) {
			callback_fn(this.responseText);
		} else if (obj.error != undefined) {
			var error_msg = "Error " + getrequest.status + ": " + obj.error.message;
			alert(error_msg);
		}
	}
	getrequest.onerror = function (evt) {
		log("sendGetNetworkInfo error responseText=", this.responseText);
	};
	getrequest.open('GET', url, true);
	getrequest.send();
}

//Get the networkProfile
sue_network_page.sendGetNetworkProfile = function (callback_fn) {
	var url = location.origin + "/api/getData?path=network:profile&roles=@all";
	log("URL " + url);
	var getrequest = new XMLHttpRequest();
	getrequest.onload = function () {
		log("sendGetNetworkProfile onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if (obj.path != undefined) {
			if ((obj.type == "value") && (obj.value.type == "networkProfile")) {
				sue_network_page.fillNetworkProfile(obj.value.networkProfile);
			}
			callback_fn(this.responseText);
		} else if (obj.error != undefined) {
			var error_msg = "Error " + getrequest.status + ": " + obj.error.message;
			alert(error_msg);
		}
	}
	getrequest.onerror = function (evt) {
		log("sendGetNetworkProfile error responseText=", this.responseText);
	};
	getrequest.open('GET', url, true);
	getrequest.send();
}

sue_network_page.startWirelessNetworkScan = function (callback_fn) {
	if (sue_network_page.scan.scanning) {
		return;
	}

	sue_network_page.scan.scanning = true;
	sue_network_page.scan.callback = callback_fn
	sue_network_page.scan.poll_timer = setInterval(sue_network_page.sendGetScanResults, WIFI_INTERVAL);
	sue_network_page.scan.scan_timer = setTimeout(sue_network_page.stopWirelessNetworkScan, WIFI_TIMEOUT);
	sue_network_page.scan.scan_results = {};

	sue_network_page.sendActivation("network:scan", "{}");
}

sue_network_page.stopWirelessNetworkScan = function () {
	clearInterval(sue_network_page.scan.poll_timer);
	clearTimeout(sue_network_page.scan.scan_timer);
	sue_network_page.scan.scanning = false;
	if (sue_network_page.scan.callback != null) {
		sue_network_page.scan.callback(sue_network_page.scan.scan_results);
		sue_network_page.scan.callback = null;
	}
}

sue_network_page.sendActivation = function (cmd_path, cmd_param) {
	var url = location.origin + "/api/setData?path=" + cmd_path + "&roles=activate&value=" + cmd_param;
	log("URL " + url);
	var setrequest = new XMLHttpRequest();
	setrequest.onload = function () {
		log("sendActivation onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if ((obj != undefined) && (obj.error != undefined)) {
			var error_msg = "Error " + setrequest.status + ": " + obj.error.message;
			alert(error_msg);
		} else {
			//maybe nothing to do
		}
	}
	setrequest.onerror = function (evt) {
		log("sendActivation error responseText=", this.responseText);
	};
	setrequest.open('GET', url, true);
	setrequest.send();
}

sue_network_page.sendGetRows = function (cmd_path, cmd_roles, cmd_from, cmd_to, callback) {
	var url = location.origin + "/api/getRows?path=" + cmd_path + "&roles=" + cmd_roles +
		"&from=" + cmd_from + "&to=" + cmd_to;
	log("URL " + url);
	var getrequest = new XMLHttpRequest();
	getrequest.onload = function () {
		log("sendGetRows onload " + diag_time_ms() + " responseText=" + this.responseText);
		var obj = JSON.parse(this.responseText);
		if ((obj != undefined) && (obj.error != undefined)) {
			var error_msg = "Error " + getrequest.status + ": " + obj.error.message;
			alert(error_msg);
		} else {
			callback(obj);
		}
	}
	getrequest.onerror = function (evt) {
		log("sendGetRows error responseText=", this.responseText);
	};
	getrequest.open('GET', url, true);
	getrequest.send();
}

sue_network_page.sendGetScanResults = function () {
	sue_network_page.sendGetRows("network:scan_results", "title,value", 0, 99, function (data) {
		if (sue_network_page.scan.scan_results.length != data.rows.length) {
			sue_network_page.scan.scan_results = data.rows;
			clearTimeout(sue_network_page.scan.poll_timer);
			sue_network_page.scan.poll_timer = setInterval(sue_network_page.sendGetScanResults, WIFI_INTERVAL);
		}
	});
}

var firmware = {}



firmware.version_text = "";
firmware.new_version_text = "";

firmware.init = function () {

	turn_on_listeners();
	alert_if_new_firmware_updated();
	check_for_latest_version();

	function turn_on_listeners() {
		$get("#remove_update_button").click(function () {
			firmware.hide_firmware_reminder();
		});
		$get("#update_now_button").click(function () {
			firmware.update_firmware();
		});
	}

	function alert_if_new_firmware_updated() {
		var old_firmware = cookies.get_firmware_old_version();
		var current_firmware = cookies.get_firmware_current_version();

		if (cookies.get_firmware_fresh_update() === 1 && old_firmware !== "" && current_firmware !== "") {
			var old_firmware_int = firmware_string_to_int(old_firmware);
			var current_firmware_int = firmware_string_to_int(current_firmware);
			var title = TR("Firmware Updated");
			if (current_firmware_int > old_firmware_int) {
				show_modal(title, TR("Firmware successfully updated (%1 to %2)", [old_firmware, current_firmware]));
			} else if (current_firmware_int < old_firmware_int) {
				show_modal(title, TR("Firmware successfully downgraded (%1 to %2)", [old_firmware, current_firmware]));
			} else {
				show_modal(title, TR("Firmware successfully updated"));
			}
			cookies.delete_firmware_fresh_update();
			cookies.delete_firmware_old_version();
			cookies.delete_firmware_current_version();
		}
	}

	function check_for_latest_version() {
		log("Checking for latest firmware...");
		$get.getJSON('https://www.anthemav.com/support/md/version/', {
			model: device.model
		}).done(function (data) {
			if (data !== "error") {
				firmware.version_text = data;

				//save_page.update_UI_latest_firmware_version(firmware.version_text);
				var current_version_text = device.firmware_version;
				if ((firmware.version_text !== null && current_version_text !== null) && (firmware_string_to_int(firmware.version_text) > firmware_string_to_int(current_version_text))) {
					log("new firmware version found: " + firmware.version_text);
					firmware.show_firmware_reminder();
				} else {
					log("up-to-date firmware version found: " + firmware.version_text);
				}
			} else {
				logE("firmware check_for_latest_version failed");
			}
		});
	}
}


firmware.update_firmware = function () {

	show_loader(TR("Starting firmware update"));

	$get.get("https://www.anthemav.com/support/md/update/", { model: device.model, mac: device.mac, serial: device.serial_number, from_version: device.firmware_version, to_version: firmware.version_text })
		.done(function (reponse) {
			if (reponse !== "Error") {
				firmware.new_version_text = firmware.version_text;
				firmware.enter_firmware_mode(reponse);
			} else {
				logFatal(TR("Error while updating the unit! Error code 0xxC02"));
			}
		});
}

firmware.show_firmware_reminder = function () {
	$get("#firmware_reminder").show();
}

firmware.hide_firmware_reminder = function () {
	$get("#firmware_reminder").hide();
}

function firmware_string_to_int(firmware_string) {
	return parseInt(firmware_string.replace(/\./g, ''));
}


firmware.is_firmware_mode = false;
firmware.is_flash_erased = false;
firmware.enter_firmware_mode = function (data) {

	show_loader(TR("Entering firmware mode"));

	const TAKEN_ACTION = 1;

	send_take_firmware_exclusive_control();
	query_firmware_exclusive_control();

	function send_take_firmware_exclusive_control() {
		socket.send(COMMAND.CTRL2 + TAKEN_ACTION + ";");
	}
	function query_firmware_exclusive_control() {
		socket.send(COMMAND.CTRL2 + "?;");
	}


	if (firmware.is_firmware_mode === false) {
		(function (that, i) {
			var t = setTimeout(function () {
				firmware.enter_firmware_mode(data); /// recursive
			}, 1000 * i);
		})(this, TAKEN_ACTION);
	} else {

		log("Entered Firmware Mode");
		socket.send(COMMAND.PRGS + "1;");
		erase_memory(data);
		return true;
	}

	function erase_memory(data) {
		show_loader(TR("Erasing flash memory"));
		var s = 1;
		socket.send(COMMAND.PRGS0 + "?;");
		if (firmware.is_flash_erased === false) {
			(function (that, i) {
				var t = setTimeout(function () {
					erase_memory(data);  /// recursive
				}, 2000 * i);
			})(this, s);
		} else {
			log("Flash Erased");
			firmware.sendFirmware(data);
			return true;
		}
	}
}

firmware.sendFirmware = function (data) {
	if (data.hasOwnProperty("commands") && data.commands.length) {
		$blocks = data.commands.chunk(10);
		var sendblocks = new Promise(promise_handle);
		function promise_handle(resolve, reject) {
			jQuery.each($blocks, function (k, block) {
				k++;
				var t = setTimeout(function () {
					jQuery.each(block, function (i, command) {
						i++;
						if (command.startsWith(COMMAND.Z1EPRG)) {

							socket.send(command);

							if (parseInt(i) === parseInt(block.length)) {
								$block_id = "block" + k;
								socket.send($block_id + ";");
								if (parseInt(k) === parseInt($blocks.length)) {
									socket.onclose = function (code, reason) { };
									socket.onerror = function (event) { };
									var j = 0;
									var progress = Math.ceil(k * 100 / $blocks.length);
									!function all_treated() {
										if (firmware.blocks_treated.length === $blocks.length - 1) {
											show_loader(TR("Applying changes"));
											resolve($blocks.length);
										} else {
											j++;
											if (j === 100) {
												reject();
											} else {
												setTimeout(all_treated, 10000);
											}
										}
									}();
								}
							}
						}
					});
				}, 20 * k);
			});
		}

		/*sendblocks.catch(() => {
		logFatal(TR("Error while updating the unit! Error code 0xxB02"));
		});*/

		// TODO broken wont minify

		/*sendblocks.catch(catch_handle);
		function catch_handle(){
		logFatal(TR("Error while updating the unit! Error code 0xxB02"));
		}*/

		sendblocks.then(then_handle);
		function then_handle(blocklength) {
			setTimeout(function () {
				if (blocklength - 1 === firmware.blocks_treated.length) {
					reboot();
				} else {
					logFatal(TR("Error while updating the unit! Error code 0xxA01"));
				}
			}, 2000);
		}
	}


	function reboot() {
		show_loader(TR("Rebooting"));
		log("Rebooting");
		socket.onclose = function (code, reason) { };
		socket.onerror = function (event) { };
		socket_was_connected = false;
		socket.close();
		cookies.set_firmware_fresh_update();
		cookies.set_firmware_old_version(device.firmware_version);
		cookies.set_firmware_current_version(firmware.new_version_text);
		var s = 1;
		(function (that, i) {
			var t = setTimeout(function () {
				localStorage.clear();
				sessionStorage.clear();
				log("reloading page");
				location.reload();
			}, 60000 * i);
		})(this, s);
	}
}

firmware.blocks_treated = [];
firmware.handle_firmware_blocks = function (block) {
	firmware.blocks_treated.push(block);
	var progress = Math.ceil(firmware.blocks_treated.length / $blocks.length * 100);
	show_loader(TR("Loading firmware"));
	load_loader_progress(progress);
}


firmware.check_firmware = function (file) {

	if (file) {
		var reader = new FileReader();
		reader.readAsText(file);
		reader.onload = function (e) {
			if (check_firmware_file(e.target.result)) {
				$data = JSON.parse(e.target.result);

				var current_version_text = device.firmware_version;
				var current_version = firmware_string_to_int(current_version_text);
				var data_version_text = $data.version;
				var data_version = firmware_string_to_int(data_version_text);
				var message;

				if (data_version < current_version) {
					message = TR("Are you sure you want to downgrade firmware versions? (%1 to %2)", [current_version_text, data_version_text]);
				} else if (data_version > current_version) {
					message = TR("Are you sure you want to update your firmware? (%1 to %2)", [current_version_text, data_version_text]);
				} else { // data_version === current_version
					message = TR("Are you sure you want to update with the same firmware version? (%1)", [current_version_text]);
				}

				firmware.hide_firmware_reminder();
				if (confirm(message)) {
					show_loader();
					firmware.new_version_text = data_version_text;
					firmware.enter_firmware_mode($data);
				}
			} else {
				logFatal(TR("The firmware file is of the wrong type or format."));
			}
		};
	} else {
		logFatal(TR("Please choose a firmware file to update."));
	}

	function check_firmware_file(str) {
		try {
			$data = JSON.parse(str);
			if ($data.hasOwnProperty("version") === true && $data.version.length !== 0 && $data.hasOwnProperty("commands") === true && $data.commands.length > 50) {
				jQuery.each($data.commands, function (i, command) {
					if (command.startsWith(COMMAND.Z1EPRG) !== true) {
						return false;
					}
				});
				if ($data.version.includes(".") !== true && $data.version.replace(/\./g, '').isInteger !== true) {
					return false;
				}
				if ($data.commands.slice(-1)[0].startsWith("PRGF") !== true) {
					return false;
				}
				if ($data.hasOwnProperty("model") === false || $data.model.replace('-', '') !== device.model.replace('-', '')) {
					logE("firmware file model and unit model are different: " + device.model + " vs " + $data.model);
					return false;
				}
			} else {
				return false;
			}
			return true;
		} catch (e) {
			return false;
		}
	}
}


var command_listener = {};

command_listener.on_device_model_changed = function (value) {
	log("on_device_model_changed " + value);

	setDevice(value);
	update_UI_model_name(value);
	info_page.update_UI_model_name(value);
	configure_based_on_model_type(value);
	main_zone_page.update_UI_model_name(value);
	general_page.update_UI_model_name(value);
	speaker_page.update_UI_model_name(value);
	network_page.update_UI_model_name(value);
	admin_page.update_UI_model_name(value);
	save_page.update_model_name(value);
	on_model_init(value);
}
command_listener.on_version_changed = function (value) {
	log("on_version_changed " + value);
	device.firmware_version = value;
	info_page.update_UI_firmware_version(value);
}
command_listener.on_serial_number_changed = function (value) {
	log("on_serial_number_changed " + value);
	device.serial_number = value;
	info_page.update_UI_serial_number(value);
}
command_listener.on_firmware_control_changed = function (value) {
	value = parseInt(value);
	log("on_firmware_control_changed " + value);
	firmware.is_firmware_mode = value === 1;
}
command_listener.on_firmware_prgs_changed = function (value) {
	value = parseInt(value);
	log("on_firmware_prgs_changed " + value);
	firmware.is_flash_erased = value === 1;
}
command_listener.on_exclusive_control_progress = function (value) {
	if (value === 101)
		hide_loader();
	else
		load_loader_progress(value);
}

// info
command_listener.on_dsp_version_changed = function (value) {
	info_page.update_UI_dsp_version(value);
}
command_listener.on_lcdc_version_changed = function (value) {
	info_page.update_UI_lcdc_version(value);
}
command_listener.on_software_build_date_changed = function (value) {
	info_page.update_UI_software_build_date(value);
}
command_listener.on_hardware_version_changed = function (value) {
	info_page.update_UI_hardware_version(value);
}
command_listener.on_region_changed = function (value) {
	info_page.update_UI_region(value);
}
command_listener.on_arc_upload_date_received = function (value) {
	log("on_arc_upload_date_received " + value);
	info_page.update_UI_arc_upload_date(value);
}
command_listener.on_arc_name_received = function (value) {
	log("on_arc_name_received " + value);
	info_page.update_UI_arc_name(value);
}

command_listener.on_module_version_changed = function (value) {
	info_page.update_UI_module_version(value);
	save_page.update_UI_module_version(value);
}
command_listener.on_module_harware_version_changed = function (value) {
	info_page.update_UI_module_hardware_version(value);
}
command_listener.on_wifi_mac_address_changed = function (value) {
	info_page.update_UI_wifi_mac_address(value);
}
command_listener.on_ethernet_address_changed = function (value) {
	info_page.update_UI_ethernet_mac_address(value);
}
command_listener.on_network_status_changed = function (value) {
	info_page.update_UI_network_status(value);
}

//system status
command_listener.on_active_video_input_changed = function (value) {
	info_page.update_UI_active_video_input(value);
}
command_listener.on_active_horizontal_video_resolution_changed = function (value) {
	info_page.update_UI_active_horizontal_video_resolution(value);
}
command_listener.on_active_vertical_video_resolution_changed = function (value) {
	info_page.update_UI_active_vertical_video_resolution(value);
}
command_listener.on_audio_input_channels_changed = function (value) {
	info_page.update_UI_audio_input_channels(value);
}
command_listener.on_audio_input_format_changed = function (value) {
	info_page.update_UI_audio_input_format(value);
}
command_listener.on_audio_input_bit_rate_changed = function (value) {
	info_page.update_UI_audio_input_bit_rate(value);
}
command_listener.on_audio_input_sampling_rate_changed = function (value) {
	info_page.update_UI_audio_input_sampling_rate(value);
}
command_listener.on_audio_input_bit_depth_changed = function (value) {
	info_page.update_UI_audio_input_bit_depth(value);
}
command_listener.on_audio_input_name_changed = function (value) {
	info_page.update_UI_audio_input_name(value);
}
command_listener.on_audio_input_rate_name_changed = function (value) {
	info_page.update_UI_audio_input_rate_name(value);
}

// zone
command_listener.on_power_on_volume_changed = function (value) {
	log("on_power_on_volume_changed " + value);
	general_page.update_main_power_on_volume(value);
}
command_listener.on_zone_2_power_on_volume_changed = function (value) {
	log("on_zone_2_power_on_volume_changed " + value);
	general_page.update_zone2_power_on_volume(value);
}
command_listener.on_main_max_volume_volume_changed = function (value) {
	log("on_main_max_volume_volume_changed " + value);
	general_page.update_main_max_volume(value);
	main_zone_page.update_UI_max_volume(value);
}
command_listener.on_zone_2_max_volume_volume_changed = function (value) {
	log("on_zone_2_max_volume_volume_changed " + value);
	general_page.update_zone2_max_volume(value);
	zone_2_page.update_UI_max_volume(value);
}
command_listener.on_main_power_on_input_changed = function (value) {
	log("on_main_power_on_input_changed " + value);
	general_page.update_main_power_on_input(value);
}
command_listener.on_zone_2_power_on_input_changed = function (value) {
	log("on_zone_2_power_on_input_changed " + value);
	general_page.update_zone2_power_on_input(value);
}

// general
command_listener.on_device_name_changed = function (value) {
	log("on_device_name_changed " + value);
	device.friendly_name = value;
	update_UI_friendly_name(value);
	general_page.update_UI_friendly_name(value);
	info_page.update_UI_device_name(value);
}
command_listener.on_language_changed = function (value) {
	log("on_language_changed " + value);
	general_page.update_UI_languages(value);
}
command_listener.on_distance_unit_changed = function (value) {
	log("on_distance_unit_changed " + value);
	general_page.update_UI_distance_units(value);
	speaker_page.update_distance_units(value);
}
command_listener.on_master_volume_scale_changed = function (value) {
	log("on_master_volume_scale_changed " + value);
	VOLUME_SCALE_IN_DB = value === 1;
	general_page.update_UI_master_volume_scale(value);
	main_zone_page.update_UI_volume_scale();
	if (device.use_zone2) {
		zone_2_page.update_UI_volume_scale();
	}
}
command_listener.on_standby_hdmi_bypass_changed = function (value) {
	log("on_standby_hdmi_bypass_changed " + value);
	general_page.update_UI_standby_hdmi_bypass(value);
}
command_listener.on_automatic_updates_changed = function (bvalue) {
	log("on_automatic_updates_changed " + bvalue);
	save_page.update_UI_auto_updates(bvalue);
}
command_listener.on_beta_updates_changed = function (bvalue) {
	log("on_beta_updates_changed " + bvalue);
	save_page.update_UI_beta_updates(bvalue);
}
command_listener.on_connected_standby_changed = function (bvalue) {
	log("on_connected_standby_changed " + bvalue);
	general_page.update_UI_connected_standby(bvalue);
}
command_listener.on_no_signal_power_off_changed = function (value) {
	log("on_no_signal_power_off_changed " + value);
	general_page.update_UI_no_signal_power_off(value);
}
command_listener.on_front_panel_displayed_info_changed = function (value) {
	log("on_front_panel_displayed_info_changed " + value);
	general_page.update_UI_front_panel_displayed_info(value);
}
command_listener.on_front_panel_brightness_changed = function (value) {
	log("on_front_panel_brightness_changed " + value);
	general_page.update_UI_front_panel_brightness(value);
}
command_listener.on_wake_up_brightness_changed = function (value) {
	log("on_wake_up_brightness_changed " + value);
	general_page.update_UI_wake_up_brightness(value);
}
command_listener.on_onscreen_info_display_changed = function (value) {
	log("on_onscreen_info_display_changed " + value);
	general_page.update_UI_on_screen_info_display(value);
}
command_listener.on_onscreen_info_zone_changed = function (value) {
	log("on_onscreen_info_zone_changed " + value);
	general_page.update_UI_on_screen_info_zone(value);
}
command_listener.on_mute_level_changed = function (value) {
	log("on_mute_level_changed " + value);
	general_page.update_UI_mute_level(value);
}
command_listener.on_mute_line_out_when_selecting_changed = function (value) {
	log("on_mute_line_out_when_selecting_changed " + value);
	general_page.update_UI_mute_line_out(value);
}
command_listener.on_mute_digital_out_when_selecting_changed = function (value) {
	log("on_mute_digital_out_when_selecting_changed " + value);
	general_page.update_UI_mute_digital_out(value);
}
command_listener.on_headphone_mutes_main_outputs_changed = function (bvalue) {
	log("on_headphone_mutes_main_outputs_changed " + bvalue);
	general_page.update_UI_headphone_mutes_main_outputs(bvalue);
}
command_listener.on_default_streaming_zone_changed = function (bvalue) {
	log("on_default_streaming_zone_changed " + bvalue);
	general_page.update_mainz_default_streaming_zone(!bvalue);
	general_page.update_zone2_default_streaming_zone(bvalue);
	streaming_page.update_default_streaming_zone(bvalue);
}
command_listener.on_favour_current_streaming_input_changed = function (bvalue) {
	log("on_favour_current_streaming_input_changed " + bvalue);
	general_page.update_UI_favour_current_streaming_input(bvalue);
}
command_listener.on_cec_control_changed = function (bvalue) {
	log("on_cec_control_changed " + bvalue);
	general_page.update_UI_cec_control(bvalue);
}
command_listener.on_cec_power_off_control_changed = function (bvalue) {
	log("on_cec_power_off_control_changed " + bvalue);
	general_page.update_UI_cec_power_off_control(bvalue);
}
command_listener.on_hdmi_audio_to_tv_changed = function (bvalue) {
	log("on_hdmi_audio_to_tv_changed " + bvalue);
	general_page.update_UI_hdmi_audio_to_tv(bvalue);
}

// inputs
command_listener.on_input_removed = function (index) {
	log("on_input_removed " + index);
	main_zone_page.remove_input(index);
	if (device.use_zone2) {
		zone_2_page.remove_input(index);
	}
	general_page.remove_input(index);
	inputs_page.remove_input(index);
	network_page.remove_input(index);
}
command_listener.on_input_added = function (index) {
	log("on_input_added " + index);
	main_zone_page.add_input(index);
	if (device.use_zone2) {
		zone_2_page.add_input(index);
	}
	general_page.add_input(index);
	inputs_page.add_input(index);
	network_page.add_input(index);
}
command_listener.on_input_count = function (num_items) {
	log("on_input_count " + num_items);
	inputs_page.set_input_count(num_items);
	main_zone_page.update_inputs(num_items);
	if (device.use_zone2) {
		zone_2_page.update_inputs(num_items);
	}
	general_page.update_inputs(num_items);
	network_page.update_inputs(num_items);
}

// network
command_listener.on_tcp_port_changed = function (value) {
	log("on_tcp_port_changed " + value);
	network_page.update_UI_tcp_port(value);
}
command_listener.on_tx_status_changed = function (value) {
	log("on_tx_status_changed " + value);
	network_page.update_UI_tx_status(value);
}
command_listener.on_ir_changed = function (value) {
	log("on_ir_changed " + value);
	network_page.update_UI_ir(value);
}
command_listener.on_rear_ir_changed = function (bvalue) {
	log("on_rear_ir_changed " + bvalue);
	network_page.update_UI_rear_ir(bvalue);
}
command_listener.on_front_ir_changed = function (bvalue) {
	log("on_front_ir_changed " + bvalue);
	network_page.update_UI_front_ir(bvalue);
}
command_listener.on_trigger_delay_changed = function (value) {
	log("on_trigger_delay_changed " + value);
	network_page.update_UI_trigger_delay(value);
}

//IP Status
command_listener.on_ip_status_changed = function (value) {
	log("on_ip_status_changed " + value);
	network_page.update_network_status(value);
}
command_listener.on_ip_mode_changed = function (value) {
	log("on_ip_mode_changed " + value);
	network_page.update_UI_ip_mode(value);
}
command_listener.on_ip_address_changed = function (value) {
	log("on_ip_address_changed " + value);
	network_page.update_UI_ip_address(value);
}
command_listener.on_subnet_changed = function (value) {
	log("on_subnet_changed " + value);
	network_page.update_UI_subnet(value);
}
command_listener.on_gateway_changed = function (value) {
	log("on_gateway_changed " + value);
	network_page.update_UI_gateway(value);
}
command_listener.on_dns_changed = function (value) {
	log("on_dns_changed " + value);
	network_page.update_UI_dns(value);
}

//Ethernet Configuration
command_listener.on_eth_ip_mode_changed = function (value) {
	log("on_eth_ip_mode_changed " + value);
	network_page.change_eth_ip_mode(value);
}
command_listener.on_eth_ip_address_changed = function (value) {
	log("on_eth_ip_address_changed " + value);
	network_page.update_UI_eth_address_state(value);
}
command_listener.on_eth_subnet_changed = function (value) {
	log("on_eth_subnet_changed " + value);
	network_page.update_UI_eth_subnet_state(value);
}
command_listener.on_eth_gateway_changed = function (value) {
	log("on_eth_gateway_changed " + value);
	network_page.update_UI_eth_gateway_state(value);
}
command_listener.on_eth_dns_changed = function (value) {
	log("on_eth_dns_changed " + value);
	network_page.update_UI_eth_dns_state(value);
}

// Wi-Fi Configuration
command_listener.on_wifi_ip_mode_changed = function (value) {
	log("on_wifi_ip_mode_changed " + value);
	network_page.change_wifi_ip_mode(value);
}
command_listener.on_wifi_ip_address_changed = function (value) {
	log("on_wifi_ip_address_changed " + value);
	network_page.update_UI_wifi_address_state(value);
}
command_listener.on_wifi_subnet_changed = function (value) {
	log("on_wifi_subnet_changed " + value);
	network_page.update_UI_wifi_subnet_state(value);
}
command_listener.on_wifi_gateway_changed = function (value) {
	log("on_wifi_gateway_changed " + value);
	network_page.update_UI_wifi_gateway_state(value);
}
command_listener.on_wifi_dns_changed = function (value) {
	log("on_eth_wifi_changed " + value);
	network_page.update_UI_wifi_dns_state(value);
}

// Hardware Assist
command_listener.on_request_wps_pushbutton = function () {
	logE("on_request_wps_pushbutton ignored");
}
command_listener.on_request_reset_wireless = function () {
	logE("on_request_reset_wireless ignored");
}

// Load and Store
command_listener.on_store_progress_received = function (command) {
	log("on_store_progress_received " + command);
	save_page.update_UI_store_progress(command);
}

// admin
command_listener.on_custom_messages = function (bvalue) {
	admin_page.update_UI_custom_messages(bvalue);
}

// PROFILES

var command_listener_profiles = {};

command_listener_profiles.on_profile_name_changed = function (index, profile_name) {
	log("on_profile_name_changed " + index + ", " + profile_name);
	inputs_page.update_UI_profile_name(index, profile_name);
	speaker_page.update_UI_profile_name(index, profile_name);
}
command_listener_profiles.on_subwoofers_enabled_changed = function (prof_num, value) {
	log("on_subwoofers_enabled_changed " + prof_num + ", " + value);
	speaker_page.update_UI_subwoofers_enabled(prof_num, value);
	main_zone_page.update_UI_subwoofers_enabled(prof_num, value);
}
command_listener_profiles.on_front_wide_enabled_changed = function (prof_num, bvalue) {
	log("on_front_wide_enabled_changed " + prof_num + ", " + bvalue);
	speaker_page.update_UI_front_wide_enable(prof_num, bvalue);
	main_zone_page.update_UI_front_wide_enable(prof_num, bvalue);
}
command_listener_profiles.on_center_enabled_changed = function (prof_num, bvalue) {
	log("on_center_enabled_changed " + prof_num + ", " + bvalue);
	speaker_page.update_UI_center_enable(prof_num, bvalue);
	main_zone_page.update_UI_center_enable(prof_num, bvalue);
}
command_listener_profiles.on_surrounds_enabled_changed = function (prof_num, bvalue) {
	log("on_surrounds_enabled_changed " + prof_num + ", " + bvalue);
	speaker_page.update_UI_surrounds_enable(prof_num, bvalue);
	main_zone_page.update_UI_surrounds_enable(prof_num, bvalue);
}
command_listener_profiles.on_backs_enabled_changed = function (prof_num, bvalue) {
	log("on_backs_enabled_changed " + prof_num + ", " + bvalue);
	speaker_page.update_UI_backs_enable(prof_num, bvalue);
	main_zone_page.update_UI_backs_enable(prof_num, bvalue);
}
command_listener_profiles.on_heights_1_enabled_changed = function (prof_num, bvalue) {
	log("on_heights_1_enabled_changed " + prof_num + ", " + bvalue);
	speaker_page.update_UI_heights_1_enable(prof_num, bvalue);
	main_zone_page.update_UI_heights_1_enable(prof_num, bvalue);
}
command_listener_profiles.on_heights_2_enabled_changed = function (prof_num, bvalue) {
	log("on_heights_2_enabled_changed " + prof_num + ", " + bvalue);
	speaker_page.update_UI_heights_2_enable(prof_num, bvalue);
	main_zone_page.update_UI_heights_2_enable(prof_num, bvalue);
}
command_listener_profiles.on_heights_3_enabled_changed = function (prof_num, bvalue) {
	log("on_heights_3_enabled_changed " + prof_num + ", " + bvalue);
	speaker_page.update_UI_heights_3_enable(prof_num, bvalue);
	main_zone_page.update_UI_heights_3_enable(prof_num, bvalue);
}

command_listener_profiles.on_subwoofer_phase_frequency_changed = function (index, value) {
	log("on_subwoofer_phase_frequency_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_phase_frequency = value;
	speaker_page.update_UI_subwoofer_phase_frequency(index, value, 1);
}
command_listener_profiles.on_subwoofer_phase_changed = function (index, value) {
	log("on_subwoofer_phase_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_phase = value;
	speaker_page.update_UI_subwoofer_phase(index, value, 1);
}
command_listener_profiles.on_subwoofer_polarity_changed = function (index, value) {
	log("on_subwoofer_polarity_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_polarity = value;
	speaker_page.update_UI_subwoofer_polarity(index, value, 1);
}
command_listener_profiles.on_subwoofer_2_phase_frequency_changed = function (index, value) {
	log("on_subwoofer_2_phase_frequency_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_2_phase_frequency = value;
	speaker_page.update_UI_subwoofer_phase_frequency(index, value, 2);
}
command_listener_profiles.on_subwoofer_2_phase_changed = function (index, value) {
	log("on_subwoofer_2_phase_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_2_phase = value;
	speaker_page.update_UI_subwoofer_phase(index, value, 2);
}
command_listener_profiles.on_subwoofer_2_polarity_changed = function (index, value) {
	log("on_subwoofer_2_polarity_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_2_polarity = value;
	speaker_page.update_UI_subwoofer_polarity(index, value, 2);
}
command_listener_profiles.on_subwoofer_3_phase_frequency_changed = function (index, value) {
	log("on_subwoofer_3_phase_frequency_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_3_phase_frequency = value;
	speaker_page.update_UI_subwoofer_phase_frequency(index, value, 3);
}
command_listener_profiles.on_subwoofer_3_phase_changed = function (index, value) {
	log("on_subwoofer_3_phase_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_3_phase = value;
	speaker_page.update_UI_subwoofer_phase(index, value, 3);
}
command_listener_profiles.on_subwoofer_3_polarity_changed = function (index, value) {
	log("on_subwoofer_3_polarity_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_3_polarity = value;
	speaker_page.update_UI_subwoofer_polarity(index, value, 3);
}
command_listener_profiles.on_subwoofer_4_phase_frequency_changed = function (index, value) {
	log("on_subwoofer_4_phase_frequency_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_4_phase_frequency = value;
	speaker_page.update_UI_subwoofer_phase_frequency(index, value, 4);
}
command_listener_profiles.on_subwoofer_4_phase_changed = function (index, value) {
	log("on_subwoofer_4_phase_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_4_phase = value;
	speaker_page.update_UI_subwoofer_phase(index, value, 4);
}
command_listener_profiles.on_subwoofer_4_polarity_changed = function (index, value) {
	log("on_subwoofer_4_polarity_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_4_polarity = value;
	speaker_page.update_UI_subwoofer_polarity(index, value, 4);
}
command_listener_profiles.on_subwoofer_lfe_lowpass_changed = function (index, value) {
	log("on_subwoofer_lfe_lowpass_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_lfe_lowpass_filter = value;
	speaker_page.update_UI_subwoofer_lpf_for_lfe(index, value);
}
command_listener_profiles.on_subwoofer_front_crossover_changed = function (index, value) {
	log("on_subwoofer_front_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_front_crossover = value;
	speaker_page.update_UI_subwoofer_front_crossover(index, value);
}
command_listener_profiles.on_subwoofer_front_wide_crossover_changed = function (index, value) {
	log("on_subwoofer_front_wide_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_front_wide_crossover = value;
	speaker_page.update_UI_subwoofer_front_wide_crossover(index, value);
}
command_listener_profiles.on_subwoofer_center_crossover_changed = function (index, value) {
	log("on_subwoofer_center_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_center_crossover = value;
	speaker_page.update_UI_subwoofer_center_crossover(index, value);
}
command_listener_profiles.on_subwoofer_surround_crossover_changed = function (index, value) {
	log("on_subwoofer_surround_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_surround_crossover = value;
	speaker_page.update_UI_subwoofer_surround_crossover(index, value);
}
command_listener_profiles.on_subwoofer_back_crossover_changed = function (index, value) {
	log("on_subwoofer_back_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_back_crossover = value;
	speaker_page.update_UI_subwoofer_back_crossover(index, value);
}
command_listener_profiles.on_subwoofer_height_1_crossover_changed = function (index, value) {
	log("on_subwoofer_height_1_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_height_1_crossover = value;
	speaker_page.update_UI_subwoofer_height_1_crossover(index, value);
}
command_listener_profiles.on_subwoofer_height_2_crossover_changed = function (index, value) {
	log("on_subwoofer_height_2_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_height_2_crossover = value;
	speaker_page.update_UI_subwoofer_height_2_crossover(index, value);
}
command_listener_profiles.on_subwoofer_height_3_crossover_changed = function (index, value) {
	log("on_subwoofer_height_3_crossover_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_height_3_crossover = value;
	speaker_page.update_UI_subwoofer_height_3_crossover(index, value);
}
command_listener_profiles.on_super_sub_fronts_changed = function (index, value) {
	log("on_super_sub_fronts_changed " + index + ", " + value);
	speaker_page.get_profile(index).super_sub_fronts = value;
	speaker_page.update_UI_super_sub_fronts(index, value);
}

command_listener_profiles.on_subwoofer_distance_changed = function (index, value) {
	log("on_subwoofer_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_distance = value;
	speaker_page.update_UI_subwoofer_distance(index, value, 1);
}
command_listener_profiles.on_subwoofer_2_distance_changed = function (index, value) {
	log("on_subwoofer_2_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_2_distance = value;
	speaker_page.update_UI_subwoofer_distance(index, value, 2);
}
command_listener_profiles.on_subwoofer_3_distance_changed = function (index, value) {
	log("on_subwoofer_3_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_3_distance = value;
	speaker_page.update_UI_subwoofer_distance(index, value, 3);
}
command_listener_profiles.on_subwoofer_4_distance_changed = function (index, value) {
	log("on_subwoofer_4_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_4_distance = value;
	speaker_page.update_UI_subwoofer_distance(index, value, 4);
}
command_listener_profiles.on_front_left_distance_changed = function (index, value) {
	log("on_front_left_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_left_distance = value;
	speaker_page.update_UI_front_left_distance(index, value);
}
command_listener_profiles.on_front_right_distance_changed = function (index, value) {
	log("on_front_right_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_right_distance = value;
	speaker_page.update_UI_front_right_distance(index, value);
}
command_listener_profiles.on_front_wide_left_distance_changed = function (index, value) {
	log("on_front_wide_left_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_wide_left_distance = value;
	speaker_page.update_UI_front_wide_left_distance(index, value);
}
command_listener_profiles.on_front_wide_right_distance_changed = function (index, value) {
	log("on_front_wide_right_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_wide_right_distance = value;
	speaker_page.update_UI_front_wide_right_distance(index, value);
}
command_listener_profiles.on_center_distance_changed = function (index, value) {
	log("on_center_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).center_distance = value;
	speaker_page.update_UI_center_distance(index, value);
}
command_listener_profiles.on_suround_left_distance_changed = function (index, value) {
	log("on_suround_left_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).surround_left_distance = value;
	speaker_page.update_UI_surrounds_left_distance(index, value);
}
command_listener_profiles.on_suround_right_distance_changed = function (index, value) {
	log("on_suround_right_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).surround_right_distance = value;
	speaker_page.update_UI_surrounds_right_distance(index, value);
}
command_listener_profiles.on_back_left_distance_changed = function (index, value) {
	log("on_back_left_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).back_left_distance = value;
	speaker_page.update_UI_backs_left_distance(index, value);
}
command_listener_profiles.on_back_right_distance_changed = function (index, value) {
	log("on_back_right_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).back_right_distance = value;
	speaker_page.update_UI_backs_right_distance(index, value);
}
command_listener_profiles.on_height_1_left_distance_changed = function (index, value) {
	log("on_height_1_left_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_1_left_distance = value;
	speaker_page.update_UI_heights_1_left_distance(index, value);
}
command_listener_profiles.on_height_1_right_distance_changed = function (index, value) {
	log("on_height_1_right_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_1_right_distance = value;
	speaker_page.update_UI_heights_1_right_distance(index, value);
}
command_listener_profiles.on_height_2_left_distance_changed = function (index, value) {
	log("on_height_2_left_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_2_left_distance = value;
	speaker_page.update_UI_heights_2_left_distance(index, value);
}
command_listener_profiles.on_height_2_right_distance_changed = function (index, value) {
	log("on_height_2_right_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_2_right_distance = value;
	speaker_page.update_UI_heights_2_right_distance(index, value);
}
command_listener_profiles.on_height_3_left_distance_changed = function (index, value) {
	log("on_height_3_left_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_3_left_distance = value;
	speaker_page.update_UI_heights_3_left_distance(index, value);
}
command_listener_profiles.on_height_3_right_distance_changed = function (index, value) {
	log("on_height_3_right_distance_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_3_right_distance = value;
	speaker_page.update_UI_heights_3_right_distance(index, value);
}

command_listener_profiles.on_calibration_level_changed = function (index, value) {
	log("on_calibration_level_changed " + index + ", " + value);
	speaker_page.get_profile(index).calibration_level = value;
	speaker_page.update_UI_calibration_level(index, value);
}
command_listener_profiles.on_test_noise_enable_changed = function (index, bvalue) {
	log("on_test_noise_enable_changed " + index + ", " + bvalue);
	speaker_page.update_UI_test_noise_enable(index, bvalue);
}
command_listener_profiles.on_subwoofer_level_changed = function (index, value) {
	log("on_subwoofer_level_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_level = value;
	speaker_page.update_UI_subwoofer_level(index, value, 1);
}
command_listener_profiles.on_subwoofer_2_level_changed = function (index, value) {
	log("on_subwoofer_2_level_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_2_level = value;
	speaker_page.update_UI_subwoofer_level(index, value, 2);
}
command_listener_profiles.on_subwoofer_3_level_changed = function (index, value) {
	log("on_subwoofer_3_level_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_3_level = value;
	speaker_page.update_UI_subwoofer_level(index, value, 3);
}
command_listener_profiles.on_subwoofer_4_level_changed = function (index, value) {
	log("on_subwoofer_4_level_changed " + index + ", " + value);
	speaker_page.get_profile(index).subwoofer_4_level = value;
	speaker_page.update_UI_subwoofer_level(index, value, 4);
}
command_listener_profiles.on_front_left_level_changed = function (index, value) {
	log("on_front_left_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_left_level = value;
	speaker_page.update_UI_front_left_level(index, value);
}
command_listener_profiles.on_front_right_level_changed = function (index, value) {
	log("on_front_right_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_right_level = value;
	speaker_page.update_UI_front_right_level(index, value);
}
command_listener_profiles.on_front_wide_left_level_changed = function (index, value) {
	log("on_front_wide_left_level_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_wide_left_level = value;
	speaker_page.update_UI_front_wide_left_level(index, value);
}
command_listener_profiles.on_front_wide_right_level_changed = function (index, value) {
	log("on_front_wide_right_level_changed " + index + ", " + value);
	speaker_page.get_profile(index).front_wide_right_level = value;
	speaker_page.update_UI_front_wide_right_level(index, value);
}
command_listener_profiles.on_center_level_changed = function (index, value) {
	log("on_center_changed " + index + ", " + value);
	speaker_page.get_profile(index).center_level = value;
	speaker_page.update_UI_center_level(index, value);
}
command_listener_profiles.on_surround_left_level_changed = function (index, value) {
	log("on_surround_left_changed " + index + ", " + value);
	speaker_page.get_profile(index).surround_left_level = value;
	speaker_page.update_UI_surrounds_left_level(index, value);
}
command_listener_profiles.on_surround_right_level_changed = function (index, value) {
	log("on_surround_right_changed " + index + ", " + value);
	speaker_page.get_profile(index).surround_right_level = value;
	speaker_page.update_UI_surrounds_right_level(index, value);
}
command_listener_profiles.on_back_left_level_changed = function (index, value) {
	log("on_back_left_changed " + index + ", " + value);
	speaker_page.get_profile(index).back_left_level = value;
	speaker_page.update_UI_backs_left_level(index, value);
}
command_listener_profiles.on_back_right_level_changed = function (index, value) {
	log("on_back_right_changed " + index + ", " + value);
	speaker_page.get_profile(index).back_right_level = value;
	speaker_page.update_UI_backs_right_level(index, value);
}
command_listener_profiles.on_height_1_left_level_changed = function (index, value) {
	log("on_height_1_left_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_1_left_level = value;
	speaker_page.update_UI_heights_1_left_level(index, value);
}
command_listener_profiles.on_height_1_right_level_changed = function (index, value) {
	log("on_height_1_right_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_1_right_level = value;
	speaker_page.update_UI_heights_1_right_level(index, value);
}
command_listener_profiles.on_height_2_left_level_changed = function (index, value) {
	log("on_height_2_left_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_2_left_level = value;
	speaker_page.update_UI_heights_2_left_level(index, value);
}
command_listener_profiles.on_height_2_right_level_changed = function (index, value) {
	log("on_height_2_right_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_2_right_level = value;
	speaker_page.update_UI_heights_2_right_level(index, value);
}
command_listener_profiles.on_height_3_left_level_changed = function (index, value) {
	log("on_height_3_left_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_3_left_level = value;
	speaker_page.update_UI_heights_3_left_level(index, value);
}
command_listener_profiles.on_height_3_right_level_changed = function (index, value) {
	log("on_height_3_right_changed " + index + ", " + value);
	speaker_page.get_profile(index).heights_3_right_level = value;
	speaker_page.update_UI_heights_3_right_level(index, value);
}

// INPUTS

var command_listener_inputs = {};

command_listener.on_arc_valid_received = function (value) {
	log("on_arc_valid_received " + value);
	inputs_page.update_UI_arc_valid(value);
}

command_listener_inputs.on_input_name_changed = function (index, name) {
	if (index <= inputs_page.active_inputs.length) {
		log("on_input_name_changed " + index + ", " + name);
		load_loader_progress("input " + index);
		main_zone_page.update_UI_input_name(index, name);
		general_page.update_main_input_option_name(index, name);
		if (device.use_zone2) {
			zone_2_page.update_UI_input_name(index, name);
		}
		network_page.update_UI_input_name(index, name);
		inputs_page.update_UI_input_name(index, name);
	}
}

command_listener_inputs.on_video_input_changed = function (index, value) {
	log("on_video_input_changed " + index + ", " + value);
	inputs_page.update_UI_video_input(index, value);
}
command_listener_inputs.on_audio_input_changed = function (index, value) {
	log("on_audio_input_changed " + index + ", " + value);
	inputs_page.update_UI_audio_input(index, value);
	main_zone_page.update_UI_audio_input(index, value);
	zone_2_page.update_UI_audio_input(index, value);
	// for menu
	update_UI_current_input();
}
command_listener_inputs.on_speaker_profile_changed = function (input_num, value) {
	log("on_speaker_profile_changed " + input_num + ", " + value);
	inputs_page.update_UI_speaker_profile(input_num, value);
	main_zone_page.update_speaker_profile(input_num, value);
}
command_listener_inputs.on_mode_preset_for_mono_source_changed = function (index, value) {
	log("on_mode_preset_for_mono_source_changed " + index + ", " + value);
	inputs_page.update_UI_mode_preset_for_mono_source(index, value);
}
command_listener_inputs.on_mode_preset_for_stereo_source_changed = function (index, value) {
	log("on_mode_preset_for_stereo_source_changed " + index + ", " + value);
	inputs_page.update_UI_mode_preset_for_stereo_source(index, value);
}
command_listener_inputs.on_mode_preset_for_mutli_channel_source_changed = function (index, value) {
	log("on_mode_preset_for_mutli_channel_source_changed " + index + ", " + value);
	inputs_page.update_UI_mode_preset_for_multi_ch_source(index, value);
}
command_listener_inputs.on_convert_analog_changed = function (index, value) {
	log("on_convert_analog_changed " + index + ", " + value);
	inputs_page.update_UI_convert_analog(index, value);
}
command_listener_inputs.on_arc_changed = function (index, value) {
	log("on_arc_changed " + index + ", " + value);
	inputs_page.update_UI_anthem_room_correction(index, value);
}
command_listener_inputs.on_dolby_audio_changed = function (index, value) {
	log("on_dolby_audio_changed " + index + ", " + value);
	inputs_page.update_UI_dolby_audio_proc(index, value);
}
command_listener_inputs.on_rumble_filter_changed = function (index, value) {
	log("on_rumble_filter_changed " + index + ", " + value);
	inputs_page.update_UI_rumble_filter(index, value);
}
command_listener_inputs.on_lip_sync_changed = function (index, value) {
	log("on_lip_sync_changed " + index + ", " + value);
	inputs_page.update_UI_lip_sync(index, value);
}
command_listener_inputs.on_input_trim_changed = function (index, value) {
	log("on_input_trim_changed " + index + ", " + value);
	inputs_page.update_UI_input_trim(index, value);
}

// ZONES

var command_listener_zone = {};

command_listener_zone.on_zone_power_changed = function (zone, value) {
	log("on_zone_power_changed " + zone + ", " + value);
	if (zone === 1) {
		main_zone_page.update_UI_power(value == 1);
		general_page.enable_controls(value == 1);
		speaker_page.enable_controls(value == 1);
		inputs_page.enable_controls(value == 1);
		network_page.enable_controls(value == 1);
		save_page.update_power(value == 1);
		admin_page.enable_controls(value == 1);
	}
	else if (zone === 2) {
		zone_2_page.update_UI_power(value == 1);
	}
	update_UI_power();  // for menu
	streaming_page.update_power(zone, value);
	streaming_plate.update_power(zone, value);
	player_page.update_power(zone, value);
}
command_listener_zone.on_zone_input_changed = function (zone, value) {
	log("on_zone_input_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_current_input(value);
	else if (zone === 2)
		zone_2_page.update_UI_current_input(value);
	inputs_page.update_UI_remove_inuse_panels();
	// for menu
	update_UI_current_input();
}
command_listener_zone.on_zone_db_volume_changed = function (zone, value) {
	if (VOLUME_SCALE_IN_DB) {
		log("on_zone_volume_db_changed " + zone + ", " + value);
		if (zone === 1)
			main_zone_page.update_UI_db_volume(value);
		else if (zone === 2)
			zone_2_page.update_UI_db_volume(value);
	}
}
command_listener_zone.on_zone_percent_volume_changed = function (zone, value) {
	if (!VOLUME_SCALE_IN_DB) {
		log("on_zone_percent_volume_changed " + zone + ", " + value);
		if (zone === 1)
			main_zone_page.update_UI_pc_volume(value);
		else if (zone === 2)
			zone_2_page.update_UI_pc_volume(value);
	}
}
command_listener_zone.on_zone_mute_changed = function (zone, value) {
	log("on_zone_mute_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_mute(value == 1);
	else if (zone === 2)
		zone_2_page.update_UI_mute(value == 1);
	streaming_page.update_mute_state(zone, value);
};
command_listener_zone.on_balance_changed = function (zone, value) {
	log("on_balance_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_balance(value)
};
command_listener_zone.on_bass_changed = function (zone, value) {
	log("on_bass_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_bass(value)
};
command_listener_zone.on_treble_changed = function (zone, value) {
	log("on_treble_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_treble(value);
};
command_listener_zone.on_front_level_changed = function (zone, value) {
	log("on_front_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_front(value);
};
command_listener_zone.on_front_wide_level_changed = function (zone, value) {
	log("on_front_wide_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_front_wide(value);
};
command_listener_zone.on_center_level_changed = function (zone, value) {
	log("on_center_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_center(value);
};
command_listener_zone.on_surrounds_level_changed = function (zone, value) {
	log("on_surrounds_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_surrounds(value);
}
command_listener_zone.on_backs_level_changed = function (zone, value) {
	log("on_backs_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_backs(value)
}
command_listener_zone.on_subwoofer_level_changed = function (zone, value) {
	log("on_subwoofer_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_subwoofer(value)
}
command_listener_zone.on_lfe_level_changed = function (zone, value) {
	log("on_lfe_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_lfe(value)
}
command_listener_zone.on_height_1_level_changed = function (zone, value) {
	log("on_height_1_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_height_1(value)
}
command_listener_zone.on_height_2_level_changed = function (zone, value) {
	log("on_height_2_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_height_2(value)
}
command_listener_zone.on_height_3_level_changed = function (zone, value) {
	log("on_height_3_level_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_height_3(value)
}
command_listener_zone.on_audio_mode_changed = function (zone, value) {
	log("on_audio_mode_changed " + zone + ", " + value);
	if (zone === 1)
		main_zone_page.update_UI_audio_processing(value)
}

// TRIGGERS

var command_listener_trigger = {};

command_listener_trigger.on_trigger_control_changed = function (trigger_number, value) {
	log("on_trigger_control_changed " + trigger_number + ", " + value);
	network_page.update_UI_trigger_control(trigger_number, value);
}
command_listener_trigger.on_trigger_power_changed = function (trigger_number, value) {
	log("on_trigger_power_changed " + trigger_number + ", " + value);
	network_page.update_UI_trigger_power(trigger_number, value);
}
command_listener_trigger.on_trigger_input_changed = function (trigger_number, input_index, value) {
	log("on_trigger_input_changed " + trigger_number + ", " + input_index + ", " + value);
	network_page.update_UI_input_list(trigger_number, input_index, value);
}

// FAULTS

var command_listener_faults = {};

command_listener_faults.on_fault_counter_count_changed = function (count) {
	log("on_fault_counter_count_changed " + count);
	admin_page.update_UI_fault_count(count);
}
command_listener_faults.on_fault_name_changed = function (id, name) {
	log("on_fault_name_changed " + id + ", " + name);
	admin_page.update_UI_fault_name(id, name);
}
command_listener_faults.on_fault_counter_changed = function (id, value) {
	log("on_fault_counter_changed " + id + ", " + value);
	admin_page.update_UI_fault_counter(id, value);
}
command_listener_faults.on_fault_reset_changed = function (id) {
	log("on_fault_reset_changed " + id);
	admin_page.update_UI_fault_counter(id, 0);
}

// AMP MATRIXING

var command_listener_amp_matrixing = {};

command_listener_amp_matrixing.on_amp_matrixing_front_changed = function (value) {
	log("on_amp_matrixing_front_changed " + value);
	speaker_page.update_UI_amp_matrixing_front(value);
}
command_listener_amp_matrixing.on_amp_matrixing_surround_changed = function (value) {
	log("on_amp_matrixing_surround_changed " + value);
	speaker_page.update_UI_amp_matrixing_surrounds(value);
	main_zone_page.update_UI_amp_matrixing_surrounds(value);
}
command_listener_amp_matrixing.on_amp_matrixing_back_changed = function (value) {
	log("on_amp_matrixing_back_changed " + value);
	speaker_page.update_UI_amp_matrixing_back(value);
}
command_listener_amp_matrixing.on_amp_matrixing_height_1_changed = function (value) {
	log("on_amp_matrixing_height_1_changed " + value);
	speaker_page.update_UI_amp_matrixing_height_1(value);
}
command_listener_amp_matrixing.on_amp_matrixing_height_2_changed = function (value) {
	log("on_amp_matrixing_height_2_changed " + value);
	speaker_page.update_UI_amp_matrixing_height_2(value);
}

var command_listener_heights = {};

command_listener_heights.on_height_changed = function (value) {
	log("on_height_changed " + value);
	speaker_page.update_UI_height(value);
	main_zone_page.update_UI_height(value);
}
command_listener_heights.on_height_1_changed = function (value) {
	log("on_height_1_changed " + value);
	var name = speaker_page.update_UI_height_1(value);
	main_zone_page.update_UI_height_1_text(name, value == 8);
}
command_listener_heights.on_height_2_changed = function (value) {
	log("on_height_2_changed " + value);
	var name = speaker_page.update_UI_height_2(value);
	main_zone_page.update_UI_height_2_text(name, value == 5);
}
command_listener_heights.on_height_3_changed = function (value) {
	log("on_height_3_changed " + value);
	var name = speaker_page.update_UI_height_3(value);
	main_zone_page.update_UI_height_3_text(name, value == 3);
}




var command_handler = {};


command_handler.trigger_fake_commands_for_demo_mode = function (model) {

	command_handler.handle_incoming_command("IDM" + model);
	command_handler.handle_incoming_command(COMMAND.Z1ARCVAL + "0");

	// inputs
	var phono_in = (model == MODEL.AVM70) || (model == MODEL.AVM90);
	var inputstr = phono_in ? "14" : "13";
	if (model == MODEL.MRXSLM) {
		inputstr = "6";
	}
	command_handler.handle_incoming_command(COMMAND.ICN + inputstr);
	if (model == MODEL.MRXSLM) {
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(1) + "HDMI");
	} else {
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(1) + "HDMI 1");
	}
	command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(1) + "1");
	command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(1) + "1");
	command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(1) + "0");
	if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(2) + "HDMI 2");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(2) + "2");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(2) + "1");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(2) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(3) + "HDMI 3");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(3) + "3");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(3) + "1");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(3) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(4) + "HDMI 4");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(4) + "4");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(4) + "1");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(4) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(5) + "HDMI 5");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(5) + "5");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(5) + "1");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(5) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(6) + "HDMI 6");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(6) + "6");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(6) + "1");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(6) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(7) + "HDMI 7");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(7) + "7");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(7) + "1");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(7) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(8) + "eARC");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(8) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(8) + "2");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(8) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(9) + "Streaming");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(9) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(9) + "13");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(9) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(10) + "Bluetooth");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(10) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(10) + "14");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(10) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(11) + "Optical 1");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(11) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(11) + "5");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(11) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(12) + "Coax 1");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(12) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(12) + "3");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(12) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(13) + "Analog 1");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(13) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(13) + "8");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(13) + "0");
		if (phono_in) {
			command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(14) + "Phono");
			command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(14) + "0");
			command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(14) + "12");
			command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(14) + "0");
		}
	} else if (model == MODEL.MRXSLM) {
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(2) + "TV (ARC/eARC)");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(2) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(2) + "2");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(2) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(3) + "Digital/Optical");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(3) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(3) + "3");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(3) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(4) + "Analog");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(4) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(4) + "4");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(4) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(5) + "Streaming");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(5) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(5) + "5");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(5) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_IN.stuffus(6) + "Bluetooth");
		command_handler.handle_incoming_command(COMMAND.IS_VID.stuffus(6) + "0");
		command_handler.handle_incoming_command(COMMAND.IS_AIJ.stuffus(6) + "6");
		command_handler.handle_incoming_command(COMMAND.IS_SP.stuffus(6) + "0");
	}

	// info
	command_handler.handle_incoming_command(COMMAND.GCDN + "DEMO MODE");
	command_handler.handle_incoming_command(COMMAND.GSN + "123456789");
	command_handler.handle_incoming_command(COMMAND.IDS + "0.0.0");
	command_handler.handle_incoming_command(COMMAND.DSPIDS + "0.0.0");
	command_handler.handle_incoming_command(COMMAND.LCDIDS + "0.0.0");
	command_handler.handle_incoming_command(COMMAND.IDB + "2019/07/18 08h49");
	command_handler.handle_incoming_command(COMMAND.IDH + "D");
	command_handler.handle_incoming_command(COMMAND.IDR + "US");
	command_handler.handle_incoming_command(COMMAND.NMSVER + "0.0.0");
	command_handler.handle_incoming_command(COMMAND.NMHVER + "2");
	command_handler.handle_incoming_command(COMMAND.RVER + "0.0.0");
	command_handler.handle_incoming_command(COMMAND.RBD + "2019/08/10 08h49");
	command_handler.handle_incoming_command(COMMAND.NMR + "CA");
	command_handler.handle_incoming_command(COMMAND.WMAC + "127.0.0.1");
	command_handler.handle_incoming_command(COMMAND.EMAC + "127.0.0.1");
	command_handler.handle_incoming_command(COMMAND.NMST + "emulated connection");

	// main zone
	command_handler.handle_incoming_command("GCMMV0.0");
	command_handler.handle_incoming_command("Z1POW1");
	command_handler.handle_incoming_command("Z1MUT0");
	command_handler.handle_incoming_command("Z1VOL-60.5");
	command_handler.handle_incoming_command("GCMPOV-34.5");
	command_handler.handle_incoming_command("GCMMV0.0");
	command_handler.handle_incoming_command("Z1INP1");
	command_handler.handle_incoming_command("GCMPOI0");
	command_handler.handle_incoming_command("Z1ALM0");

	command_handler.handle_incoming_command("Z1BAL3.5");
	command_handler.handle_incoming_command("Z1TON1-0.5");
	command_handler.handle_incoming_command("Z1TON00.5");
	command_handler.handle_incoming_command(COMMAND.Z_LEV1.stuffus(1) + "0.5");
	command_handler.handle_incoming_command(COMMAND.Z_LEV5.stuffus(1) + "-1.5");
	command_handler.handle_incoming_command(COMMAND.Z_LEV7.stuffus(1) + "-0.5");
	command_handler.handle_incoming_command(COMMAND.Z_LEV8.stuffus(1) + "-0.5");
	command_handler.handle_incoming_command(COMMAND.Z_LEVD.stuffus(1) + "0.0");
	if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command(COMMAND.Z_LEV9.stuffus(1) + "0.5");
		command_handler.handle_incoming_command(COMMAND.Z_LEVA.stuffus(1) + "1.5");
	}
	if ((model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command(COMMAND.Z_LEVB.stuffus(1) + "2.5");
	}
	if ((model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command(COMMAND.Z_LEV6.stuffus(1) + "-1.5");//11 70 90
		command_handler.handle_incoming_command(COMMAND.Z_LEVC.stuffus(1) + "3.5");//11 70 90
	}

	// zone 2
	if ((model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command(COMMAND.Z_POW.stuffus(2) + "0");
		command_handler.handle_incoming_command(COMMAND.Z_MUT.stuffus(2) + "0");
		command_handler.handle_incoming_command(COMMAND.Z_VOL.stuffus(2) + "-51.5");
		command_handler.handle_incoming_command(COMMAND.GCZ2POV + "-24.5");
		command_handler.handle_incoming_command(COMMAND.GCZ2MMV + "3.0");
		command_handler.handle_incoming_command(COMMAND.Z_INP.stuffus(2) + "4");
		command_handler.handle_incoming_command(COMMAND.GCZ2POI + "0");
		command_handler.handle_incoming_command(COMMAND.GCDSZ + "0");
	}

	// general
	command_handler.handle_incoming_command(COMMAND.GCL + language_map[current_language]);
	command_handler.handle_incoming_command("GCDU1");
	command_handler.handle_incoming_command("GCMVS0");
	command_handler.handle_incoming_command("GCSHDMIB0");
	command_handler.handle_incoming_command(COMMAND.GCAU + "1");
	command_handler.handle_incoming_command(COMMAND.GCBU + "0");
	command_handler.handle_incoming_command("GCCSTBY1");
	command_handler.handle_incoming_command("GCNSPO0");
	command_handler.handle_incoming_command("GCFPDI0");
	command_handler.handle_incoming_command("GCFPB55");
	command_handler.handle_incoming_command("GCWUB58");
	command_handler.handle_incoming_command(COMMAND.GCOSID + "1");
	command_handler.handle_incoming_command(COMMAND.GCOSIZ + "0");
	if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command(COMMAND.GCML + "0");
		command_handler.handle_incoming_command(COMMAND.GCMLOWS + "0");
		command_handler.handle_incoming_command(COMMAND.GCMDOWS + "0");
		command_handler.handle_incoming_command(COMMAND.GCHMMO + "0");
	}
	command_handler.handle_incoming_command("GCFCSI0");
	command_handler.handle_incoming_command(COMMAND.GCCECC + "0");
	command_handler.handle_incoming_command("GCCPFC0");
	command_handler.handle_incoming_command("GCCTVA0");

	// global
	var ht2en = ((model == MODEL.MRX740) || (model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) ? 1 : 0;
	var ht3en = ((model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) ? 1 : 0;
	if (model == MODEL.MRX540) {
		command_handler.handle_incoming_command(COMMAND.SS3DHL + "0");
	}
	if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command("SS3DH10");
	}
	if (ht2en) {
		command_handler.handle_incoming_command("SS3DH21");
	}
	if (ht3en) {
		command_handler.handle_incoming_command("SS3DH32");
	}

	// profile
	command_handler.handle_incoming_command("SSSP10Prof 1");
	command_handler.handle_incoming_command("SSSP20ProFile 2");
	command_handler.handle_incoming_command("SSSP30Test Profile 3");
	command_handler.handle_incoming_command("SSSP40Prof. 4");

	var index;
	for (index = 1; index <= 4; index++) {
		command_handler.handle_incoming_command(COMMAND.SSSP_1.stuffus(index) + "1");
		if ((model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.SSSP_6.stuffus(index) + "1");
		}
		command_handler.handle_incoming_command(COMMAND.SSSP_7.stuffus(index) + "1");
		command_handler.handle_incoming_command(COMMAND.SSSP_8.stuffus(index) + "1");
		if (model == MODEL.MRXSLM) {
			command_handler.handle_incoming_command(COMMAND.SSSP_A.stuffus(index) + "0");
		} else if (model == MODEL.MRX540) {
			command_handler.handle_incoming_command(COMMAND.SSSP_9.stuffus(index) + "0");
			command_handler.handle_incoming_command(COMMAND.SSSP_A.stuffus(index) + "1");
		} else if ((model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.SSSP_9.stuffus(index) + "1");
			command_handler.handle_incoming_command(COMMAND.SSSP_A.stuffus(index) + "1");
		}
		if ((model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.SSSP_B.stuffus(index) + ht2en);
		}
		if ((model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.SSSP_C.stuffus(index) + ht3en);
		}

		command_handler.handle_incoming_command(COMMAND.BMSP_0.stuffus(index) + "90");
		command_handler.handle_incoming_command(COMMAND.BMSP_10.stuffus(index) + "50");
		command_handler.handle_incoming_command(COMMAND.BMSP_11.stuffus(index) + "60");
		command_handler.handle_incoming_command(COMMAND.BMSP_12.stuffus(index) + "1");
		command_handler.handle_incoming_command(COMMAND.BMSP_5.stuffus(index) + "30");
		command_handler.handle_incoming_command(COMMAND.BMSP_7.stuffus(index) + "50");
		command_handler.handle_incoming_command(COMMAND.BMSP_8.stuffus(index) + "60");
		command_handler.handle_incoming_command(COMMAND.BMSP_A.stuffus(index) + "80");
		if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.BMSP_9.stuffus(index) + "40");
			command_handler.handle_incoming_command(COMMAND.BMSP_D.stuffus(index) + "0");
		}
		if ((model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.BMSP_B.stuffus(index) + "130");
		}
		if ((model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.BMSP_20.stuffus(index) + "60");
			command_handler.handle_incoming_command(COMMAND.BMSP_21.stuffus(index) + "65");
			command_handler.handle_incoming_command(COMMAND.BMSP_22.stuffus(index) + "0");
			command_handler.handle_incoming_command(COMMAND.BMSP_6.stuffus(index) + "100");
			command_handler.handle_incoming_command(COMMAND.BMSP_C.stuffus(index) + "200");
		}
		if (model == MODEL.AVM90) {
			command_handler.handle_incoming_command(COMMAND.BMSP_30.stuffus(index) + "70");
			command_handler.handle_incoming_command(COMMAND.BMSP_31.stuffus(index) + "70");
			command_handler.handle_incoming_command(COMMAND.BMSP_32.stuffus(index) + "1");
			command_handler.handle_incoming_command(COMMAND.BMSP_40.stuffus(index) + "80");
			command_handler.handle_incoming_command(COMMAND.BMSP_41.stuffus(index) + "75");
			command_handler.handle_incoming_command(COMMAND.BMSP_42.stuffus(index) + "0");
		}

		command_handler.handle_incoming_command(COMMAND.LPSP_1.stuffus(index) + "30");
		command_handler.handle_incoming_command(COMMAND.LPSP_5.stuffus(index) + "32");
		command_handler.handle_incoming_command(COMMAND.LPSP_6.stuffus(index) + "33");
		command_handler.handle_incoming_command(COMMAND.LPSP_9.stuffus(index) + "28");
		command_handler.handle_incoming_command(COMMAND.LPSP_A.stuffus(index) + "26");
		command_handler.handle_incoming_command(COMMAND.LPSP_B.stuffus(index) + "27");
		command_handler.handle_incoming_command(COMMAND.LPSP_E.stuffus(index) + "34");
		command_handler.handle_incoming_command(COMMAND.LPSP_F.stuffus(index) + "35");
		if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.LPSP_C.stuffus(index) + "24");
			command_handler.handle_incoming_command(COMMAND.LPSP_D.stuffus(index) + "25");
		}
		if ((model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.LPSP_G.stuffus(index) + "26");
			command_handler.handle_incoming_command(COMMAND.LPSP_H.stuffus(index) + "27");
		}
		if ((model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.LPSP_2.stuffus(index) + "31");
			command_handler.handle_incoming_command(COMMAND.LPSP_7.stuffus(index) + "36");
			command_handler.handle_incoming_command(COMMAND.LPSP_8.stuffus(index) + "37");
			command_handler.handle_incoming_command(COMMAND.LPSP_I.stuffus(index) + "38");
			command_handler.handle_incoming_command(COMMAND.LPSP_J.stuffus(index) + "39");
		}
		if (model == MODEL.AVM90) {
			command_handler.handle_incoming_command(COMMAND.LPSP_3.stuffus(index) + "42");
			command_handler.handle_incoming_command(COMMAND.LPSP_4.stuffus(index) + "43");
		}

		command_handler.handle_incoming_command(COMMAND.LCSP_0.stuffus(index) + "-5.5");
		command_handler.handle_incoming_command(COMMAND.LCSP_1.stuffus(index) + "5.5");
		command_handler.handle_incoming_command(COMMAND.LCSP_5.stuffus(index) + "6.0");
		command_handler.handle_incoming_command(COMMAND.LCSP_6.stuffus(index) + "5");
		command_handler.handle_incoming_command(COMMAND.LCSP_9.stuffus(index) + "5");
		command_handler.handle_incoming_command(COMMAND.LCSP_A.stuffus(index) + "5.5");
		command_handler.handle_incoming_command(COMMAND.LCSP_B.stuffus(index) + "6.0");
		command_handler.handle_incoming_command(COMMAND.LCSP_E.stuffus(index) + "6.0");
		command_handler.handle_incoming_command(COMMAND.LCSP_F.stuffus(index) + "5");
		if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.LCSP_C.stuffus(index) + "5");
			command_handler.handle_incoming_command(COMMAND.LCSP_D.stuffus(index) + "5.5");
		}
		if ((model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
			(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.LCSP_G.stuffus(index) + "5.5");
			command_handler.handle_incoming_command(COMMAND.LCSP_H.stuffus(index) + "6.0");
		}
		if ((model == MODEL.MRX1140) || (model == MODEL.AVM70) || (model == MODEL.AVM90)) {
			command_handler.handle_incoming_command(COMMAND.LCSP_2.stuffus(index) + "6.0");
			command_handler.handle_incoming_command(COMMAND.LCSP_7.stuffus(index) + "5.5");
			command_handler.handle_incoming_command(COMMAND.LCSP_8.stuffus(index) + "6.0");
			command_handler.handle_incoming_command(COMMAND.LCSP_I.stuffus(index) + "5");
			command_handler.handle_incoming_command(COMMAND.LCSP_J.stuffus(index) + "5.5");
		}
		if (model == MODEL.AVM90) {
			command_handler.handle_incoming_command(COMMAND.LCSP_3.stuffus(index) + "6.5");
			command_handler.handle_incoming_command(COMMAND.LCSP_4.stuffus(index) + "7.0");
		}
	}

	// network
	command_handler.handle_incoming_command("GCTCP14999");
	if (model == MODEL.MRXSLM) {
		command_handler.handle_incoming_command(COMMAND.GCIR + "1");
	}
	if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		command_handler.handle_incoming_command(COMMAND.GCTXS + "1");
		command_handler.handle_incoming_command(COMMAND.GCRIR + "1");
		command_handler.handle_incoming_command(COMMAND.GCFIR + "0");
		command_handler.handle_incoming_command("GCTD0");
		command_handler.handle_incoming_command(COMMAND.GCIPV_M.stuffus(1) + "0");
		command_handler.handle_incoming_command(COMMAND.GCIPV_I.stuffus(1) + "192.168.7.21");
		command_handler.handle_incoming_command(COMMAND.GCIPV_S.stuffus(1) + "255.255.255.0");
		command_handler.handle_incoming_command(COMMAND.GCIPV_G.stuffus(1) + "192.168.7.1");
		command_handler.handle_incoming_command(COMMAND.GCIPV_D.stuffus(1) + "192.168.7.1");
		command_handler.handle_incoming_command(COMMAND.GCIPV_M.stuffus(2) + "1");
		command_handler.handle_incoming_command(COMMAND.GCIPV_I.stuffus(2) + "192.168.8.22");
		command_handler.handle_incoming_command(COMMAND.GCIPV_S.stuffus(2) + "255.255.255.0");
		command_handler.handle_incoming_command(COMMAND.GCIPV_G.stuffus(2) + "192.168.8.1");
		command_handler.handle_incoming_command(COMMAND.GCIPV_D.stuffus(2) + "192.168.8.1");
		command_handler.handle_incoming_command(COMMAND.GCIPSTT + "connecting when.");
		command_handler.handle_incoming_command(COMMAND.GCIPSTM + "0");
		command_handler.handle_incoming_command(COMMAND.GCIPSTI + "192.168.7.21");
		command_handler.handle_incoming_command(COMMAND.GCIPSTS + "255.255.0.0");
		command_handler.handle_incoming_command(COMMAND.GCIPSTG + "192.168.7.1");
		command_handler.handle_incoming_command(COMMAND.GCIPSDN + "192.168.7.1");
	}

	if ((model == MODEL.MRX540) || (model == MODEL.MRX740) || (model == MODEL.MRX1140) ||
		(model == MODEL.AVM70) || (model == MODEL.AVM90)) {
		let initpower = (device.model === MODEL.MRX540) ? "1" : "3";
		command_handler.handle_incoming_command(COMMAND.GCT_C.stuffus(1) + "0");
		command_handler.handle_incoming_command(COMMAND.GCT_P.stuffus(1) + "0");
		command_handler.handle_incoming_command(COMMAND.GCT_C.stuffus(2) + "0");
		command_handler.handle_incoming_command(COMMAND.GCT_P.stuffus(2) + initpower);
		command_handler.handle_incoming_command(COMMAND.GCT_C.stuffus(3) + "1");
		command_handler.handle_incoming_command(COMMAND.GCT_P.stuffus(3) + "0");
		for (let trigcnt = 1; trigcnt <= 3; trigcnt++) {
			for (let inputnum = 1; inputnum <= 6; inputnum++) {
				command_handler.handle_incoming_command(COMMAND.GCT_I.stuffus(trigcnt) + inputnum + "0");
			}
		}
	}

	if (model == MODEL.MRXSLM) {
		command_handler.handle_incoming_command(COMMAND.SSAMS + "0");
	}
	if ((model == MODEL.MRX740) || (model == MODEL.MRX1140)) {
		command_handler.handle_incoming_command(COMMAND.SSAMF + "2");
		command_handler.handle_incoming_command(COMMAND.SSAMS + "2");
		command_handler.handle_incoming_command(COMMAND.SSAMB + "2");
	}
	if (model == MODEL.MRX1140) {
		command_handler.handle_incoming_command(COMMAND.SSAMH1 + "1");
		command_handler.handle_incoming_command(COMMAND.SSAMH2 + "3");
	}
}

command_handler.handle_incoming_command = function (command) {

	if (!command.startsWith("!")) {

		if (command.startsWith("Z")) {
			if (command.startsWith(COMMAND.Z1EPRG)) {
				var progress = parseInt(parseValue(COMMAND.Z1EPRG, command));
				command_listener.on_exclusive_control_progress(progress);
			} else
				handle_zone_commands(command);
		} else if (command.startsWith("SSSP") || command.startsWith("BMSP") || command.startsWith("LPSP") || command.startsWith("LCSP")) {
			handle_profile_commands(command);
		} else if (command.startsWith("IS")) {
			handle_input_commands(command);
		} else if (command.startsWith("FC")) {
			handle_fault_commands(command);
		} else if (command.startsWith("SSAM")) {
			handle_amp_matrixing_commands(command);
		} else if (command.startsWith("SS3DH")) {
			handle_height_commands(command);
		}

		// general
		else if (command.startsWith(COMMAND.GCDN)) {
			var device_name = parseValue(COMMAND.GCDN, command);
			command_listener.on_device_name_changed(device_name);
		} else if (command.startsWith(COMMAND.GCL)) {
			let value = parseValue(COMMAND.GCL, command);
			command_listener.on_language_changed(value);
		} else if (command.startsWith(COMMAND.GCDU)) {
			let value = parseInt(parseValue(COMMAND.GCDU, command));
			command_listener.on_distance_unit_changed(value);
		} else if (command.startsWith(COMMAND.GCMVS)) {
			let value = parseInt(parseValue(COMMAND.GCMVS, command));
			command_listener.on_master_volume_scale_changed(value);
		} else if (command.startsWith(COMMAND.GCSHDMIB)) {
			let value = parseValue(COMMAND.GCSHDMIB, command);
			command_listener.on_standby_hdmi_bypass_changed(value);
		} else if (command.startsWith(COMMAND.GCAU)) {
			let value = parseInt(parseValue(COMMAND.GCAU, command)) === 1;
			command_listener.on_automatic_updates_changed(value);
		} else if (command.startsWith(COMMAND.GCBU)) {
			let value = parseInt(parseValue(COMMAND.GCBU, command)) === 1;
			command_listener.on_beta_updates_changed(value);
		} else if (command.startsWith(COMMAND.GCCSTBY)) {
			let value = parseInt(parseValue(COMMAND.GCCSTBY, command)) === 1;
			command_listener.on_connected_standby_changed(value);
		} else if (command.startsWith(COMMAND.GCNSPO)) {
			let value = parseValue(COMMAND.GCNSPO, command);
			command_listener.on_no_signal_power_off_changed(value);
		} else if (command.startsWith(COMMAND.GCFPDI)) {
			let value = parseValue(COMMAND.GCFPDI, command);
			command_listener.on_front_panel_displayed_info_changed(value);
		} else if (command.startsWith(COMMAND.GCFPB)) {
			let value = parseInt(parseValue(COMMAND.GCFPB, command));
			command_listener.on_front_panel_brightness_changed(value);
		} else if (command.startsWith(COMMAND.GCWUB)) {
			let value = parseInt(parseValue(COMMAND.GCWUB, command));
			command_listener.on_wake_up_brightness_changed(value);
		} else if (command.startsWith(COMMAND.GCOSID)) {
			let value = parseInt(parseValue(COMMAND.GCOSID, command));
			command_listener.on_onscreen_info_display_changed(value);
		} else if (command.startsWith(COMMAND.GCOSIZ)) {
			let value = parseInt(parseValue(COMMAND.GCOSIZ, command));
			command_listener.on_onscreen_info_zone_changed(value);
		} else if (command.startsWith(COMMAND.GCMLOWS)) {
			let value = parseValue(COMMAND.GCMLOWS, command);
			command_listener.on_mute_line_out_when_selecting_changed(value);
		} else if (command.startsWith(COMMAND.GCMDOWS)) {
			let value = parseValue(COMMAND.GCMDOWS, command);
			command_listener.on_mute_digital_out_when_selecting_changed(value);
		} else if (command.startsWith(COMMAND.GCML)) {
			let value = parseInt(parseValue(COMMAND.GCML, command));
			command_listener.on_mute_level_changed(value);
		} else if (command.startsWith(COMMAND.GCHMMO)) {
			let value = parseInt(parseValue(COMMAND.GCHMMO, command)) === 1;
			command_listener.on_headphone_mutes_main_outputs_changed(value);
		} else if (command.startsWith(COMMAND.GCDSZ)) {
			let value = parseInt(parseValue(COMMAND.GCDSZ, command)) === 1;
			command_listener.on_default_streaming_zone_changed(value);
		} else if (command.startsWith(COMMAND.GCFCSI)) {
			let value = parseInt(parseValue(COMMAND.GCFCSI, command)) === 1;
			command_listener.on_favour_current_streaming_input_changed(value);
		} else if (command.startsWith(COMMAND.GCCECC)) {
			let value = parseInt(parseValue(COMMAND.GCCECC, command)) === 1;
			command_listener.on_cec_control_changed(value);
		} else if (command.startsWith(COMMAND.GCCPFC)) {
			let value = parseInt(parseValue(COMMAND.GCCPFC, command)) === 1;
			command_listener.on_cec_power_off_control_changed(value);
		} else if (command.startsWith(COMMAND.GCCTVA)) {
			let value = parseInt(parseValue(COMMAND.GCCTVA, command)) === 1;
			command_listener.on_hdmi_audio_to_tv_changed(value);
		}

		// global zone
		else if (command.startsWith(COMMAND.GCMPOV)) {
			let value = parseFloat(parseValue(COMMAND.GCMPOV, command));
			command_listener.on_power_on_volume_changed(value);
		} else if (command.startsWith(COMMAND.GCZ2POV)) {
			let value = parseFloat(parseValue(COMMAND.GCZ2POV, command));
			command_listener.on_zone_2_power_on_volume_changed(value);
		} else if (command.startsWith(COMMAND.GCMMV)) {
			let value = parseFloat(parseValue(COMMAND.GCMMV, command));
			command_listener.on_main_max_volume_volume_changed(value);
		} else if (command.startsWith(COMMAND.GCZ2MMV)) {
			let value = parseFloat(parseValue(COMMAND.GCZ2MMV, command));
			command_listener.on_zone_2_max_volume_volume_changed(value);
		} else if (command.startsWith(COMMAND.GCMPOI)) {
			let value = parseInt(parseValue(COMMAND.GCMPOI, command));
			command_listener.on_main_power_on_input_changed(value);
		} else if (command.startsWith(COMMAND.GCZ2POI)) {
			let value = parseInt(parseValue(COMMAND.GCZ2POI, command));
			command_listener.on_zone_2_power_on_input_changed(value);
		}

		// network
		else if (command.startsWith(COMMAND.GCTCP)) {
			let value = parseValue(COMMAND.GCTCP, command);
			command_listener.on_tcp_port_changed(value);
		} else if (command.startsWith(COMMAND.GCTXS)) {
			let value = parseValue(COMMAND.GCTXS, command);
			command_listener.on_tx_status_changed(value);
		} else if (command.startsWith(COMMAND.GCIR)) {
			let value = parseInt(parseValue(COMMAND.GCIR, command));
			command_listener.on_ir_changed(value);
		} else if (command.startsWith(COMMAND.GCRIR)) {
			let value = parseInt(parseValue(COMMAND.GCRIR, command)) === 1;
			command_listener.on_rear_ir_changed(value);
		} else if (command.startsWith(COMMAND.GCFIR)) {
			let value = parseInt(parseValue(COMMAND.GCFIR, command)) === 1;
			command_listener.on_front_ir_changed(value);
		} else if (command.startsWith(COMMAND.GCTD)) {
			let value = parseInt(parseValue(COMMAND.GCTD, command));
			command_listener.on_trigger_delay_changed(value);
		} else if (command.startsWith(COMMAND.NMWPS)) {
			command_listener.on_request_wps_pushbutton();
		} else if (command.startsWith(COMMAND.RWIFIS)) {
			command_listener.on_request_reset_wireless();
		}

		// IP commands
		else if (command.startsWith("GCIP")) {
			handle_ip_commands(command);
		}

		// trigger
		else if (command.startsWith("GCT")) {
			handle_trigger_commands(command);
		}

		// inputs
		else if (command.startsWith(COMMAND.IIAI)) {
			let input_index = parseInt(parseValue(COMMAND.IIAI, command));
			command_listener.on_input_added(input_index);
		} else if (command.startsWith(COMMAND.IDAI)) {
			let input_index = parseInt(parseValue(COMMAND.IDAI, command));
			command_listener.on_input_removed(input_index);
		} else if (command.startsWith(COMMAND.ICN)) {
			var last_input = parseInt(parseValue(COMMAND.ICN, command));
			command_listener.on_input_count(last_input);
		}

		// other
		else if (command.startsWith(COMMAND.IDM)) {
			var device_model = parseValue(COMMAND.IDM, command);
			command_listener.on_device_model_changed(device_model);
		} else if (command.startsWith(COMMAND.GSN)) {
			var serial = parseValue(COMMAND.GSN, command);
			command_listener.on_serial_number_changed(serial);
		} else if (command.startsWith(COMMAND.IDS)) {
			var version = parseValue(COMMAND.IDS, command);
			command_listener.on_version_changed(version);
		} else if (command.startsWith(COMMAND.CTRL2)) {
			let value = parseValue(COMMAND.CTRL2, command);
			command_listener.on_firmware_control_changed(value);
		} else if (command.startsWith(COMMAND.PRGS0)) {
			let value = parseValue(COMMAND.PRGS0, command);
			command_listener.on_firmware_prgs_changed(value);
		} else if (command.startsWith(COMMAND.BSC1)) {
			location.reload();
		}

		// info
		else if (command.startsWith(COMMAND.DSPIDS)) {
			let value = parseValue(COMMAND.DSPIDS, command);
			command_listener.on_dsp_version_changed(value);
		} else if (command.startsWith(COMMAND.LCDIDS)) {
			let value = parseValue(COMMAND.LCDIDS, command);
			command_listener.on_lcdc_version_changed(value);
		} else if (command.startsWith(COMMAND.IDB)) {
			let value = parseValue(COMMAND.IDB, command);
			command_listener.on_software_build_date_changed(value);
		} else if (command.startsWith(COMMAND.IDH)) {
			let value = parseValue(COMMAND.IDH, command);
			command_listener.on_hardware_version_changed(value);
		} else if (command.startsWith(COMMAND.IDR)) {
			let value = parseValue(COMMAND.IDR, command);
			command_listener.on_region_changed(value);
		} else if (command.startsWith(COMMAND.NMSVER)) {
			let value = parseValue(COMMAND.NMSVER, command);
			command_listener.on_module_version_changed(value);
		} else if (command.startsWith(COMMAND.NMHVER)) {
			let value = parseValue(COMMAND.NMHVER, command);
			command_listener.on_module_harware_version_changed(value);
		} else if (command.startsWith(COMMAND.RVER)) {
			let value = parseValue(COMMAND.RVER, command);
		} else if (command.startsWith(COMMAND.RBD)) {
			let value = parseValue(COMMAND.RBD, command);
		} else if (command.startsWith(COMMAND.NMR)) {
			let value = parseValue(COMMAND.NMR, command);
		} else if (command.startsWith(COMMAND.WMAC)) {
			let value = parseValue(COMMAND.WMAC, command);
			command_listener.on_wifi_mac_address_changed(value);
		} else if (command.startsWith(COMMAND.EMAC)) {
			let value = parseValue(COMMAND.EMAC, command);
			command_listener.on_ethernet_address_changed(value);
		} else if (command.startsWith(COMMAND.NMST)) {
			let value = parseValue(COMMAND.NMST, command);
			command_listener.on_network_status_changed(value);
		}

		// Export or Import commands?
		else if (handle_export_commands(command)) {
			// No action; called from within
		}

		else if (command.startsWith(COMMAND.IDQ)) {
			// ignore IDQ command triggered every 30s for socket keep alive
		} else {
			if (command.length === 0)
				logE("warning command is empty string");
			else
				logE("warning command not handled: " + command);
		}

		if (!command.startsWith(COMMAND.IDQ)) {
			// IDQ command triggered every 30s for socket keep alive
			notification_changes_complete(TR("Changes successfully updated"));
		}
	} else if (command.startsWith("!I__TURN_LOADER_OFF")) {
		on_all_query_commands_sent();
	} else if (command.indexOf("TURN_LOADER_OFF") >= 0) {
		on_all_query_commands_sent();
	} else if (command.indexOf(COMMAND.LOAD_STEP) >= 0) {
		on_loader_progress_received(command);
	} else if (command.indexOf(COMMAND.STORED_I) >= 0) {
		command_listener.on_store_progress_received(command);
	} else if (command.indexOf(COMMAND.STORED_U) >= 0) {
		command_listener.on_store_progress_received(command);

	} else if (command.startsWith("!Iblock")) {
		var block = command.replace("!I", "");
		firmware.handle_firmware_blocks(block);
	} else {
		var error_msg = TR("command handler error: %1", [command]);
		logE(error_msg);
		notification_error(error_msg);
	}

	function parseValue(key, full_command) {
		return full_command.substring(key.length);
	}

	function handle_zone_commands(command) {

		var zone = parseInt(command.substring(1, 2));

		if (compare_command(COMMAND.Z_POW, command)) {
			let value = parseInt(parseValue(COMMAND.Z_POW, command));
			command_listener_zone.on_zone_power_changed(zone, value);
		} else if (compare_command(COMMAND.Z_INP, command)) {
			let value = parseInt(parseValue(COMMAND.Z_INP, command));
			command_listener_zone.on_zone_input_changed(zone, value);
		} else if (compare_command(COMMAND.Z_VOL, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_VOL, command));
			command_listener_zone.on_zone_db_volume_changed(zone, value);
		} else if (compare_command(COMMAND.Z_PVOL, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_PVOL, command));
			command_listener_zone.on_zone_percent_volume_changed(zone, value);
		} else if (compare_command(COMMAND.Z_MUT, command)) {
			let value = parseInt(parseValue(COMMAND.Z_MUT, command)) === 1;
			command_listener_zone.on_zone_mute_changed(zone, value);
		} else if (compare_command(COMMAND.Z_BAL, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_BAL, command));
			command_listener_zone.on_balance_changed(zone, value);
		} else if (compare_command(COMMAND.Z_TON0, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_TON0, command));
			command_listener_zone.on_bass_changed(zone, value);
		} else if (compare_command(COMMAND.Z_TON1, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_TON1, command));
			command_listener_zone.on_treble_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEV5, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEV5, command));
			command_listener_zone.on_front_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEV6, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEV6, command));
			command_listener_zone.on_front_wide_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEV7, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEV7, command));
			command_listener_zone.on_center_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEV8, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEV8, command));
			command_listener_zone.on_surrounds_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEV9, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEV9, command));
			command_listener_zone.on_backs_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEV1, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEV1, command));
			command_listener_zone.on_subwoofer_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEVD, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEVD, command));
			command_listener_zone.on_lfe_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEVA, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEVA, command));
			command_listener_zone.on_height_1_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEVB, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEVB, command));
			command_listener_zone.on_height_2_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_LEVC, command)) {
			let value = parseFloat(parseValue(COMMAND.Z_LEVC, command));
			command_listener_zone.on_height_3_level_changed(zone, value);
		} else if (compare_command(COMMAND.Z_ALM, command)) {
			let value = parseInt(parseValue(COMMAND.Z_ALM, command));
			command_listener_zone.on_audio_mode_changed(zone, value);
		} else if (compare_command(COMMAND.Z1VIR, command)) {
			let value = parseInt(parseValue(COMMAND.Z1VIR, command));
			command_listener.on_active_video_input_changed(value);
		} else if (compare_command(COMMAND.Z1IRH, command)) {
			let value = parseInt(parseValue(COMMAND.Z1IRH, command));
			command_listener.on_active_horizontal_video_resolution_changed(value);
		} else if (compare_command(COMMAND.Z1IRV, command)) {
			let value = parseInt(parseValue(COMMAND.Z1IRV, command));
			command_listener.on_active_vertical_video_resolution_changed(value);
		} else if (compare_command(COMMAND.Z1AIC, command)) {
			let value = parseInt(parseValue(COMMAND.Z1AIC, command));
			command_listener.on_audio_input_channels_changed(value);
		} else if (compare_command(COMMAND.Z1AIF, command)) {
			let value = parseInt(parseValue(COMMAND.Z1AIF, command));
			command_listener.on_audio_input_format_changed(value);
		} else if (compare_command(COMMAND.Z1BRT, command)) {
			let value = parseInt(parseValue(COMMAND.Z1BRT, command));
			command_listener.on_audio_input_bit_rate_changed(value);
		} else if (compare_command(COMMAND.Z1SRT, command)) {
			let value = parseInt(parseValue(COMMAND.Z1SRT, command));
			command_listener.on_audio_input_sampling_rate_changed(value);
		} else if (compare_command(COMMAND.Z1BDP, command)) {
			let value = parseInt(parseValue(COMMAND.Z1BDP, command));
			command_listener.on_audio_input_bit_depth_changed(value);
		} else if (compare_command(COMMAND.Z1AIN, command)) {
			let value = parseValue(COMMAND.Z1AIN, command);
			command_listener.on_audio_input_name_changed(value);
		} else if (compare_command(COMMAND.Z1AIR, command)) {
			let value = parseValue(COMMAND.Z1AIR, command);
			command_listener.on_audio_input_rate_name_changed(value);
		} else if (compare_command(COMMAND.Z1ARCVAL, command)) {
			let value = parseValue(COMMAND.Z1ARCVAL, command);
			command_listener.on_arc_valid_received(value);
		} else if (compare_command(COMMAND.Z1ARCUPL, command)) {
			let value = parseValue(COMMAND.Z1ARCUPL, command);
			command_listener.on_arc_upload_date_received(value);
		} else if (compare_command(COMMAND.Z1ARCNAM, command)) {
			let value = parseValue(COMMAND.Z1ARCNAM, command);
			command_listener.on_arc_name_received(value);
		} else if (compare_command(COMMAND.Z1SMD, command)) {
			log("Ignore Z1SMDe");
		} else if (compare_command(COMMAND.Z1SHC, command)) {
			let bvalue = parseInt(parseValue(COMMAND.Z1SHC, command)) == 1;
			command_listener.on_custom_messages(bvalue);
		}
		else {
			logE("warning zone command not handled: " + command);
		}


		function compare_command(key, full_command) {
			return key.substring(2) === full_command.substring(2, 2 + key.length - 2);
		}
	}

	function handle_profile_commands(command) {

		var profile = parseInt(command.substring(4, 5));

		if (compare_command(COMMAND.SSSP_0, command)) {
			let value = parseValue(COMMAND.SSSP_0, command);
			command_listener_profiles.on_profile_name_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_1, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_1, command));
			command_listener_profiles.on_subwoofers_enabled_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_6, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_6, command)) === 1;
			command_listener_profiles.on_front_wide_enabled_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_7, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_7, command)) === 1;
			command_listener_profiles.on_center_enabled_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_8, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_8, command)) === 1;
			command_listener_profiles.on_surrounds_enabled_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_9, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_9, command)) === 1;
			command_listener_profiles.on_backs_enabled_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_A, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_A, command)) === 1;
			command_listener_profiles.on_heights_1_enabled_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_B, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_B, command)) === 1;
			command_listener_profiles.on_heights_2_enabled_changed(profile, value);
		} else if (compare_command(COMMAND.SSSP_C, command)) {
			let value = parseInt(parseValue(COMMAND.SSSP_C, command)) === 1;
			command_listener_profiles.on_heights_3_enabled_changed(profile, value);
		}

		else if (compare_command(COMMAND.BMSP_0, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_0, command));
			command_listener_profiles.on_subwoofer_lfe_lowpass_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_5, command)) {
			let value = parseValue(COMMAND.BMSP_5, command);
			command_listener_profiles.on_subwoofer_front_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_6, command)) {
			let value = parseValue(COMMAND.BMSP_6, command);
			command_listener_profiles.on_subwoofer_front_wide_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_7, command)) {
			let value = parseValue(COMMAND.BMSP_7, command);
			command_listener_profiles.on_subwoofer_center_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_8, command)) {
			let value = parseValue(COMMAND.BMSP_8, command);
			command_listener_profiles.on_subwoofer_surround_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_9, command)) {
			let value = parseValue(COMMAND.BMSP_9, command);
			command_listener_profiles.on_subwoofer_back_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_10, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_10, command));
			command_listener_profiles.on_subwoofer_phase_frequency_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_11, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_11, command));
			command_listener_profiles.on_subwoofer_phase_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_12, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_12, command));
			command_listener_profiles.on_subwoofer_polarity_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_20, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_20, command));
			command_listener_profiles.on_subwoofer_2_phase_frequency_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_21, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_21, command));
			command_listener_profiles.on_subwoofer_2_phase_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_22, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_22, command));
			command_listener_profiles.on_subwoofer_2_polarity_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_30, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_30, command));
			command_listener_profiles.on_subwoofer_3_phase_frequency_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_31, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_31, command));
			command_listener_profiles.on_subwoofer_3_phase_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_32, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_32, command));
			command_listener_profiles.on_subwoofer_3_polarity_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_40, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_40, command));
			command_listener_profiles.on_subwoofer_4_phase_frequency_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_41, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_41, command));
			command_listener_profiles.on_subwoofer_4_phase_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_42, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_42, command));
			command_listener_profiles.on_subwoofer_4_polarity_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_A, command)) {
			let value = parseValue(COMMAND.BMSP_A, command);
			command_listener_profiles.on_subwoofer_height_1_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_B, command)) {
			let value = parseValue(COMMAND.BMSP_B, command);
			command_listener_profiles.on_subwoofer_height_2_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_C, command)) {
			let value = parseValue(COMMAND.BMSP_C, command);
			command_listener_profiles.on_subwoofer_height_3_crossover_changed(profile, value);
		} else if (compare_command(COMMAND.BMSP_D, command)) {
			let value = parseInt(parseValue(COMMAND.BMSP_D, command));
			command_listener_profiles.on_super_sub_fronts_changed(profile, value);
		}

		else if (compare_command(COMMAND.LPSP_1, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_1, command));
			command_listener_profiles.on_subwoofer_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_2, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_2, command));
			command_listener_profiles.on_subwoofer_2_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_3, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_3, command));
			command_listener_profiles.on_subwoofer_3_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_4, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_4, command));
			command_listener_profiles.on_subwoofer_4_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_5, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_5, command));
			command_listener_profiles.on_front_left_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_6, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_6, command));
			command_listener_profiles.on_front_right_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_7, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_7, command));
			command_listener_profiles.on_front_wide_left_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_8, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_8, command));
			command_listener_profiles.on_front_wide_right_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_9, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_9, command));
			command_listener_profiles.on_center_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_A, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_A, command));
			command_listener_profiles.on_suround_left_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_B, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_B, command));
			command_listener_profiles.on_suround_right_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_C, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_C, command));
			command_listener_profiles.on_back_left_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_D, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_D, command));
			command_listener_profiles.on_back_right_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_E, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_E, command));
			command_listener_profiles.on_height_1_left_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_F, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_F, command));
			command_listener_profiles.on_height_1_right_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_G, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_G, command));
			command_listener_profiles.on_height_2_left_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_H, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_H, command));
			command_listener_profiles.on_height_2_right_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_I, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_I, command));
			command_listener_profiles.on_height_3_left_distance_changed(profile, value);
		} else if (compare_command(COMMAND.LPSP_J, command)) {
			let value = parseInt(parseValue(COMMAND.LPSP_J, command));
			command_listener_profiles.on_height_3_right_distance_changed(profile, value);
		}

		else if (compare_command(COMMAND.LCSP_0, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_0, command));
			command_listener_profiles.on_calibration_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_1, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_1, command));
			command_listener_profiles.on_subwoofer_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_2, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_2, command));
			command_listener_profiles.on_subwoofer_2_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_3, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_3, command));
			command_listener_profiles.on_subwoofer_3_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_4, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_4, command));
			command_listener_profiles.on_subwoofer_4_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_5, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_5, command));
			command_listener_profiles.on_front_left_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_6, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_6, command));
			command_listener_profiles.on_front_right_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_7, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_7, command));
			command_listener_profiles.on_front_wide_left_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_8, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_8, command));
			command_listener_profiles.on_front_wide_right_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_9, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_9, command));
			command_listener_profiles.on_center_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_A, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_A, command));
			command_listener_profiles.on_surround_left_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_B, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_B, command));
			command_listener_profiles.on_surround_right_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_C, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_C, command));
			command_listener_profiles.on_back_left_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_D, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_D, command));
			command_listener_profiles.on_back_right_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_E, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_E, command));
			command_listener_profiles.on_height_1_left_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_F, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_F, command));
			command_listener_profiles.on_height_1_right_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_G, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_G, command));
			command_listener_profiles.on_height_2_left_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_H, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_H, command));
			command_listener_profiles.on_height_2_right_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_I, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_I, command));
			command_listener_profiles.on_height_3_left_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_J, command)) {
			let value = parseFloat(parseValue(COMMAND.LCSP_J, command));
			command_listener_profiles.on_height_3_right_level_changed(profile, value);
		} else if (compare_command(COMMAND.LCSP_K, command)) {
			let value = parseInt(parseValue(COMMAND.LCSP_K, command)) === 1;
			command_listener_profiles.on_test_noise_enable_changed(profile, value);
		}

		else {
			logE("warning profile command not handled: " + command);
		}

		function compare_command(key, full_command) {
			if (key.substring(0, 4) === "BMSP" && (key.substring(5, 6) === "1" || key.substring(5, 6) === "2" || key.substring(5, 6) === "3" || key.substring(5, 6) === "4"))
				return key.substring(0, 4) === full_command.substring(0, 4) && key.substring(5, 7) === full_command.substring(5, 7);
			else
				return key.substring(0, 4) === full_command.substring(0, 4) && key.substring(5, 6) === full_command.substring(5, 6);
		}
	}

	function handle_input_commands(command) {

		var input_index = get_input_index(command);

		if (compare_command(COMMAND.IS_IN, command, input_index)) {
			let value = parseValue(COMMAND.IS_IN, command, input_index);
			command_listener_inputs.on_input_name_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_VID, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_VID, command, input_index));
			command_listener_inputs.on_video_input_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_AIJ, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_AIJ, command, input_index));
			command_listener_inputs.on_audio_input_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_SP, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_SP, command, input_index));
			command_listener_inputs.on_speaker_profile_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_PM, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_PM, command, input_index));
			command_listener_inputs.on_mode_preset_for_mono_source_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_PS, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_PS, command, input_index));
			command_listener_inputs.on_mode_preset_for_stereo_source_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_PC, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_PC, command, input_index));
			command_listener_inputs.on_mode_preset_for_mutli_channel_source_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_CA, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_CA, command, input_index));
			command_listener_inputs.on_convert_analog_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_ARC, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_ARC, command, input_index));
			command_listener_inputs.on_arc_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_DV, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_DV, command, input_index));
			command_listener_inputs.on_dolby_audio_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_RF, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_RF, command, input_index));
			command_listener_inputs.on_rumble_filter_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_LS, command, input_index)) {
			let value = parseInt(parseValue(COMMAND.IS_LS, command, input_index));
			command_listener_inputs.on_lip_sync_changed(input_index, value);
		} else if (compare_command(COMMAND.IS_IT, command, input_index)) {
			let value = parseFloat(parseValue(COMMAND.IS_IT, command, input_index));
			command_listener_inputs.on_input_trim_changed(input_index, value);
		} else {
			logE("warning input command not handled: " + command);
		}

		function get_input_index(command) {
			var input_index_first_digit = command.substring(2, 3);
			var input_index_second_digit = command.substring(3, 4);
			if (input_index_second_digit.is_number())
				return parseInt(input_index_first_digit + input_index_second_digit);
			else
				return parseInt(input_index_first_digit);
		}

		function parseValue(key, full_command, input_index) {
			if (inputs_page.is_valid_input_index(input_index)) {
				return full_command.substring(input_index > 9 ? key.length + 1 : key.length);
			} else {
				logE("warning parseValue invalid index: " + full_command);
			}
		}

		function compare_command(key, full_command, input_index) {
			if (inputs_page.is_valid_input_index(input_index)) {
				var command_type = full_command.substring(2 + (input_index > 9 ? 2 : 1));
				return key.substring(0, 2) === full_command.substring(0, 2) && command_type.startsWith(key.substring(3));
			} else {
				logE("input compare_command key not handled");
				return false;
			}
		}
	}

	function handle_ip_commands(command) {
		// Check IP Status
		if (command.startsWith(COMMAND.GCIPSTT)) {
			let value = parseValue(COMMAND.GCIPSTT, command);
			command_listener.on_ip_status_changed(value);
		}
		else if (command.startsWith(COMMAND.GCIPSTM)) {
			let value = parseInt(parseValue(COMMAND.GCIPSTM, command));
			command_listener.on_ip_mode_changed(value);
		}
		else if (command.startsWith(COMMAND.GCIPSTI)) {
			let value = parseValue(COMMAND.GCIPSTI, command);
			command_listener.on_ip_address_changed(value);
		}
		else if (command.startsWith(COMMAND.GCIPSTS)) {
			let value = parseValue(COMMAND.GCIPSTS, command);
			command_listener.on_subnet_changed(value);
		}
		else if (command.startsWith(COMMAND.GCIPSTG)) {
			let value = parseValue(COMMAND.GCIPSTG, command);
			command_listener.on_gateway_changed(value);
		}
		else if (command.startsWith(COMMAND.GCIPSDN)) {
			let value = parseValue(COMMAND.GCIPSDN, command);
			command_listener.on_dns_changed(value);
		} else if (command.startsWith("GCIPV")) {
			/*
			// Test strings
			var vbad = "nounderscore".stuffus("bad");
			var v0 = "_zero".stuffus("A");
			var v1 = "a_gain".stuffus("B");
			var v2 = "go_figure".stuffus("CC");
			var v3 = "not_enuf".stuffus("D");
			var v4 = "four_score".stuffus(1);
			var v5 = "fiver_liver".stuffus(2);
			var v6 = "sixtee_pence".stuffus(3);
			var v7 = "seventy_".stuffus(4);
			*/
			// Check IP Configuration
			var ip_number = parseInt(command.substring(5, 6));
			if (compare_ip_command(COMMAND.GCIPV_A, command)) {
				let value = parseInt(parseValue(COMMAND.GCIPV_A, command));
				log("responded with " + command);
			} else if (compare_ip_command(COMMAND.GCIPV_M, command)) {
				let value = parseInt(parseValue(COMMAND.GCIPV_M, command));
				if (ip_number === 1) {
					command_listener.on_eth_ip_mode_changed(value);
				} else if (ip_number === 2) {
					command_listener.on_wifi_ip_mode_changed(value);
				}
			} else if (compare_ip_command(COMMAND.GCIPV_I, command)) {
				let value = parseValue(COMMAND.GCIPV_I, command);
				if (ip_number === 1) {
					command_listener.on_eth_ip_address_changed(value);
				} else if (ip_number === 2) {
					command_listener.on_wifi_ip_address_changed(value);
				}
			} else if (compare_ip_command(COMMAND.GCIPV_S, command)) {
				let value = parseValue(COMMAND.GCIPV_S, command);
				if (ip_number === 1) {
					command_listener.on_eth_subnet_changed(value);
				} else if (ip_number === 2) {
					command_listener.on_wifi_subnet_changed(value);
				}
			} else if (compare_ip_command(COMMAND.GCIPV_G, command)) {
				let value = parseValue(COMMAND.GCIPV_G, command);
				if (ip_number === 1) {
					command_listener.on_eth_gateway_changed(value);
				} else if (ip_number === 2) {
					command_listener.on_wifi_gateway_changed(value);
				}
			} else if (compare_ip_command(COMMAND.GCIPV_D, command)) {
				let value = parseValue(COMMAND.GCIPV_D, command);
				if (ip_number === 1) {
					command_listener.on_eth_dns_changed(value);
				} else if (ip_number === 2) {
					command_listener.on_wifi_dns_changed(value);
				}
			} else {
				logE("warning ip configuration command not handled: " + command);
			}
		} else {
			logE("warning ip status command not handled: " + command);
		}

		function compare_ip_command(key, full_command) {
			return key.substring(0, 5) === full_command.substring(0, 5) && key.substring(6, 7) === full_command.substring(6, 7);
		}
	}

	function handle_trigger_commands(command) {
		var trigger_number = parseInt(command.substring(3, 4));

		if (compare_command(COMMAND.GCT_C, command)) {
			let value = parseInt(parseValue(COMMAND.GCT_C, command));
			command_listener_trigger.on_trigger_control_changed(trigger_number, value);
		} else if (compare_command(COMMAND.GCT_P, command)) {
			let value = parseInt(parseValue(COMMAND.GCT_P, command));
			command_listener_trigger.on_trigger_power_changed(trigger_number, value);
		} else if (compare_command(COMMAND.GCT_I, command)) {
			var values = parseValue(COMMAND.GCT_I, command);
			let value;
			var input_index;
			if (values.length === 3) {
				value = values.substring(2);
				input_index = values.substring(0, 2);
			} else {
				value = values.substring(1);
				input_index = values.substring(0, 1);
			}
			command_listener_trigger.on_trigger_input_changed(trigger_number, input_index, value);
		} else {
			logE("warning trigger command not handled: " + command);
		}

		function compare_command(key, full_command) {
			return key.substring(0, 3) === full_command.substring(0, 3) && key.substring(4, 5) === full_command.substring(4, 5);
		}
	}

	function handle_fault_commands(command) {

		if (compare_command(COMMAND.FCC, command)) {
			let hexString = parseValue(COMMAND.FCC, command);
			command_listener_faults.on_fault_counter_count_changed(parseInt(hexString, 16));
		} else if (compare_command(COMMAND.FCN, command)) {
			let hexString = command.substring(3, 7);
			let id = parseInt(hexString, 16);
			var name = command.substring(7);
			command_listener_faults.on_fault_name_changed(id, name);
		} else if (compare_command(COMMAND.FCQ, command)) {
			let hexString = command.substring(3, 7);
			let id = parseInt(hexString, 16);
			let value = parseInt(command.substring(7));
			command_listener_faults.on_fault_counter_changed(id, value);
		} else if (compare_command(COMMAND.FCR, command)) {
			let hexString = parseValue(COMMAND.FCR, command);
			command_listener_faults.on_fault_reset_changed(parseInt(hexString, 16));
		} else {
			logE("warning fault command not handled: " + command);
		}

		function compare_command(key, full_command) {
			return key === full_command.substring(0, 3);
		}
	}

	function handle_amp_matrixing_commands(command) {
		if (compare_command(COMMAND.SSAMF, command)) {
			let value = parseInt(parseValue(COMMAND.SSAMF, command));
			command_listener_amp_matrixing.on_amp_matrixing_front_changed(value);
		} else if (compare_command(COMMAND.SSAMS, command)) {
			let value = parseInt(parseValue(COMMAND.SSAMS, command));
			command_listener_amp_matrixing.on_amp_matrixing_surround_changed(value);
		} else if (compare_command(COMMAND.SSAMB, command)) {
			let value = parseInt(parseValue(COMMAND.SSAMB, command));
			command_listener_amp_matrixing.on_amp_matrixing_back_changed(value);
		} else if (compare_command(COMMAND.SSAMH1, command)) {
			let value = parseInt(parseValue(COMMAND.SSAMH1, command));
			command_listener_amp_matrixing.on_amp_matrixing_height_1_changed(value);
		} else if (compare_command(COMMAND.SSAMH2, command)) {
			let value = parseInt(parseValue(COMMAND.SSAMH2, command));
			command_listener_amp_matrixing.on_amp_matrixing_height_2_changed(value);
		} else {
			logE("warning amp matrixing command not handled: " + command);
		}

		function compare_command(key, full_command) {
			return key === full_command.substring(0, key.length);
		}
	}

	function handle_height_commands(command) {

		if (command.startsWith(COMMAND.SS3DHL)) {
			let value = parseInt(parseValue(COMMAND.SS3DHL, command));
			command_listener_heights.on_height_changed(value);
		} else if (command.startsWith(COMMAND.SS3DH1)) {
			let value = parseInt(parseValue(COMMAND.SS3DH1, command));
			command_listener_heights.on_height_1_changed(value);
		} else if (command.startsWith(COMMAND.SS3DH2)) {
			let value = parseInt(parseValue(COMMAND.SS3DH2, command));
			command_listener_heights.on_height_2_changed(value);
		} else if (command.startsWith(COMMAND.SS3DH3)) {
			let value = parseInt(parseValue(COMMAND.SS3DH3, command));
			command_listener_heights.on_height_3_changed(value);
		} else {
			logE("warning height command not handled: " + command);
		}
	}

	function handle_export_commands(command) {
		for (const [key, value] of Object.entries(im_export_handlers)) {
			if (key === command.substring(0, key.length)) {
				value(command, command.substring(key.length));
				return true;
			}
		}

		// Was not interpreted
		return false;
	}
}






var socket;
var socket_was_connected = false;
var idq_interval = 0;

function init_socket(IP) {
	var local_ip = IP;
	if (socket_was_connected && socket) {
		socket.onclose = function (code, reason) { log("socket closed") }
		socket.onerror = function (code, reason) { log("socket error") }
	}
	socket_was_connected = false;
	socket = new WebSocket("ws://" + IP + "/cmd");
	// A connection could not be made
	socket.onerror = function (event) {
		if (!socket_was_connected) {
			logFatal(TL("lost_conn"), "WebSocket", TL("lost_conn2"));
			setTimeout(init_socket, 5000, local_ip);
		}
	};

	// A connection was closed
	socket.onclose = function (code, reason) {
		socket_was_connected = false;
		init_socket.fragment = "";
		init_socket(local_ip);
	};

	// Connection opened
	socket.addEventListener("open", function (event) {
		socket_was_connected = true;
		send_query_commands([COMMAND.IDM]);
	});

	if (typeof init_socket.fragment == "undefined") {
		init_socket.fragment = "";
	}

	// Listen for messages
	socket.addEventListener("message", function (event) {
		var msgs = event.data.split(";");
		if ((msgs.length > 0) && (init_socket.fragment.length > 0)) {
			// prepend previous message fragment
			msgs[0] = init_socket.fragment + msgs[0];
			init_socket.fragment = "";
		}
		if ((event.data.length > 0) && (event.data[event.data.length - 1] != ';')) {
			init_socket.fragment = msgs.pop();
		}
		for (var i = 0; i < msgs.length; i++) {
			if (msgs[i].length > 0) {
				command_handler.handle_incoming_command(msgs[i]);
			}
		}
	});

	if (!socket || socket === undefined) {
		logFatal(TL("no_websockets"));
	}

	keep_socket_alive();
	function keep_socket_alive() {
		if (idq_interval != 0) {
			clearInterval(idq_interval);
		}
		idq_interval = setInterval(function () {
			if (socket_was_connected) {
				socket.send("IDQ?;");
			}
		}, 30000);
	}
}

window.addEventListener("beforeunload", function (event) {
	// clearing on close event on page change to prevent error alert on Fixefox windows
	if (typeof socket !== 'undefined') {
		socket.onclose = function (code, reason) {
			log("socket closed");
		}
	}
});



function send_query_commands(commands) {

	if (DEMO_MODE) {
		log("send_query_commands not avaliable in DEMO_MODE")
		return
	}

	if (!socket_was_connected) {
		logE("Fatal Error: Socket not ready to query command");
		return;
	}

	var queries = [];
	var j;
	for (j = 0; j < commands.length; j++) {
		queries.push(commands[j] + "?;");
	}

	var batches = queries.chunk(10);
	var i;
	for (i = 0; i < batches.length; i++) {
		socket.send(batches[i].join(""));

		log("sending batch: " + batches[i].join(""))
	}
}

function send_and_query_command(command, value) {
	value = typeof value !== 'undefined' ? value : "";
	if (DEMO_MODE) {
		log(command + value + ";");
		command_handler.handle_incoming_command(command + value);

	} else {
		socket.send(command + value + ';');
		socket.send(command + "?;");
		notification_changes_start();
	}
}

function send_command(command) {
	if (DEMO_MODE)
		logE("not available in demo mode: " + command);
	else
		socket.send(command);
}










// export / import settings


var import_settings = {};
import_settings.data = {
	imstarted: false,
	rx_count: 0,
	rx_offset: 0,
	imsize: 0,
	crc: { high: 0, low: 0 },
	rx_block: ""
};

var export_settings = {};
export_settings.data = {
	exstarted: false,
	scratch_size: 0,
	current_count: 0,
	inhex: "",
	imstarted: false
}

const export_result = { "model": null, "settings_size": null, "settings": null };

export_settings.export_settings = function () {
	export_settings.data.exstarted = true;
	show_loader(TR("Exporting Settings"), 0);

	if (DEMO_MODE) {
		command_handler.handle_incoming_command("SPDSZ00001234");
	} else {
		// Get exclusive control of scratchpad,
		// copy current settings to scratchpad and request size of scratchpad
		socket.send("CTRL11;CPYS03;SPDSZ?;");
	}
}

import_settings.import_settings = function (config_file) {

	if (config_file) {
		var reader = new FileReader();
		if (device.model == MODEL.MRXSLM) {
			reader.readAsDataURL(config_file);
			reader.onload = function (e) {
				// Get the data, ignoring file details
				import_settings.data.rx_block = e.target.result.split(",")[1];
				import_settings.data.imsize = e.loaded;
				import_settings.data.crc = crc32_init();
				socket.send("CTRL11;"); // needed?
				socket.send("PRGS1?;");
			}
		} else {
			// MRX x40, AVM 70 & 90
			reader.readAsText(config_file);
			reader.onload = function (e) {
				import_settings.data.rx_block = check_config_file(e.target.result);
				if (import_settings.data.rx_block === false) {
					logFatal(TL("undef_file_format"));
					setTimeout(delayed_display, 2000);
					return;
				} else if (import_settings.data.rx_block.model !== device.model) {
					logFatal(TL("model_mismatch"));
					setTimeout(delayed_display, 2000);
					return;
				}

				import_settings.data.imsize = import_settings.data.rx_block.settings_size;
				import_settings.data.crc = crc32_hex_string(import_settings.data.rx_block.settings);
				socket.send("CTRL11;"); // needed?
				socket.send("PRGS1?;");
			};
		}
	} else {
		logFatal(TR("Please choose an import file."));
	}

	function delayed_display() {
		hide_loader();
	}

	function check_config_file(file) {
		try {
			var jsonobj = JSON.parse(file);
			var aKeys = Object.keys(jsonobj).sort();
			var bKeys = Object.keys(export_result).sort();
			if (JSON.stringify(aKeys) === JSON.stringify(bKeys)) {
				return jsonobj;
			} else {
				return false;
			}
		} catch (e) {
			logFatal(TL("undef_file_format"));
			return false;
		}
	}
}


// Import and Export command handlers

function handle_scratch_settings_size(cmd, params) {
	export_settings.data.scratch_size = parseInt(params, 16);
	export_settings.data.current_count = 0;
	export_settings.data.inhex = "";
	if (device.model == MODEL.MRXSLM) {
		if (export_settings.data.scratch_size > 0) {
			fetch("/tmp/exportedSettings.tar.gz")
				.then(function (response) {
					if (response.status !== 200) {
						window.alert("Communication failure during export. Status code " + response.status);
					}
					response.blob().then(function (data) {
						export_settings.saveData(data, "MRX SLM_settings.tar.gz");
					});
				})
				.catch(function (err) {
					window.alert("Fetch failed during export. Error " + err);
				});
		} else {
			window.alert("Empty or missing settings file.");
		}
		hide_loader();
	} else {
		// MRX x40 and AVM 70/90
		query_scratch_block();
	}
}

function query_scratch_block() {
	var toget = export_settings.data.scratch_size - export_settings.data.current_count;
	if (toget > 64) {
		toget = 64;
	}
	var percent = export_settings.data.current_count * 100 / export_settings.data.scratch_size;
	load_loader_progress(parseInt(percent));

	var hexo = export_settings.data.current_count.toString(16).toUpperCase();
	var offset = "00000000".substring(0, 8 - hexo.length) + hexo;
	var hexc = toget.toString(16).toUpperCase();
	var countbytes = "0000".substring(0, 4 - hexc.length) + hexc;
	socket.send("RDBL1" + offset + countbytes + "?;");
}

function handle_read_block_scratch(cmd, params) {
	var offset_str = params.substring(0, 8);
	var count_str = params.substring(8, 12);
	var countbytes = parseInt(count_str, 16);

	// Process data bytes
	var hex_str = params.substring(12);
	export_settings.data.inhex += hex_str;

	export_settings.data.current_count += countbytes;
	if (export_settings.data.current_count < export_settings.data.scratch_size) {
		query_scratch_block();
	} else {
		load_loader_progress(100);
		socket.send("CTRL10;");
		export_settings.data.exstarted = false;

		// Store the data to a file
		var devmodel = device.model;
		var jason = '{\n';
		jason = jason + '"model":"' + devmodel + '",\n';
		jason = jason + '"settings_size":' + export_settings.data.scratch_size + ',\n';
		jason = jason + '"settings":"' + export_settings.data.inhex + '"\n';
		jason = jason + '}\n';
		var export_filename = devmodel + "_settings.conf";
		export_settings.saveData(jason, export_filename);

		hide_loader();
	}
}

// https://www.quora.com/How-do-I-make-a-JSON-file-with-JavaScript
export_settings.saveData = (function () {
	var a = document.createElement("a");
	document.body.appendChild(a);
	a.style = "display: none";
	return function (data, fileName) {
		var blob = new Blob([data], { type: "text/plain", endings: "native" }),
			url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = fileName;
		a.click();
		window.URL.revokeObjectURL(url);
	};
}());

function handle_start_import(cmd, params) {
	import_settings.data.rx_count = 0;
	if (device.model == MODEL.MRXSLM) {
		import_settings.data.rx_offset = 0;
		queue_import_block64();
	} else {
		// MRX x40, AVM 70 & 90
		queue_import_block();
	}
}

// MRX x40, AVM 70 & 90
function queue_import_block() {
	var togo = import_settings.data.imsize - import_settings.data.rx_count;
	if (togo > 64) {
		togo = 64;
	}

	if (togo > 0) {
		var percent = import_settings.data.rx_count * 100 / import_settings.data.imsize;
		load_loader_progress(parseInt(percent));

		var hexo = import_settings.data.rx_count.toString(16).toUpperCase();
		var offset = "00000000".substring(0, 8 - hexo.length) + hexo;
		var hexc = togo.toString(16).toUpperCase();
		var countbytes = "0000".substring(0, 4 - hexc.length) + hexc;
		var data_start = 2 * import_settings.data.rx_count;
		var data_end = data_start + 2 * togo;
		var datablock = import_settings.data.rx_block.settings.substring(data_start, data_end);
		socket.send("PRGB1" + offset + countbytes + datablock + ";");

		import_settings.data.rx_count += togo;
		setTimeout(queue_import_block, 10);
	} else {
		// All data sent
		queue_import_finish();
	}
}

function queue_import_block64() {
	var togo = import_settings.data.rx_block.length - import_settings.data.rx_count;
	if (togo > 64) {
		togo = 64;
	}

	if (togo > 0) {
		var percent = import_settings.data.rx_offset * 100 / import_settings.data.imsize;
		load_loader_progress(parseInt(percent));

		var hexoffset = import_settings.data.rx_offset.toString(16).toUpperCase().padStart(8, 0);
		var chunk = import_settings.data.rx_block.substr(import_settings.data.rx_count, togo);
		const raw = atob(chunk);
		var hexcount = raw.length.toString(16).toUpperCase().padStart(4, 0);
		var datablock = "";
		for (var gocnt = 0; gocnt < raw.length; gocnt++) {
			const hex = raw.charCodeAt(gocnt);
			var hexd = hex.toString(16);
			var hexud = hexd.toUpperCase();
			var hexpud = hexud.padStart(2, 0);
			datablock += hexpud;
		}
		import_settings.data.crc = crc32_hex_strings(import_settings.data.crc, datablock);
		socket.send("PRGB1" + hexoffset + hexcount + datablock + ";");

		import_settings.data.rx_count += togo;
		import_settings.data.rx_offset += raw.length;
		setTimeout(queue_import_block64, 10);
	} else {
		// All data sent
		import_settings.data.crc = crc_end(import_settings.data.crc);
		queue_import_finish();
	}
}

function queue_import_finish() {
	load_loader_progress(100);
	var hexc = import_settings.data.imsize.toString(16).toUpperCase();
	var numberofbytes = "00000000".substring(0, 8 - hexc.length) + hexc;
	var hexsum = import_settings.data.crc.high.toString(16).toUpperCase();
	var appchecksum = "00".substring(0, 2 - hexsum.length) + hexsum;
	hexsum = import_settings.data.crc.low.toString(16).toUpperCase();
	appchecksum += "000000".substring(0, 6 - hexsum.length) + hexsum;
	var msgf = "PRGF1" + numberofbytes + appchecksum + ";"
	log("queue_import_finish " + msgf);
	socket.send(msgf);
	socket.send("CTRL10;");
	hide_loader();
	import_settings.data.imstarted = false;
}

const im_export_handlers = {
	"SPDSZ": handle_scratch_settings_size,
	"RDBL1": handle_read_block_scratch,
	"PRGS11": handle_start_import
};


//****************************************************************************
//*
//* Title : 32 bit CRC calculation
//* Version : 0.2
//* Copied from hmac_sha256/crc32.c on 2020/09/03. Last updated : 4/07/2014
//* : peter schuck original
//* : Mark Schuck - modified to allow chaining of CRC calculations, added
// portable method of calculating CRC's of blocks of 8, 16 or 32 bit words
//* (copyright paradigm 1999 - 2014)
//* Target : OKI ARM ML675003 used for Digital Video Board - also MS Windows
// based Installers
//*
//*
//* DESCRIPTION
//*
//* implementation of 32 bit CRC checksum calculation based on
//* "A Painless Guide to CRC Error Detection Algorithms" by Ross
//* Williams (ross@guest.adelaide.edu.au.).
//* "http://www.geocities.com/SiliconValley/Pines/8659/crc.htm".
//*****************************************************************************

/****************************************************************************/
// 32 bits: (32,26,23,22,16,12,11,10,8,7,5,4,2,1,0) [Ethernet 32 bit CRC
// polynomial]
const POLY_32 = 0x04C11DB7;
const CRC_INIT = 0xffffffff;


// global, pre-calculated CRC table using POLY_32
const crctable = [
	0x00000000, 0x04C11DB7, 0x09823B6E, 0x0D4326D9,
	0x130476DC, 0x17C56B6B, 0x1A864DB2, 0x1E475005,
	0x2608EDB8, 0x22C9F00F, 0x2F8AD6D6, 0x2B4BCB61,
	0x350C9B64, 0x31CD86D3, 0x3C8EA00A, 0x384FBDBD,
	0x4C11DB70, 0x48D0C6C7, 0x4593E01E, 0x4152FDA9,
	0x5F15ADAC, 0x5BD4B01B, 0x569796C2, 0x52568B75,
	0x6A1936C8, 0x6ED82B7F, 0x639B0DA6, 0x675A1011,
	0x791D4014, 0x7DDC5DA3, 0x709F7B7A, 0x745E66CD,
	0x9823B6E0, 0x9CE2AB57, 0x91A18D8E, 0x95609039,
	0x8B27C03C, 0x8FE6DD8B, 0x82A5FB52, 0x8664E6E5,
	0xBE2B5B58, 0xBAEA46EF, 0xB7A96036, 0xB3687D81,
	0xAD2F2D84, 0xA9EE3033, 0xA4AD16EA, 0xA06C0B5D,
	0xD4326D90, 0xD0F37027, 0xDDB056FE, 0xD9714B49,
	0xC7361B4C, 0xC3F706FB, 0xCEB42022, 0xCA753D95,
	0xF23A8028, 0xF6FB9D9F, 0xFBB8BB46, 0xFF79A6F1,
	0xE13EF6F4, 0xE5FFEB43, 0xE8BCCD9A, 0xEC7DD02D,
	0x34867077, 0x30476DC0, 0x3D044B19, 0x39C556AE,
	0x278206AB, 0x23431B1C, 0x2E003DC5, 0x2AC12072,
	0x128E9DCF, 0x164F8078, 0x1B0CA6A1, 0x1FCDBB16,
	0x018AEB13, 0x054BF6A4, 0x0808D07D, 0x0CC9CDCA,
	0x7897AB07, 0x7C56B6B0, 0x71159069, 0x75D48DDE,
	0x6B93DDDB, 0x6F52C06C, 0x6211E6B5, 0x66D0FB02,
	0x5E9F46BF, 0x5A5E5B08, 0x571D7DD1, 0x53DC6066,
	0x4D9B3063, 0x495A2DD4, 0x44190B0D, 0x40D816BA,
	0xACA5C697, 0xA864DB20, 0xA527FDF9, 0xA1E6E04E,
	0xBFA1B04B, 0xBB60ADFC, 0xB6238B25, 0xB2E29692,
	0x8AAD2B2F, 0x8E6C3698, 0x832F1041, 0x87EE0DF6,
	0x99A95DF3, 0x9D684044, 0x902B669D, 0x94EA7B2A,
	0xE0B41DE7, 0xE4750050, 0xE9362689, 0xEDF73B3E,
	0xF3B06B3B, 0xF771768C, 0xFA325055, 0xFEF34DE2,
	0xC6BCF05F, 0xC27DEDE8, 0xCF3ECB31, 0xCBFFD686,
	0xD5B88683, 0xD1799B34, 0xDC3ABDED, 0xD8FBA05A,
	0x690CE0EE, 0x6DCDFD59, 0x608EDB80, 0x644FC637,
	0x7A089632, 0x7EC98B85, 0x738AAD5C, 0x774BB0EB,
	0x4F040D56, 0x4BC510E1, 0x46863638, 0x42472B8F,
	0x5C007B8A, 0x58C1663D, 0x558240E4, 0x51435D53,
	0x251D3B9E, 0x21DC2629, 0x2C9F00F0, 0x285E1D47,
	0x36194D42, 0x32D850F5, 0x3F9B762C, 0x3B5A6B9B,
	0x0315D626, 0x07D4CB91, 0x0A97ED48, 0x0E56F0FF,
	0x1011A0FA, 0x14D0BD4D, 0x19939B94, 0x1D528623,
	0xF12F560E, 0xF5EE4BB9, 0xF8AD6D60, 0xFC6C70D7,
	0xE22B20D2, 0xE6EA3D65, 0xEBA91BBC, 0xEF68060B,
	0xD727BBB6, 0xD3E6A601, 0xDEA580D8, 0xDA649D6F,
	0xC423CD6A, 0xC0E2D0DD, 0xCDA1F604, 0xC960EBB3,
	0xBD3E8D7E, 0xB9FF90C9, 0xB4BCB610, 0xB07DABA7,
	0xAE3AFBA2, 0xAAFBE615, 0xA7B8C0CC, 0xA379DD7B,
	0x9B3660C6, 0x9FF77D71, 0x92B45BA8, 0x9675461F,
	0x8832161A, 0x8CF30BAD, 0x81B02D74, 0x857130C3,
	0x5D8A9099, 0x594B8D2E, 0x5408ABF7, 0x50C9B640,
	0x4E8EE645, 0x4A4FFBF2, 0x470CDD2B, 0x43CDC09C,
	0x7B827D21, 0x7F436096, 0x7200464F, 0x76C15BF8,
	0x68860BFD, 0x6C47164A, 0x61043093, 0x65C52D24,
	0x119B4BE9, 0x155A565E, 0x18197087, 0x1CD86D30,
	0x029F3D35, 0x065E2082, 0x0B1D065B, 0x0FDC1BEC,
	0x3793A651, 0x3352BBE6, 0x3E119D3F, 0x3AD08088,
	0x2497D08D, 0x2056CD3A, 0x2D15EBE3, 0x29D4F654,
	0xC5A92679, 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0,
	0xD6AD50A5, 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C,
	0xE3A1CBC1, 0xE760D676, 0xEA23F0AF, 0xEEE2ED18,
	0xF0A5BD1D, 0xF464A0AA, 0xF9278673, 0xFDE69BC4,
	0x89B8FD09, 0x8D79E0BE, 0x803AC667, 0x84FBDBD0,
	0x9ABC8BD5, 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C,
	0xAFB010B1, 0xAB710D06, 0xA6322BDF, 0xA2F33668,
	0xBCB4666D, 0xB8757BDA, 0xB5365D03, 0xB1F740B4
];

function crctab(index) {
	return crctable[index];
}

function crc32_hex_string(source) {
	if ((source.length % 2) == 0) {
		//var crc = CRC_INIT;
		var crc = { high: (CRC_INIT >> 24) & 0xFF, low: CRC_INIT & 0xFFFFFF };
		for (var index = 0; index < source.length; index += 2) {
			var pair = source.substring(index, index + 2);
			var byte = parseInt(pair, 16);
			//crc = crctab(((crc >> 24) ^ byte) & 0xFF) ^ (crc << 8);
			var lookfor = crc.high ^ byte;
			var lookup = crctab(lookfor);
			var highlup = (lookup >> 24) & 0xFF;
			var lowlup = lookup & 0xFFFFFF;
			var shiftcrc = { high: crc.low >> 16, low: (crc.low & 0xFFFF) << 8 };
			crc.high = highlup ^ shiftcrc.high;
			crc.low = lowlup ^ shiftcrc.low;
		}
		//return crc ^ POLY_32;
		var shiftpoly = { high: (POLY_32 >> 24) & 0xFF, low: POLY_32 & 0xFFFFFF };
		crc.high = crc.high ^ shiftpoly.high;
		crc.low = crc.low ^ shiftpoly.low;
		return crc;
	} else {
		return false;
	}
}

function crc32_init() {
	var crc = { high: (CRC_INIT >> 24) & 0xFF, low: CRC_INIT & 0xFFFFFF };
	return crc;
}

function crc32_hex_strings(initial, source) {
	if ((source.length % 2) == 0) {
		var crc = initial;
		for (var index = 0; index < source.length; index += 2) {
			var pair = source.substring(index, index + 2);
			var byte = parseInt(pair, 16);
			//crc = crctab(((crc >> 24) ^ byte) & 0xFF) ^ (crc << 8);
			var lookfor = crc.high ^ byte;
			var lookup = crctab(lookfor);
			var highlup = (lookup >> 24) & 0xFF;
			var lowlup = lookup & 0xFFFFFF;
			var shiftcrc = { high: crc.low >> 16, low: (crc.low & 0xFFFF) << 8 };
			crc.high = highlup ^ shiftcrc.high;
			crc.low = lowlup ^ shiftcrc.low;
		}
		return crc;
	} else {
		return false;
	}
}

function crc_end(blockcrc) {
	//return crc ^ POLY_32;
	var crc = {};
	var shiftpoly = { high: (POLY_32 >> 24) & 0xFF, low: POLY_32 & 0xFFFFFF };
	crc.high = blockcrc.high ^ shiftpoly.high;
	crc.low = blockcrc.low ^ shiftpoly.low;
	return crc;
}

function toHex(hilo) {
	var upper = hilo.high.toString(16).padStart(2, 0);
	var lower = hilo.low.toString(16).padStart(6, 0);
	var result = (upper + lower).toUpperCase();
	return result;
}

function crc_test() {
	var size = 1000 + Math.floor(Math.random() * 10000);
	console.log("size is " + size);

	var hexdata = "";
	for (let count = 0; count < size; count++) {
		var num = Math.floor(Math.random() * 256);
		var padhex = num.toString(16).padStart(2, 0);
		hexdata += padhex;
	}
	hexdata = hexdata.toUpperCase();
	console.log("data is " + hexdata);

	var oldcrc = crc32_hex_string(hexdata);
	console.log("crc (single function) " + toHex(oldcrc));

	var blocksiz = 32 + 2 * Math.floor(Math.random() * 100);
	var fragcrc = crc32_init();
	var index = 0;
	do {
		var fragment = hexdata.substr(index, blocksiz);
		if (fragment.length > 0) {
			fragcrc = crc32_hex_strings(fragcrc, fragment);
			index += blocksiz;
		}
	} while (fragment.length > 0);
	fragcrc = crc_end(fragcrc);
	console.log("crc (fragment size is " + blocksiz + ") is " + toHex(fragcrc));
}
init();

var current_hash;

$get(document).ready(function () {
	$get('[data-toggle="popover"]').popover(); // init all popovers
	player_page.trySizing();
	window.onresize = player_page.trySizing;
	streamer.init();
});

function init() {
	window.scrollTo(0, 0);
	translator.init();

	if (DEMO_MODE) {
		load_first_page();
		hide_loader();
		command_handler.trigger_fake_commands_for_demo_mode(MODEL.MRXSLM);
		//command_handler.trigger_fake_commands_for_demo_mode(MODEL.MRX540);
		//command_handler.trigger_fake_commands_for_demo_mode(MODEL.MRX740);
		//command_handler.trigger_fake_commands_for_demo_mode(MODEL.MRX1140);
		//command_handler.trigger_fake_commands_for_demo_mode(MODEL.AVM70);
		//command_handler.trigger_fake_commands_for_demo_mode(MODEL.AVM90);
		initializeMenus();
	} else {
		init_socket(SOCKET_IP);
	}
}

function initializeMenus() {
	var keys = {
		TAB: 9,
		ENTER: 13,
		SPACE: 32,
		LEFT: 37,
		UP: 38,
		RIGHT: 39,
		DOWN: 40
	};
	var currentIndex = 1;
	var sideMenuItems = $get("#menu-content li");
	var topMenuItems = $get("#mobile_main_menu li");
	sideMenuItems.each(function (index, elem) {
		if (1 == index) {
			$get(elem).attr("tabindex", "0");
		} else {
			$get(elem).attr("tabindex", "-1");
		}
		$get(elem).on("keydown", function (e) {
			var prevdef = false;
			if (e.which == keys.ENTER || e.which == keys.SPACE) {
				if (this.children.length > 0) {
					if (this.children[0].tagName.toLowerCase() == "button") {
						this.children[0].click();
						prevdef = true;
					}
				}
			} else if (e.which == keys.LEFT || e.which == keys.UP) {
				currentIndex = gotoIndex(currentIndex - 1);
				prevdef = true;
			} else if (e.which == keys.RIGHT || e.which == keys.DOWN) {
				currentIndex = gotoIndex(currentIndex + 1);
				prevdef = true;
			}
			if (prevdef) {
				e.preventDefault();
			}
		});
		$get(elem).on("click", function () {
			currentIndex = gotoIndex(index);
		});
		$get(elem).on("focus", function () {
			currentIndex = gotoIndex(index);
		});
	});
	$get("#menu-content button").attr("tabindex", "-1");
	topMenuItems.each(function (index, elem) {
		if (1 == index) {
			$get(elem).attr("tabindex", "0");
		} else {
			$get(elem).attr("tabindex", "-1");
		}
		$get(elem).on("keydown", function (e) {
			prevdef = false;
			if (e.which == keys.ENTER || e.which == keys.SPACE) {
				if (this.children.length > 0) {
					if (this.children[0].tagName.toLowerCase() == "button") {
						this.children[0].click();
					}
				}
			} else if (e.which == keys.LEFT || e.which == keys.UP) {
				currentIndex = gotoIndex(currentIndex - 1);
				prevdef = true;
			} else if (e.which == keys.RIGHT || e.which == keys.DOWN) {
				currentIndex = gotoIndex(currentIndex + 1);
				prevdef = true;
			}
			if (prevdef) {
				e.preventDefault();
			}
		});
		$get(elem).on("click", function () {
			currentIndex = gotoIndex(index);
		});
		$get(elem).on("focus", function () {
			currentIndex = gotoIndex(index);
		});
	});
	$get("#mobile_main_menu button").attr("tabindex", "-1");

	var speakerIndex = 1;
	var speakerMenuItems = $get("#profile_menu li");
	speakerMenuItems.each(function (index, elem) {
		if (1 == index) {
			$get(elem).attr("tabindex", "0");
		} else {
			$get(elem).attr("tabindex", "-1");
		}
		$get(elem).on("keydown", function (e) {
			prevdef = false;
			if (e.which == keys.ENTER || e.which == keys.SPACE) {
				if (this.children.length > 0) {
					if (this.children[0].tagName.toLowerCase() == "button") {
						this.children[0].click();
						prevdef = true;
					}
				}
			} else if (e.which == keys.LEFT || e.which == keys.UP) {
				speakerIndex = gotoSpeakerIndex(speakerIndex - 1);
				prevdef = true;
			} else if (e.which == keys.RIGHT || e.which == keys.DOWN) {
				speakerIndex = gotoSpeakerIndex(speakerIndex + 1);
				prevdef = true;
			}
			if (prevdef) {
				e.preventDefault();
			}
		});
		$get(elem).on("click", function () {
			speakerIndex = gotoSpeakerIndex(index);
		});
		$get(elem).on("focus", function () {
			speakerIndex = gotoSpeakerIndex(index);
		});
	});
	$get("#profile_menu button").attr("tabindex", "-1");

	function gotoIndex(index) {
		let bside = $get("body").width() >= 1200;
		let items = bside ? sideMenuItems.length : topMenuItems.length;
		if (index >= items) {
			index = 0;
		} else if (index < 0) {
			index = items - 1;
		}
		if (bside) {
			sideMenuItems[index].focus();
		} else {
			topMenuItems[index].focus();
		}
		return index;
	}

	function gotoSpeakerIndex(index) {
		if (index >= speakerMenuItems.length) {
			index = 0;
		} else if (index < 0) {
			index = speakerMenuItems.length - 1;
		}
		speakerMenuItems[index].focus();
		return index;
	}
}

function set_subwoofer_labels(bmultiple) {
	var trmulti = bmultiple ? TR("Subwoofers", [1]) : TR("Subwoofer");
	var trone = bmultiple ? TR("Subwoofer 1") : TR("Subwoofer");
	$get("#profsub_label").text(trmulti);
	$get("#distance_sub1_l").text(trone);
	$get("#level_sub1_l").text(trone);
	if (!bmultiple) {
		$get("#pro_sub1_hrow").remove();
	}
}

function configure_based_on_model_type(model) {
	if (model === MODEL.MRXSLM) {
		$get(".all_MRX79").remove();
		$get(".lcdc_row").remove();

		$get("#label_gp2").text(TR("Power Saving"));
		$get("#mute_panel").remove();
		$get("#subwoofer_picker").remove();
		set_subwoofer_labels(false);
		$get(".front_wide").remove();
		$get("#mzl_backs").remove();
		$get(".height_2_row, .height_2_hw").remove();
		$get(".height_3_row, .height_3_hw").remove();
		$get(".default_streaming_zone").remove();

		remove_zone_2();

		$get(".standby_hdmi_bypass_multi").remove();
		$get("#shdmib_l").attr("for", "standby_hdmi_bypass_sw");
		$get(".mute_control_row").remove();
		$get(".display_row").remove();

		$get("#threed_sound").remove();
		$get("#sam_front_row").remove();
		$get("#sam_back_row").remove();
		$get("#amp_matrixing_height_1").remove();
		$get("#amp_matrixing_height_2").remove();
		$get("#subwoofer_selection").remove();
		$get(".pro_subw2_row").remove();
		$get(".pro_subw3_row").remove();
		$get(".pro_subw4_row").remove();
		$get(".pro_height2_row").remove();
		$get(".pro_height3_row").remove();
		$get(".super_sub_fronts_row").remove();
		$get("#favour_current_streaming_input").remove();

		$get(".mode_preset_for_mono_row").remove();
		$get(".convert_analog_row").remove();
		$get(".rumble_filter_row").remove();

		$get(".tx_status_row").remove();
		$get(".single_ir_row").remove();
		$get(".trigger_delay_row").remove();
		$get("#trigger_1_panel").parent().remove();
		$get("#trigger_2_panel").parent().remove();
		$get("#trigger_3_panel").parent().remove();

		$get(".auto_updates_row").remove();
		$get(".cmessage_row").remove();
		$get(".ec_firmware_row").remove();
		$get("#config_file_input").attr("accept", ".gz, application/zip");
	} else if (model === MODEL.MRX540) {
		$get(".only_MRX_SLM").remove();
		$get(".only_AVM_90").remove();

		$get("#subwoofer_picker").remove();
		set_subwoofer_labels(false);
		$get(".front_wide").remove();
		$get(".height_2_row, .height_2_hw").remove();
		$get(".height_3_row, .height_3_hw").remove();
		$get(".default_streaming_zone").remove();

		remove_zone_2();

		$get(".standby_hdmi_bypass_bool").remove();
		$get("#shdmib_l").attr("for", "standby_hdmi_bypass_select");
		$get(".display_zones_row").remove();

		$get("#amp_matrixing").remove();
		$get("#height_1_select").val('3');
		$get("#subwoofer_selection").remove();
		$get(".pro_subw2_row").remove();
		$get(".pro_subw3_row").remove();
		$get(".pro_subw4_row").remove();
		$get(".pro_height2_row").remove();
		$get(".pro_height3_row").remove();
		$get("#favour_current_streaming_input").remove();

		$get(".convert_analog_row").remove();
		$get(".rumble_filter_row").remove();
		$get(".multi_ir_row").remove();

	} else if (model === MODEL.MRX740) {
		$get(".only_MRX_SLM").remove();
		$get(".only_AVM_90").remove();

		$get("#subwoofer_picker").remove();
		set_subwoofer_labels(false);
		$get(".front_wide").remove();
		$get(".height_3_row, .height_3_hw").remove();

		$get(".standby_hdmi_bypass_bool").remove();
		$get("#shdmib_l").attr("for", "standby_hdmi_bypass_select");
		$get("#height").remove();
		$get("#height_2_select").val('2');
		$get("#amp_matrixing_height_1").remove();
		$get("#amp_matrixing_height_2").remove();
		$get("#subwoofer_selection").remove();
		$get(".pro_subw2_row").remove();
		$get(".pro_subw3_row").remove();
		$get(".pro_subw4_row").remove();
		$get(".pro_height3_row").remove();

		$get(".convert_analog_row").remove();
		$get(".rumble_filter_row").remove();
		$get(".multi_ir_row").remove();

	} else if (model === MODEL.MRX1140) {
		$get(".only_MRX_SLM").remove();
		$get(".only_AVM_90").remove();

		$get(".standby_hdmi_bypass_bool").remove();
		$get("#shdmib_l").attr("for", "standby_hdmi_bypass_select");
		$get("#height").remove();
		$get("#subwoofer_enabled").remove();
		set_subwoofer_labels(true);
		$get(".pro_subw3_row").remove();
		$get(".pro_subw4_row").remove();

		$get(".convert_analog_row").remove();
		$get(".rumble_filter_row").remove();
		$get(".multi_ir_row").remove();

	} else if (model === MODEL.AVM70) {
		$get(".only_MRX_SLM").remove();
		$get(".only_AVM_90").remove();

		$get(".standby_hdmi_bypass_bool").remove();
		$get("#shdmib_l").attr("for", "standby_hdmi_bypass_select");
		$get("#amp_matrixing").remove();
		$get("#height").remove();
		$get("#subwoofer_enabled").remove();
		set_subwoofer_labels(true);
		$get(".pro_subw3_row").remove();
		$get(".pro_subw4_row").remove();
		$get(".multi_ir_row").remove();

	} else if (model === MODEL.AVM90) {
		$get(".only_MRX_SLM").remove();

		$get(".standby_hdmi_bypass_bool").remove();
		$get("#shdmib_l").attr("for", "standby_hdmi_bypass_select");
		$get("#amp_matrixing").remove();
		$get("#height").remove();
		$get("#subwoofer_enabled").remove();
		set_subwoofer_labels(true);
		$get(".multi_ir_row").remove();

	} else {
		logE("Unknown model: " + model);
	}

	function remove_zone_2() {
		$get("#menu_item_zone_2").remove();
		$get("#mobile_menu_item_zone_2").remove();
		$get("#zone_2_page").remove();
		$get(".zone_2_panel").remove();
	}
}


function on_model_init(model) {

	if (DEMO_MODE) return;

	send_query_commands(get_init_commands());
	socket.send("__TURN_LOADER_OFF;");

	function get_init_commands() {
		var commands = [];
		commands = commands.concat(inputs_page.query_commands());
		commands = commands.concat(device.init_commands);
		return commands.remove_duplicates();
	}
}

function on_all_query_commands_sent() {
	firmware.init();
	load_first_page();
	hide_loader();
	initializeMenus();
}

function on_loader_progress_received(command) {
	var start = command.indexOf(COMMAND.LOAD_STEP);
	if (start >= 0) {
		var subcommand = command.substr(start + COMMAND.LOAD_STEP.length);
		var usindex = subcommand.indexOf("_");
		if (usindex >= 0) {
			var percent = subcommand.substr(usindex + 1);
			load_loader_progress(percent);
		}
	}
}

function load_first_page() {
	var hash = window.location.hash;
	if (hash.length == 0)
		hash = "#main_zone";
	if (hash.indexOf("?") > -1) // contains
		hash = hash.substring(0, hash.indexOf("?"));
	hash_changed(hash);
}

$get(window).bind("hashchange", function (event) {
	var hash = window.location.hash;
	if (hash.indexOf("?") > -1) // contains
		hash = hash.substring(0, hash.indexOf("?"));
	hash_changed(hash);
});

function hash_changed(hash) {
	if ((current_hash == "#setup") && (hash == "#setup")) {
		speaker_page.unload_page();
		speaker_page.load_page();
		window.scrollTo(0, 0);
		return;
	}
	current_hash = hash;
	load_content_view(hash);
	update_nav_menus(hash);
	set_title(hash);
	change_profile_menu_visibility(hash);
	change_inputs_menu_visibility(hash);

	window.scrollTo(0, 0);

	function load_content_view(hash) {
		info_page.unload_page();
		main_zone_page.unload_page();
		zone_2_page.unload_page();
		player_page.unload_page();
		streaming_page.unload_page();
		speaker_page.unload_page();
		inputs_page.unload_page();
		general_page.unload_page();
		network_page.unload_page();
		save_page.unload_page();
		admin_page.unload_page();

		switch (hash) {
			case "#info":
				info_page.load_page();
				break;
			case "#main_zone":
				main_zone_page.load_page();
				break;
			case "#zone_2":
				zone_2_page.load_page();
				break;
			case "#usb_content":
				player_page.load_page();
				break;
			case "#streaming":
				streaming_page.load_page();
				break;
			case "#setup":
				speaker_page.load_page();
				break;
			case "#inputs":
				inputs_page.load_page();
				break;
			case "#general":
				general_page.load_page();
				break;
			case "#network":
				network_page.load_page();
				break;
			case "#save":
				save_page.load_page();
				break;
			case "#admin":
				admin_page.load_page();
				break;
			default:
				logE("page not implemented: " + hash);
				break;
		}
	}

	function update_nav_menus(hash) {

		update_side_menu(hash);
		update_mobile_menu(hash);
		if ($get("body").width() >= 1200) {
			$get("#menu_item_" + hash.substring(1, hash.length)).focus();
		} else {
			$get("#mobile_menu_item_" + hash.substring(1, hash.length)).focus();
		}

		function update_side_menu(hash) {
			$get("#menu_item_info").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_main_zone").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_zone_2").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_usb_player").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_streaming").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_setup").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_inputs").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_general").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_network").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_save").removeClass("active").attr("tabindex", "-1");
			$get("#menu_item_" + hash.substring(1, hash.length)).addClass("active").attr("tabindex", "0");
		}
		function update_mobile_menu(hash) {
			$get("#mobile_menu_item_info").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_main_zone").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_zone_2").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_usb_player").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_streaming").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_general").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_setup").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_inputs").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_network").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_save").removeClass("active").attr("tabindex", "-1");
			$get("#mobile_menu_item_" + hash.substring(1, hash.length)).addClass("active").attr("tabindex", "0");
		}
	}

	function set_title(hash) {
		function get_title_from_hash(hash) {
			switch (hash) {
				case "#info":
					return device.friendly_name.trim();
				case "#main_zone":
					return TR("Main Zone");
				case "#zone_2":
					return TR("Zone 2");
				case "#usb_content":
					return TR("USB Content");
				case "#streaming":
					return TR("Streaming");
				case "#setup":
					return TR("Speakers Setup");
				case "#inputs":
					return TR("Inputs Setup");
				case "#general":
					return TR("General Setup");
				case "#network":
					return TR("Network Setup");
				case "#save":
					return TR("Store / Load / Update");
				case "#admin":
					return TR("Administration");
				default:
					logE("page not found");
					return TR("Page Not Found");
			}
		}
		$get("#title_bar").text(get_title_from_hash(hash));
	}

	function change_profile_menu_visibility(hash) {
		if (hash === "#setup")
			$get("#profile_menu").show();
		else
			$get("#profile_menu").hide();
	}

	function change_inputs_menu_visibility(hash) {
		if (hash === "#inputs")
			$get("#inputs_menu").show();
		else
			$get("#inputs_menu").hide();
	}
}


// global UI updates

function set_profile_menu_active(profile) {
	var ids = ["#profile_menu_global",
		"#profile_menu_profile_1", "#profile_menu_profile_2",
		"#profile_menu_profile_3", "#profile_menu_profile_4"];

	for (var id in ids) {
		$get(ids[id]).removeClass("active").attr("tabindex", "-1");
	}
	if (profile === "global") {
		$get(ids[0]).addClass("active").attr("tabindex", "0");
	} else if (profile === "profile_1") {
		$get(ids[1]).addClass("active").attr("tabindex", "0");
	} else if (profile === "profile_2") {
		$get(ids[2]).addClass("active").attr("tabindex", "0");
	} else if (profile === "profile_3") {
		$get(ids[3]).addClass("active").attr("tabindex", "0");
	} else if (profile === "profile_4") {
		$get(ids[4]).addClass("active").attr("tabindex", "0");
	}
}

function show_loader(text) {
	text = typeof text !== 'undefined' ? text : "";
	$get("body").css("overflow-y", "hidden");
	$get("#preloader-text").text(text);
	$get("#preloader-progress").text("");
	$get(".preloader").show();
}

function load_loader_progress(progress) {
	$get("#preloader-progress").text(progress + "%");
}

function hide_loader() {
	$get("body").css("overflow-y", "scroll");
	$get(".preloader").fadeOut(250);
}

function enable_class(class_x, which) {
	if (which) {
		$get(class_x).removeClass("disabled-div");
	} else {
		$get(class_x).addClass("disabled-div");
	}
}

function is_valid_key_code_for_string_input(key_code, shift, alt) {
	// control keys
	if (key_code >= 35 && key_code <= 40) // home, end, arrow keys
		return true;
	var DELETE_KEY = 46;
	var BACKSPACE_KEY = 8;
	var TAB_KEY = 9;
	if (key_code === DELETE_KEY || key_code === BACKSPACE_KEY || key_code === TAB_KEY)
		return true;

	// accepted characters ‘ ’, ‘-‘, ‘.’, ‘/’, 0-9, A-Z, a-z
	var SPACE_KEY = 32;
	var DASH_KEY = 189;
	var PERIOD_KEY = 190;
	var SLASH_KEY = 191;
	var NUMPERIOD_KEY = 110;
	if (!shift && !alt &&
		(key_code === SPACE_KEY || key_code === DASH_KEY ||
			key_code === PERIOD_KEY || key_code === SLASH_KEY ||
			key_code === NUMPERIOD_KEY))
		return true;
	if (shift && !alt && (key_code == 57 || key_code == 48))
		return true; // ()
	if (!shift && !alt &&
		((key_code >= 48 && key_code <= 57) || (key_code >= 96 && key_code <= 105))) // 0-9
		return true;
	return !alt && key_code >= 65 && key_code <= 90; // A-Z, a-z
}

function handle_switch_keydown(element, keycode) {
	var ENTER_KEY = 13;
	if (keycode === ENTER_KEY) {
		var checkbox = element.parent().find("input[type=checkbox]");
		checkbox.click();
	}
	var TAB_KEY = 9;
	return keycode === TAB_KEY;
}

function handle_range_minus_button_click(element) {
	var range = element.parent().find("input[type=range]");
	if (!range.is(":disabled")) {
		var new_value = parseFloat(range.val()) - parseFloat(range.prop("step"));
		if (new_value >= parseFloat(range.prop("min"))) {
			range.val(new_value).change();
		}
	}
}

function handle_range_plus_button_click(element) {
	var range = element.parent().find("input[type=range]");
	if (!range.is(":disabled")) {
		var new_value = parseFloat(range.val()) + parseFloat(range.prop("step"));
		if (new_value <= parseFloat(range.prop("max"))) {
			range.val(new_value).change();
		}
	}
}

function update_UI_range_text(range_element, value, units_text, value_decimal_places) {
	value_decimal_places = typeof value_decimal_places !== 'undefined' ? value_decimal_places : 1;
	var range_text = range_element.parent().find(".range_value");
	range_text.text(value.toFixed(value_decimal_places) + " " + units_text);
}

function update_UI_range_formatted(range_element, value) {
	var range_text = range_element.parent().find(".range_value");
	range_text.text(value);
}

function show_modal(title, msg, msg2) {
	$get("#modal").modal("show");
	$get("#modal-title").text(title);
	$get("#modal-body").text(msg);
	if (msg2 == undefined) {
		$get("#modal-line2").hide();
	} else {
		$get("#modal-line2").show();
		$get("#modal-line2").text(msg2);
	}
}

// Update UI

function update_UI_model_name(name) {
	$get("title").text(name);
	$get("#brand_model_names").text(device.brand + " " + name);
	$get("#device_logo").attr("src", device.img_src);

	if ($get("#modal-title").text() == "WebSocket") {
		$get("#modal").modal("hide");
	}
}

function update_UI_friendly_name(name) {
	$get("#device_name").text(name.trim());

	// Make sure the whole name is visible
	$get("#device_name").attr("style", "");
	var box_wide = Math.ceil($get("#device_name").width());
	var label_fsize = $get("#device_name").css("font-size");
	var label_fpx = parseInt(label_fsize);
	var label_ffamily = $get("#device_name").css("font-family");
	var c = document.getElementById("canfit");
	var ctx = c.getContext("2d");
	while (label_fpx >= 10) {
		ctx.font = label_fpx + "px " + label_ffamily;
		var label_wide = Math.ceil(ctx.measureText(name.trim()).width);
		if (label_wide <= box_wide) {
			break;
		}
		label_fpx -= 1;
		$get("#device_name").css("font-size", label_fpx + "px");
	}

	if (current_hash === "#info") {
		$get("#title_bar").text(name.trim());
	}
}

function update_UI_power() {
	if (main_zone_page.data.power || zone_2_page.data.power) {
		update_UI_current_input();
	} else {
		$get("#menu_item_usb_player").hide();
		$get("#mobile_menu_item_usb_player").hide();
	}
}

function update_UI_current_input() {
	var iss_mainz = inputs_page.is_audio_streaming(main_zone_page.data.current_input);
	var iss_zone2 = inputs_page.is_audio_streaming(zone_2_page.data.current_input);
	if ((main_zone_page.data.power && iss_mainz) ||
		(zone_2_page.data.power && iss_zone2)) {
		$get("#menu_item_usb_player").show();
		$get("#mobile_menu_item_usb_player").show();
	} else {
		$get("#menu_item_usb_player").hide();
		$get("#mobile_menu_item_usb_player").hide();
	}
}

function fit_text_on_button(buttonid) {
	var words = $get(buttonid).text();

	// Make sure the whole name is visible
	$get(buttonid).attr("style", "");
	var box_wide = Math.ceil($get(buttonid).width());
	var label_fsize = $get(buttonid).css("font-size");
	var label_fpx = parseInt(label_fsize);
	var label_ffamily = $get(buttonid).css("font-family");
	var c = document.getElementById("canfit");
	var ctx = c.getContext("2d");
	while (label_fpx >= 10) {
		ctx.font = label_fpx + "px " + label_ffamily;
		var label_wide = Math.ceil(ctx.measureText(words).width);
		if (label_wide <= box_wide) {
			break;
		}
		label_fpx -= 1;
		$get(buttonid).css("font-size", label_fpx + "px");
		log("fit_text_on_button " + words + ", " + label_fpx);
	}
}



